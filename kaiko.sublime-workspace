{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"check",
				"check_lockout"
			],
			[
				"edito",
				"editions"
			],
			[
				"vesse",
				"vessel_id"
			],
			[
				"if",
				"if\tif"
			],
			[
				"ed",
				"editing_enabled"
			],
			[
				"list-s",
				"list-style-type"
			],
			[
				"add_",
				"add_child"
			],
			[
				"vi",
				"visible "
			],
			[
				"curre",
				"current_job"
			],
			[
				"assertisnot",
				"assertIsNotNone"
			],
			[
				"GR",
				"GREY"
			],
			[
				"true",
				"True"
			],
			[
				"cast",
				"cast"
			],
			[
				"Token",
				"Token"
			],
			[
				"Parser",
				"Parser"
			],
			[
				"Context",
				"Context"
			],
			[
				"NodeLi",
				"NodeList"
			],
			[
				"KAI",
				"KAI_RATING"
			],
			[
				"KAI_",
				"KAI_VS_CREW_CORROSION"
			],
			[
				"Q",
				"Q"
			],
			[
				"CREW",
				"CREW_CORROSION_RATING"
			],
			[
				"MapL",
				"MapLayer"
			],
			[
				"current_",
				"current_layer"
			],
			[
				"PDFG",
				"PDFGenerationTask"
			],
			[
				"Download",
				"DownloadPDF"
			],
			[
				"checklist",
				"checklist_procedure_data"
			],
			[
				"Field",
				"Field"
			],
			[
				"User",
				"User"
			],
			[
				"asser",
				"assertFalse"
			],
			[
				"UserVse",
				"UserVesselRelationship"
			],
			[
				"con",
				"context"
			],
			[
				"compo",
				"get_component_by_type"
			],
			[
				"swicher",
				"switcher_id"
			],
			[
				"swich",
				"switcher_id"
			],
			[
				"te",
				"test"
			],
			[
				"BaseFleet",
				"BaseFleetTestCase"
			],
			[
				"BaseFl",
				"BaseFleetTestCase"
			],
			[
				"last",
				"last_per_procedure"
			],
			[
				"exec",
				"executor"
			],
			[
				"splitex",
				"splitext"
			],
			[
				"proce",
				"procedure"
			],
			[
				"chuk",
				"chunk_size="
			],
			[
				"dire",
				"directory"
			],
			[
				"pro",
				"procedure"
			],
			[
				"due",
				"due_date"
			],
			[
				"overdue",
				"overdue_date"
			],
			[
				"show",
				"show_inspection_value"
			],
			[
				"last_in",
				"last_inspection"
			],
			[
				"last_ins",
				"last_inspections_per_section"
			],
			[
				"inspected_compo",
				"inspected_components_count"
			],
			[
				"prev",
				"previous_rating"
			],
			[
				"groupby",
				"groupby"
			],
			[
				"F",
				"F"
			],
			[
				"Av",
				"Avg"
			],
			[
				"component",
				"component_type"
			],
			[
				"componen",
				"component_type"
			],
			[
				"Component",
				"ComponentType"
			],
			[
				"COmponent",
				"ComponentType"
			],
			[
				"procedu",
				"procedure_id"
			],
			[
				"Inspectio",
				"InspectionTour"
			],
			[
				"inspec",
				"inspection_qs"
			],
			[
				"gall",
				"gallery_inspections"
			],
			[
				"defaultdict",
				"defaultdict"
			],
			[
				"gal",
				"gallery_inspections"
			],
			[
				"Inspec",
				"Inspection"
			],
			[
				"select",
				"select_related"
			],
			[
				"co",
				"cover"
			],
			[
				"img_",
				"img_defaults"
			],
			[
				"in",
				"initial"
			],
			[
				"cached",
				"cached_property"
			],
			[
				"first",
				":first-child"
			],
			[
				"ComponentT",
				"ComponentType"
			],
			[
				"Pydantic",
				"PydanticComponent"
			],
			[
				"storages",
				"STORAGES"
			],
			[
				"Gener",
				"Generic"
			],
			[
				"get_",
				"get_type_hints"
			],
			[
				"last_",
				"last_upload"
			],
			[
				"create",
				"created_at"
			],
			[
				"selec",
				"selected_period"
			],
			[
				"nex",
				"next_period_id"
			],
			[
				"is",
				"isinstance"
			],
			[
				"format",
				"format_string"
			],
			[
				"SafeStrin",
				"safestring"
			],
			[
				"vess",
				"vessels"
			],
			[
				"property",
				"propertyName"
			],
			[
				"laye",
				"layers"
			],
			[
				"draw",
				"drawnItems"
			],
			[
				"for",
				"forof\tfor (const item in items) {...}"
			],
			[
				"menu",
				"menuItems"
			],
			[
				"chi",
				"children"
			],
			[
				"BIOME",
				"BIOME_BINARY"
			],
			[
				"DEBIAN",
				"BUILD_DEBIAN_VERSION"
			],
			[
				"inde",
				"\"indentWidth\""
			],
			[
				"LSP",
				"\"LSP-html\""
			],
			[
				"typechec",
				"TYPE_CHECKING"
			],
			[
				"ka",
				"kai_rating_result"
			],
			[
				"kai",
				"kai_rating_result"
			],
			[
				"kai_",
				"kai_rating_job"
			],
			[
				"JobS",
				"JobStatus"
			],
			[
				"Ra",
				"ROTATIONAL2"
			],
			[
				"questio",
				"question_set"
			],
			[
				"lst",
				"list"
			],
			[
				"Questio",
				"QuestionSet"
			],
			[
				"_apply",
				"_apply_db_sorting"
			],
			[
				"expec",
				"expected_submission"
			],
			[
				"query",
				"get_queryset"
			],
			[
				"BaseCh",
				"BaseChartCard"
			],
			[
				"Redirec",
				"Redirect"
			],
			[
				"Emit",
				"Emit"
			],
			[
				"header",
				"headers="
			],
			[
				"top",
				"top-10 "
			],
			[
				"bt",
				"border-t-2 "
			],
			[
				"sele",
				"selected"
			],
			[
				"partial",
				"partial"
			],
			[
				"col",
				"columns="
			],
			[
				"all",
				"all_selected"
			],
			[
				"LayoutShape",
				"LayoutShapeQS"
			],
			[
				"format_html",
				"format_html"
			],
			[
				"Layout",
				"LayoutShape"
			],
			[
				"sha",
				"selected_shapes"
			],
			[
				"Layou",
				"LayoutShape"
			],
			[
				"layou",
				"LayoutShape"
			],
			[
				"selected",
				"selected_shapes"
			],
			[
				"Command",
				"Command"
			],
			[
				"get_model",
				"get_model_subscriptions"
			],
			[
				"Base",
				"BaseChartCard"
			],
			[
				"atomic",
				"atomic"
			],
			[
				"Redirect",
				"Redirect"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import operator\nimport typing as t\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom functools import cached_property\nfrom uuid import UUID\n\nfrom django.db import models\nfrom django.db.models.signals import post_save\nfrom django.utils.timezone import now\nfrom pydantic import EmailStr\n\n\nclass Acknowledgment(t.TypedDict):\n    user_id: str\n    user_name: str\n    user_email: EmailStr\n    positive: bool\n    timestamp: str\n\n\ndef acknowledgment_str(acknowledgment: Acknowledgment):\n    timestamp = datetime.fromisoformat(acknowledgment[\"timestamp\"])\n    timestamp_str = timestamp.strftime(\"%Y-%m-%d\")\n    user_name = (\n        acknowledgment[\"user_name\"] or acknowledgment[\"user_email\"] or acknowledgment[\"user_id\"]\n    )\n    return f\"{user_name} {timestamp_str}\"\n\n\ndef acknowledgments_get_amount(acknowledgments: list[Acknowledgment]):\n    return sum(1 if ack[\"positive\"] else -1 for ack in acknowledgments)\n\n\ndef acknowledgments_filter_active(\n    acknowledgments: list[Acknowledgment],\n) -> list[Acknowledgment]:\n    acknowledgments_by_user: dict[str, list[Acknowledgment]] = defaultdict(list)\n    for ack in acknowledgments:\n        acknowledgments_by_user[ack[\"user_id\"]].append(ack)\n    return [\n        ack for acks in acknowledgments_by_user.values() if (ack := acks[-1]) and ack[\"positive\"]\n    ]\n\n\ndef _copy_config_from_parent(\n    sender,\n    instance: \"WithAcknowledgmentConfig\",\n    created: bool,\n    **kwargs,\n):\n    if created:\n        instance.copy_acknowledgement_config_from_parent()\n        instance.save()\n\n\nclass WithAcknowledgmentConfig(models.Model):\n    acknowledgements_required = models.PositiveSmallIntegerField(\n        default=None,\n        null=True,\n        blank=True,\n        help_text=\"Leave this field in blank to disable this feature\",\n    )\n\n    class Meta:\n        abstract = True\n\n    def __init_subclass__(cls) -> None:\n        super().__init_subclass__()\n        post_save.connect(_copy_config_from_parent, sender=cls)\n\n    def copy_acknowledgement_config_from_parent(self):\n        \"\"\"Define this method in the child models.\"\"\"\n        raise NotImplementedError()\n\n    @cached_property\n    def default_acknowledge_status(self) -> str:\n        return f\"0/{self.acknowledgements_required}\"\n\n\nclass WithAcknowledgments(WithAcknowledgmentConfig):\n    acknowledgments: list[Acknowledgment] = models.JSONField(  # type: ignore\n        default=list, editable=False\n    )\n    is_fully_acknowledged = models.BooleanField(default=False, editable=False)\n    amount_of_acknowledgments = models.PositiveSmallIntegerField(default=0, editable=False)\n\n    class Meta:\n        abstract = True\n\n    @cached_property\n    def acknowledgments_str(self) -> str:\n        return \"\\n\".join(acknowledgment_str(ack) for ack in self.active_acknowledgments)\n\n    @cached_property\n    def active_acknowledgments(self) -> list[Acknowledgment]:\n        \"\"\"Returns the latest acks per user that are not been revoked\"\"\"\n        return acknowledgments_filter_active(self.acknowledgments)\n\n    @cached_property\n    def acknowledge_status(self) -> str:\n        if self.acknowledgements_required is None:\n            return \"\"\n        else:\n            return f\"{self.amount_of_acknowledgments}/{self.acknowledgements_required} Acknowledged\"\n\n    @cached_property\n    def can_by_acknowledged(self):\n        \"\"\"Return if the element can be acknowledged.\"\"\"\n        return self.acknowledgements_required is not None\n\n    def acknowledge(\n        self,\n        user_id: UUID | str,\n        user_name: str,\n        user_email: EmailStr,\n    ) -> bool:\n        \"\"\"Returns True when a user grants an acknowledgment over an element.\"\"\"\n        last_acknowledgement = self.get_last_acknowledgment_from_user(user_id)\n        if last_acknowledgement and last_acknowledgement[\"positive\"]:\n            return False\n\n        self._register_acknowledgment(\n            user_id=user_id,\n            user_name=user_name,\n            user_email=user_email,\n            positive=True,\n        )\n        return True\n\n    def revoke_acknowledge(\n        self,\n        user_id: UUID | str,\n        user_name: str,\n        user_email: EmailStr,\n    ) -> bool:\n        \"\"\"Returns True when a user revokes an acknowledgment over an element.\"\"\"\n        last_acknowledgement = self.get_last_acknowledgment_from_user(user_id)\n        if last_acknowledgement and not last_acknowledgement[\"positive\"]:\n            return False\n\n        self._register_acknowledgment(\n            user_id=user_id,\n            user_name=user_name,\n            user_email=user_email,\n            positive=False,\n        )\n        return True\n\n    def _register_acknowledgment(\n        self,\n        user_id: UUID | str,\n        user_name: str,\n        user_email: EmailStr,\n        positive: bool,\n    ):\n        \"\"\"Register an acknowledgment action over an element.\"\"\"\n\n        acknowledgment = Acknowledgment(\n            user_id=str(user_id),\n            user_name=user_name,\n            user_email=user_email,\n            positive=positive,\n            timestamp=now().isoformat(),\n        )\n\n        # ensure the list is always sorted\n        self.acknowledgments = sorted(\n            [*self.acknowledgments, acknowledgment],\n            key=operator.itemgetter(\"timestamp\"),\n        )\n\n        self.amount_of_acknowledgments = acknowledgments_get_amount(self.acknowledgments)\n        if self.acknowledgements_required is not None:\n            self.is_fully_acknowledged = (\n                self.amount_of_acknowledgments >= self.acknowledgements_required\n            )\n        self.save(\n            update_fields=[\n                \"acknowledgments\",\n                \"amount_of_acknowledgments\",\n                \"is_fully_acknowledged\",\n            ]\n        )\n\n    def get_active_acknowledgment_from_user(self, user_id: UUID | str) -> Acknowledgment | None:\n        \"\"\"Returns the user's last acknowledgment if its positive, otherwise returns None\"\"\"\n        ack = self.get_last_acknowledgment_from_user(user_id)\n        if ack and ack[\"positive\"]:\n            return ack\n        else:\n            return None\n\n    def get_last_acknowledgment_from_user(self, user_id: UUID | str) -> Acknowledgment | None:\n        \"\"\"Returns the user's last acknowledgment\"\"\"\n        user_acks = self.get_user_acknowledgments(user_id)\n        if user_acks:\n            return user_acks[-1]\n        else:\n            return None\n\n    def get_user_acknowledgments(self, user_id: UUID | str) -> list[Acknowledgment]:\n        \"\"\"Returns the user's acknowledgement\"\"\"\n        return [ack for ack in self.acknowledgments if ack[\"user_id\"] == str(user_id)]\n",
			"file": "kaiko/acknowledgments/models.py",
			"file_size": 6615,
			"file_write_time": 133923149769517039,
			"settings":
			{
				"buffer_size": 6615,
				"line_ending": "Unix"
			}
		},
		{
			"file": "djdatalog/models.py",
			"settings":
			{
				"buffer_size": 2653,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					24,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnIwAAAAAAAOcjAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAkdgAAIiIiCkRhdGFsb2cgZmFjdCBjbGFzc2VzIGFuZCBkeW5hbWljIERqYW5nbyBtb2RlbCBnZW5lcmF0aW9uLgoiIiIKCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IGRlZmF1bHRkaWN0CmZyb20gZnVuY3Rvb2xzIGltcG9ydCByZWR1Y2UKaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IHN5cwpmcm9tIHV1aWQ2IGltcG9ydCB1dWlkNwpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MsIGZpZWxkcwpmcm9tIGNvbGxlY3Rpb25zLmFiYyBpbXBvcnQgSXRlcmF0b3IKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgQ2xhc3NWYXIsIFVuaW9uLCBjYXN0LCBnZXRfYXJncywgZ2V0X29yaWdpbiwgUHJvdG9jb2wsIFR5cGVkRGljdAppbXBvcnQgb3BlcmF0b3IKZnJvbSBkamFuZ28uZGIgaW1wb3J0IG1vZGVscwpmcm9tIGRqYW5nby5kYiBpbXBvcnQgdHJhbnNhY3Rpb24KCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmNsYXNzIEZhY3RWYWx1ZXNEaWN0KFR5cGVkRGljdCk6CiAgICAiIiJUeXBlIGZvciB2YWx1ZXMoKSBxdWVyeSByZXN1bHRzIGZyb20gZmFjdCB0YWJsZXMuIiIiCgogICAgc3ViamVjdDogQW55CiAgICBvYmplY3Q6IEFueQoKCmNsYXNzIEZhY3RQcm90b2NvbChQcm90b2NvbCk6CiAgICAiIiJQcm90b2NvbCBkZWZpbmluZyB0aGUgaW50ZXJmYWNlIGZvciBkYXRhbG9nIGZhY3RzLiIiIgoKICAgIHN1YmplY3Q6IEFueQogICAgb2JqZWN0OiBBbnkKICAgIF9kamFuZ29fbW9kZWw6IENsYXNzVmFyW3R5cGVbbW9kZWxzLk1vZGVsXV0KCgpAZGF0YWNsYXNzKHNsb3RzPVRydWUpCmNsYXNzIFZhcjoKICAgICIiIlZhcmlhYmxlIHBsYWNlaG9sZGVyIGZvciBkYXRhbG9nIHF1ZXJpZXMuIiIiCgogICAgbmFtZTogc3RyCiAgICB3aGVyZTogQW55ID0gTm9uZSAgIyBRIG9iamVjdCBmb3IgYWRkaXRpb25hbCBjb25zdHJhaW50cwoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICBpZiBzZWxmLndoZXJlIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXR1cm4gZiJWYXIoe3NlbGYubmFtZSFyfSwgd2hlcmU9e3NlbGYud2hlcmUhcn0pIgogICAgICAgIHJldHVybiBmIlZhcih7c2VsZi5uYW1lIXJ9KSIKCgpAZGF0YWNsYXNzCmNsYXNzIFJ1bGU6CiAgICAiIiJSZXByZXNlbnRzIGEgZGF0YWxvZyBpbmZlcmVuY2UgcnVsZS4iIiIKCiAgICBoZWFkOiBGYWN0UHJvdG9jb2wKICAgIGJvZHk6IGxpc3RbRmFjdFByb3RvY29sIHwgbGlzdFtGYWN0UHJvdG9jb2xdXQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gZiJSdWxlKHtzZWxmLmhlYWR9IDotIHtzZWxmLmJvZHl9KSIKCgpAZGF0YWNsYXNzCmNsYXNzIEZhY3QoRmFjdFByb3RvY29sKToKICAgICIiIkJhc2UgY2xhc3MgZm9yIGRhdGFsb2cgZmFjdHMgdGhhdCBhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgRGphbmdvIG1vZGVscy4iIiIKCiAgICBfcmVnaXN0cnk6IENsYXNzVmFyW2RpY3Rbc3RyLCB0eXBlW0ZhY3RdXV0gPSB7fQogICAgX2dlbmVyYXRlZF9tb2RlbHM6IENsYXNzVmFyW2RpY3Rbc3RyLCB0eXBlW21vZGVscy5Nb2RlbF1dXSA9IHt9CiAgICBfcnVsZXM6IENsYXNzVmFyW2xpc3RbUnVsZV1dID0gW10KICAgIF9kamFuZ29fbW9kZWw6IENsYXNzVmFyW3R5cGVbbW9kZWxzLk1vZGVsXV0KICAgICMgQ2FjaGUgbW9kZWwgdHlwZXMgZm9yIGVhY2ggZmFjdCBjbGFzcyB0byBhdm9pZCBydW50aW1lIHR5cGUgaW5mZXJlbmNlCiAgICBfbW9kZWxfdHlwZXNfY2FjaGU6IENsYXNzVmFyW2RpY3RbdHlwZVtGYWN0UHJvdG9jb2xdLCBkaWN0W3N0ciwgdHlwZVttb2RlbHMuTW9kZWxdXV1dID0ge30KCiAgICBkZWYgX19pbml0X3N1YmNsYXNzX18oY2xzLCAqKmt3YXJncyk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfc3ViY2xhc3NfXygqKmt3YXJncykKCiAgICAgICAgIyBSZWdpc3RlciB0aGUgc3ViY2xhc3MKICAgICAgICBjbHMuX3JlZ2lzdHJ5W2Nscy5fX25hbWVfX10gPSBjbHMKCiAgICAgICAgIyBJbml0aWFsaXplIHRoZSBkamFuZ29fbW9kZWwgYXR0cmlidXRlCiAgICAgICAgY2xzLl9kamFuZ29fbW9kZWwgPSBjbHMuX2dlbmVyYXRlX2RqYW5nb19tb2RlbCgpCgogICAgICAgICMgQ2FjaGUgbW9kZWwgdHlwZXMgZm9yIGVmZmljaWVudCBoeWRyYXRpb24KICAgICAgICBjbHMuX2NhY2hlX21vZGVsX3R5cGVzKCkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBfY2FjaGVfbW9kZWxfdHlwZXMoY2xzKToKICAgICAgICAiIiJDYWNoZSBtb2RlbCB0eXBlcyBmcm9tIHR5cGUgYW5ub3RhdGlvbnMgZm9yIGVmZmljaWVudCBoeWRyYXRpb24uIiIiCiAgICAgICAgZnJvbSB0eXBpbmcgaW1wb3J0IGdldF90eXBlX2hpbnRzCgogICAgICAgIG1vZGVsX3R5cGVzID0ge30KICAgICAgICB0cnk6CiAgICAgICAgICAgIHR5cGVfaGludHMgPSBnZXRfdHlwZV9oaW50cyhjbHMpCgogICAgICAgICAgICAjIENoZWNrIHN1YmplY3QgZmllbGQKICAgICAgICAgICAgc3ViamVjdF90eXBlID0gdHlwZV9oaW50cy5nZXQoInN1YmplY3QiKQogICAgICAgICAgICBpZiBzdWJqZWN0X3R5cGU6CiAgICAgICAgICAgICAgICBtb2RlbF90eXBlID0gY2xzLl9leHRyYWN0X21vZGVsX3R5cGUoc3ViamVjdF90eXBlKQogICAgICAgICAgICAgICAgaWYgbW9kZWxfdHlwZToKICAgICAgICAgICAgICAgICAgICBtb2RlbF90eXBlc1sic3ViamVjdCJdID0gbW9kZWxfdHlwZQoKICAgICAgICAgICAgIyBDaGVjayBvYmplY3QgZmllbGQKICAgICAgICAgICAgb2JqZWN0X3R5cGUgPSB0eXBlX2hpbnRzLmdldCgib2JqZWN0IikKICAgICAgICAgICAgaWYgb2JqZWN0X3R5cGU6CiAgICAgICAgICAgICAgICBtb2RlbF90eXBlID0gY2xzLl9leHRyYWN0X21vZGVsX3R5cGUob2JqZWN0X3R5cGUpCiAgICAgICAgICAgICAgICBpZiBtb2RlbF90eXBlOgogICAgICAgICAgICAgICAgICAgIG1vZGVsX3R5cGVzWyJvYmplY3QiXSA9IG1vZGVsX3R5cGUKCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZGVidWcoIkZhaWxlZCB0byBjYWNoZSBtb2RlbCB0eXBlcyBmb3IgJXM6ICVzIiwgY2xzLl9fbmFtZV9fLCBlKQoKICAgICAgICBjbHMuX21vZGVsX3R5cGVzX2NhY2hlW2Nsc10gPSBtb2RlbF90eXBlcwoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9leHRyYWN0X21vZGVsX3R5cGUoY2xzLCBmaWVsZF90eXBlKToKICAgICAgICAiIiJFeHRyYWN0IERqYW5nbyBtb2RlbCB0eXBlIGZyb20gYSBmaWVsZCB0eXBlIGFubm90YXRpb24uIiIiCiAgICAgICAgZnJvbSB0eXBpbmcgaW1wb3J0IGdldF9hcmdzLCBnZXRfb3JpZ2luCgogICAgICAgICMgSGFuZGxlIFVuaW9uIHR5cGVzIChlLmcuLCBVc2VyIHwgVmFyKQogICAgICAgIG9yaWdpbiA9IGdldF9vcmlnaW4oZmllbGRfdHlwZSkKICAgICAgICBpc191bmlvbiA9IG9yaWdpbiBpcyBVbmlvbiBvciBzdHIob3JpZ2luKSA9PSAiPGNsYXNzICd0eXBlcy5VbmlvblR5cGUnPiIKCiAgICAgICAgaWYgaXNfdW5pb246CiAgICAgICAgICAgIHR5cGVfYXJncyA9IGdldF9hcmdzKGZpZWxkX3R5cGUpCiAgICAgICAgICAgIGZvciBhcmcgaW4gdHlwZV9hcmdzOgogICAgICAgICAgICAgICAgaWYgYXJnIGlzIG5vdCBWYXIgYW5kIGhhc2F0dHIoYXJnLCAiX21ldGEiKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnCiAgICAgICAgZWxpZiBoYXNhdHRyKGZpZWxkX3R5cGUsICJfbWV0YSIpOgogICAgICAgICAgICByZXR1cm4gZmllbGRfdHlwZQoKICAgICAgICByZXR1cm4gTm9uZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9nZW5lcmF0ZV9kamFuZ29fbW9kZWwoY2xzKSAtPiB0eXBlW21vZGVscy5Nb2RlbF06CiAgICAgICAgIiIiR2VuZXJhdGUgYSBEamFuZ28gbW9kZWwgZm9yIHRoaXMgZmFjdCBjbGFzcy4iIiIKCiAgICAgICAgIyBHZXQgdGhlIG1vZHVsZSB3aGVyZSB0aGlzIGZhY3QgaXMgZGVmaW5lZAogICAgICAgIGZhY3RfbW9kdWxlID0gc3lzLm1vZHVsZXNbY2xzLl9fbW9kdWxlX19dCgogICAgICAgICMgQ3JlYXRlIG1vZGVsIG5hbWUgd2l0aCAiRmFjdCIgcHJlZml4CiAgICAgICAgbW9kZWxfbmFtZSA9IGYiRmFjdHtjbHMuX19uYW1lX199IgoKICAgICAgICAjIEV4dHJhY3QgZmllbGQgaW5mb3JtYXRpb24gZnJvbSBkYXRhY2xhc3MKICAgICAgICBmYWN0X2ZpZWxkcyA9IGZpZWxkcyhjbHMpCiAgICAgICAgbG9nZ2VyLmRlYnVnKCJEYXRhY2xhc3MgZmllbGRzIGZvciAlczogJXMiLCBjbHMuX19uYW1lX18sIFtmLm5hbWUgZm9yIGYgaW4gZmFjdF9maWVsZHNdKQoKICAgICAgICAjIEJ1aWxkIERqYW5nbyBtb2RlbCBmaWVsZHMgLSBhc3N1bWluZyBzdWJqZWN0IGFuZCBvYmplY3QgYWx3YXlzIGV4aXN0CiAgICAgICAgbW9kZWxfZmllbGRzID0gewogICAgICAgICAgICAic3ViamVjdCI6IGNscy5fY3JlYXRlX2RqYW5nb19maWVsZF9mb3JfbmFtZSgic3ViamVjdCIpLAogICAgICAgICAgICAib2JqZWN0IjogY2xzLl9jcmVhdGVfZGphbmdvX2ZpZWxkX2Zvcl9uYW1lKCJvYmplY3QiKSwKICAgICAgICAgICAgImlkIjogbW9kZWxzLlVVSURGaWVsZChwcmltYXJ5X2tleT1UcnVlLCBkZWZhdWx0PXV1aWQ3LCBlZGl0YWJsZT1GYWxzZSksCiAgICAgICAgfQoKICAgICAgICBsb2dnZXIuZGVidWcoIk1vZGVsIGZpZWxkcyBmb3IgJXM6IHN1YmplY3QsIG9iamVjdCwgaWQiLCBjbHMuX19uYW1lX18pCgogICAgICAgICMgQ3JlYXRlIE1ldGEgY2xhc3Mgd2l0aCB1bmlxdWUgY29uc3RyYWludAogICAgICAgIG1ldGFfYXR0cnMgPSB7InVuaXF1ZV90b2dldGhlciI6IFsoInN1YmplY3QiLCAib2JqZWN0IildfQoKICAgICAgICAjIENyZWF0ZSBEamFuZ28gbW9kZWwgY2xhc3MKICAgICAgICBtb2RlbF9hdHRycyA9IHsKICAgICAgICAgICAgKiptb2RlbF9maWVsZHMsCiAgICAgICAgICAgICJNZXRhIjogdHlwZSgiTWV0YSIsICgpLCBtZXRhX2F0dHJzKSwKICAgICAgICAgICAgIl9fbW9kdWxlX18iOiBjbHMuX19tb2R1bGVfXywKICAgICAgICB9CgogICAgICAgICMgQ3JlYXRlIHRoZSBtb2RlbCBjbGFzcwogICAgICAgIG1vZGVsX2NsYXNzID0gdHlwZShtb2RlbF9uYW1lLCAobW9kZWxzLk1vZGVsLCksIG1vZGVsX2F0dHJzKQoKICAgICAgICAjIFN0b3JlIHRoZSBnZW5lcmF0ZWQgbW9kZWwgaW4gYm90aCBwbGFjZXMKICAgICAgICBjbHMuX2dlbmVyYXRlZF9tb2RlbHNbY2xzLl9fbmFtZV9fXSA9IG1vZGVsX2NsYXNzCgogICAgICAgICMgSW5qZWN0IHRoZSBtb2RlbCBpbnRvIHRoZSBtb2R1bGUgd2hlcmUgdGhlIGZhY3QgaXMgZGVmaW5lZAogICAgICAgIHNldGF0dHIoZmFjdF9tb2R1bGUsIG1vZGVsX25hbWUsIG1vZGVsX2NsYXNzKQogICAgICAgIHJldHVybiBtb2RlbF9jbGFzcwoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9jcmVhdGVfZGphbmdvX2ZpZWxkX2Zvcl9uYW1lKGNscywgZmllbGRfbmFtZTogc3RyKSAtPiBtb2RlbHMuRmllbGQ6CiAgICAgICAgIiIiQ3JlYXRlIGEgRGphbmdvIGZpZWxkIGZvciBhIHNwZWNpZmljIGZpZWxkIG5hbWUgKHN1YmplY3Qgb3Igb2JqZWN0KS4iIiIKICAgICAgICBmcm9tIHR5cGluZyBpbXBvcnQgZ2V0X3R5cGVfaGludHMKCiAgICAgICAgIyBHZXQgdGhlIGFjdHVhbCB0eXBlIGhpbnRzIChyZXNvbHZlcyBzdHJpbmcgYW5ub3RhdGlvbnMpCiAgICAgICAgdHJ5OgogICAgICAgICAgICB0eXBlX2hpbnRzID0gZ2V0X3R5cGVfaGludHMoY2xzKQogICAgICAgICAgICBmaWVsZF90eXBlID0gdHlwZV9oaW50c1tmaWVsZF9uYW1lXQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgIyBGYWxsIGJhY2sgdG8gdGhlIHJhdyBmaWVsZCB0eXBlCiAgICAgICAgICAgIGZpZWxkX3R5cGUgPSBuZXh0KGYudHlwZSBmb3IgZiBpbiBmaWVsZHMoY2xzKSBpZiBmLm5hbWUgPT0gZmllbGRfbmFtZSkKICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCJGYWlsZWQgdG8gcmVzb2x2ZSB0eXBlIGhpbnRzIGZvciAlcy4lczogJXMiLCBjbHMuX19uYW1lX18sIGZpZWxkX25hbWUsIGUpCgogICAgICAgICMgSGFuZGxlIFVuaW9uIHR5cGVzIChlLmcuLCBNb2RlbCB8IFZhcikgLSBzdXBwb3J0IGJvdGggdHlwaW5nLlVuaW9uIGFuZCB0eXBlcy5VbmlvblR5cGUKICAgICAgICBvcmlnaW4gPSBnZXRfb3JpZ2luKGZpZWxkX3R5cGUpCiAgICAgICAgaXNfdW5pb24gPSBvcmlnaW4gaXMgVW5pb24gb3Igc3RyKG9yaWdpbikgPT0gIjxjbGFzcyAndHlwZXMuVW5pb25UeXBlJz4iCgogICAgICAgIGlmIGlzX3VuaW9uOgogICAgICAgICAgICB0eXBlX2FyZ3MgPSBnZXRfYXJncyhmaWVsZF90eXBlKQogICAgICAgICAgICAjIEZpbmQgdGhlIG5vbi1WYXIgdHlwZSAoc2hvdWxkIGJlIGEgRGphbmdvIG1vZGVsKQogICAgICAgICAgICBmb3IgYXJnIGluIHR5cGVfYXJnczoKICAgICAgICAgICAgICAgIGlmIGFyZyBpcyBub3QgVmFyIGFuZCBoYXNhdHRyKGFyZywgIl9tZXRhIik6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVscy5Gb3JlaWduS2V5KGFyZywgb25fZGVsZXRlPW1vZGVscy5DQVNDQURFLCByZWxhdGVkX25hbWU9IisiKQoKICAgICAgICAjIEhhbmRsZSBkaXJlY3QgbW9kZWwgdHlwZXMKICAgICAgICBlbGlmIGhhc2F0dHIoZmllbGRfdHlwZSwgIl9tZXRhIik6CiAgICAgICAgICAgIHJldHVybiBtb2RlbHMuRm9yZWlnbktleShmaWVsZF90eXBlLCBvbl9kZWxldGU9bW9kZWxzLkNBU0NBREUsIHJlbGF0ZWRfbmFtZT0iKyIpCgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZiJDb3VsZCBub3QgY3JlYXRlIERqYW5nbyBmaWVsZCBmb3Ige2Nscy5fX25hbWVfX30ue2ZpZWxkX25hbWV9IikKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBnZXRfcmVnaXN0ZXJlZF9mYWN0cyhjbHMpOgogICAgICAgICIiIkdldCBhbGwgcmVnaXN0ZXJlZCBmYWN0IGNsYXNzZXMuIiIiCiAgICAgICAgcmV0dXJuIGNscy5fcmVnaXN0cnkuY29weSgpCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZ2V0X3J1bGVzKGNscyk6CiAgICAgICAgIiIiR2V0IGFsbCByZWdpc3RlcmVkIHJ1bGVzLiIiIgogICAgICAgIHJldHVybiBjbHMuX3J1bGVzLmNvcHkoKQoKCmRlZiBydWxlKGhlYWQ6IEZhY3RQcm90b2NvbCwgKmJvZHk6IEZhY3RQcm90b2NvbCB8IGxpc3RbRmFjdFByb3RvY29sXSk6CiAgICAiIiJEZWZpbmUgYSBkYXRhbG9nIGluZmVyZW5jZSBydWxlLgoKICAgIEFyZ3M6CiAgICAgICAgaGVhZDogVGhlIGZhY3QgdGhhdCBjYW4gYmUgaW5mZXJyZWQgKGNvbmNsdXNpb24pCiAgICAgICAgKmJvZHk6IFRoZSBjb25kaXRpb25zIChmYWN0cyBvciBsaXN0cyBvZiBmYWN0cykgdGhhdCBtdXN0IGJlIHRydWUKCiAgICBFeGFtcGxlOgogICAgICAgIHJ1bGUoSGFzQWNjZXNzKFZhcigidXNlciIpLCBWYXIoInZlc3NlbCIpKSwKICAgICAgICAgICAgIE1lbWJlck9mKFZhcigidXNlciIpLCBWYXIoImNvbXBhbnkiKSksCiAgICAgICAgICAgICBPd25zKFZhcigiY29tcGFueSIpLCBWYXIoInZlc3NlbCIpKSkKICAgICIiIgogICAgcnVsZV9vYmogPSBSdWxlKGhlYWQ9aGVhZCwgYm9keT1saXN0KGJvZHkpKQogICAgRmFjdC5fcnVsZXMuYXBwZW5kKHJ1bGVfb2JqKQogICAgcmV0dXJuIHJ1bGVfb2JqCgoKZGVmIF9nZXRfdmFyaWFibGVzKGZhY3Q6IEZhY3RQcm90b2NvbCkgLT4gc2V0W3N0cl06CiAgICAiIiJFeHRyYWN0IGFsbCB2YXJpYWJsZXMgZnJvbSBhIGZhY3QuIiIiCiAgICB2YXJpYWJsZXMgPSBzZXQoKQogICAgaWYgaXNpbnN0YW5jZShmYWN0LnN1YmplY3QsIFZhcik6CiAgICAgICAgdmFyaWFibGVzLmFkZChmYWN0LnN1YmplY3QubmFtZSkKICAgIGlmIGlzaW5zdGFuY2UoZmFjdC5vYmplY3QsIFZhcik6CiAgICAgICAgdmFyaWFibGVzLmFkZChmYWN0Lm9iamVjdC5uYW1lKQogICAgcmV0dXJuIHZhcmlhYmxlcwoKCmRlZiBfc3Vic3RpdHV0ZV92YXJpYWJsZXMoZmFjdDogRmFjdFByb3RvY29sLCBzdWJzdGl0dXRpb246IGRpY3Rbc3RyLCBBbnldKSAtPiBGYWN0UHJvdG9jb2w6CiAgICAiIiJDcmVhdGUgYSBuZXcgZmFjdCB3aXRoIHZhcmlhYmxlcyBzdWJzdGl0dXRlZC4iIiIKICAgIGZhY3RfY2xhc3MgPSB0eXBlKGZhY3QpCgogICAgIyBIYW5kbGUgc3ViamVjdAogICAgaWYgaXNpbnN0YW5jZShmYWN0LnN1YmplY3QsIFZhcikgYW5kIGZhY3Quc3ViamVjdC5uYW1lIGluIHN1YnN0aXR1dGlvbjoKICAgICAgICBzdWJqZWN0ID0gc3Vic3RpdHV0aW9uW2ZhY3Quc3ViamVjdC5uYW1lXQogICAgZWxzZToKICAgICAgICBzdWJqZWN0ID0gZmFjdC5zdWJqZWN0CgogICAgIyBIYW5kbGUgb2JqZWN0CiAgICBpZiBpc2luc3RhbmNlKGZhY3Qub2JqZWN0LCBWYXIpIGFuZCBmYWN0Lm9iamVjdC5uYW1lIGluIHN1YnN0aXR1dGlvbjoKICAgICAgICBvYmplY3RfdmFsID0gc3Vic3RpdHV0aW9uW2ZhY3Qub2JqZWN0Lm5hbWVdCiAgICBlbHNlOgogICAgICAgIG9iamVjdF92YWwgPSBmYWN0Lm9iamVjdAoKICAgIHJldHVybiBmYWN0X2NsYXNzKHN1YmplY3Q9c3ViamVjdCwgb2JqZWN0PW9iamVjdF92YWwpICAjIHR5cGU6IGlnbm9yZQoKCmRlZiBfZmFjdF90b19kamFuZ29fcXVlcnkoZmFjdDogRmFjdFByb3RvY29sKSAtPiB0dXBsZVtkaWN0W3N0ciwgQW55XSwgbGlzdFtBbnldXToKICAgICIiIkNvbnZlcnQgYSBmYWN0IHRvIERqYW5nbyBxdWVyeSBwYXJhbWV0ZXJzIGFuZCBRIG9iamVjdHMuCiAgICAKICAgIFJldHVybnM6CiAgICAgICAgdHVwbGU6IChxdWVyeV9wYXJhbXMsIHFfb2JqZWN0cykgd2hlcmUgcV9vYmplY3RzIGFyZSBjb25zdHJhaW50cyBmb3IgVmFycwogICAgIiIiCiAgICBxdWVyeV9wYXJhbXMgPSB7fQogICAgcV9vYmplY3RzID0gW10KCiAgICBpZiBub3QgaXNpbnN0YW5jZShmYWN0LnN1YmplY3QsIFZhcik6CiAgICAgICAgcXVlcnlfcGFyYW1zWyJzdWJqZWN0Il0gPSBmYWN0LnN1YmplY3QKICAgIGVsaWYgZmFjdC5zdWJqZWN0LndoZXJlIGlzIG5vdCBOb25lOgogICAgICAgICMgQWRkIFEgb2JqZWN0IGNvbnN0cmFpbnQgd2l0aCBzdWJqZWN0X18gcHJlZml4CiAgICAgICAgZnJvbSBkamFuZ28uZGIubW9kZWxzIGltcG9ydCBRCiAgICAgICAgcV9vYmogPSBmYWN0LnN1YmplY3Qud2hlcmUKICAgICAgICAjIFRyYW5zZm9ybSB0aGUgUSBvYmplY3QgdG8gcHJlZml4IGFsbCBsb29rdXBzIHdpdGggInN1YmplY3RfXyIKICAgICAgICBwcmVmaXhlZF9xID0gX3ByZWZpeF9xX29iamVjdChxX29iaiwgInN1YmplY3QiKQogICAgICAgIHFfb2JqZWN0cy5hcHBlbmQocHJlZml4ZWRfcSkKICAgICAgICAKICAgIGlmIG5vdCBpc2luc3RhbmNlKGZhY3Qub2JqZWN0LCBWYXIpOgogICAgICAgIHF1ZXJ5X3BhcmFtc1sib2JqZWN0Il0gPSBmYWN0Lm9iamVjdAogICAgZWxpZiBmYWN0Lm9iamVjdC53aGVyZSBpcyBub3QgTm9uZToKICAgICAgICAjIEFkZCBRIG9iamVjdCBjb25zdHJhaW50IHdpdGggb2JqZWN0X18gcHJlZml4ICAKICAgICAgICBmcm9tIGRqYW5nby5kYi5tb2RlbHMgaW1wb3J0IFEKICAgICAgICBxX29iaiA9IGZhY3Qub2JqZWN0LndoZXJlCiAgICAgICAgIyBUcmFuc2Zvcm0gdGhlIFEgb2JqZWN0IHRvIHByZWZpeCBhbGwgbG9va3VwcyB3aXRoICJvYmplY3RfXyIKICAgICAgICBwcmVmaXhlZF9xID0gX3ByZWZpeF9xX29iamVjdChxX29iaiwgIm9iamVjdCIpCiAgICAgICAgcV9vYmplY3RzLmFwcGVuZChwcmVmaXhlZF9xKQoKICAgIHJldHVybiBxdWVyeV9wYXJhbXMsIHFfb2JqZWN0cwoKCmRlZiBfcHJlZml4X3Ffb2JqZWN0KHFfb2JqLCBwcmVmaXg6IHN0cik6CiAgICAiIiJQcmVmaXggYWxsIGZpZWxkIGxvb2t1cHMgaW4gYSBRIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBwcmVmaXguIiIiCiAgICBmcm9tIGRqYW5nby5kYi5tb2RlbHMgaW1wb3J0IFEKICAgIAogICAgaWYgaGFzYXR0cihxX29iaiwgJ2NoaWxkcmVuJyk6CiAgICAgICAgIyBRIG9iamVjdCB3aXRoIGNoaWxkcmVuIChBTkQvT1Igb3BlcmF0aW9ucykKICAgICAgICBuZXdfcSA9IFEoKQogICAgICAgIG5ld19xLmNvbm5lY3RvciA9IHFfb2JqLmNvbm5lY3RvcgogICAgICAgIG5ld19xLm5lZ2F0ZWQgPSBxX29iai5uZWdhdGVkCiAgICAgICAgCiAgICAgICAgZm9yIGNoaWxkIGluIHFfb2JqLmNoaWxkcmVuOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGNoaWxkLCB0dXBsZSk6CiAgICAgICAgICAgICAgICAjIFRoaXMgaXMgYSBmaWVsZCBsb29rdXA6IChmaWVsZF9uYW1lLCB2YWx1ZSkKICAgICAgICAgICAgICAgIGZpZWxkX25hbWUsIHZhbHVlID0gY2hpbGQKICAgICAgICAgICAgICAgIG5ld19maWVsZF9uYW1lID0gZiJ7cHJlZml4fV9fe2ZpZWxkX25hbWV9IgogICAgICAgICAgICAgICAgbmV3X3EuY2hpbGRyZW4uYXBwZW5kKChuZXdfZmllbGRfbmFtZSwgdmFsdWUpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUaGlzIGlzIGFub3RoZXIgUSBvYmplY3QgLSByZWN1cnNlCiAgICAgICAgICAgICAgICBuZXdfcS5jaGlsZHJlbi5hcHBlbmQoX3ByZWZpeF9xX29iamVjdChjaGlsZCwgcHJlZml4KSkKICAgICAgICByZXR1cm4gbmV3X3EKICAgIGVsc2U6CiAgICAgICAgIyBTaW1wbGUgUSBvYmplY3QgLSBjcmVhdGUgYSBuZXcgb25lIHdpdGggcHJlZml4ZWQgZmllbGRzCiAgICAgICAgbmV3X3EgPSBRKCkKICAgICAgICBuZXdfcS5jb25uZWN0b3IgPSBxX29iai5jb25uZWN0b3IgIAogICAgICAgIG5ld19xLm5lZ2F0ZWQgPSBxX29iai5uZWdhdGVkCiAgICAgICAgZm9yIGNoaWxkIGluIHFfb2JqLmNoaWxkcmVuOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGNoaWxkLCB0dXBsZSk6CiAgICAgICAgICAgICAgICBmaWVsZF9uYW1lLCB2YWx1ZSA9IGNoaWxkCiAgICAgICAgICAgICAgICBuZXdfZmllbGRfbmFtZSA9IGYie3ByZWZpeH1fX3tmaWVsZF9uYW1lfSIKICAgICAgICAgICAgICAgIG5ld19xLmNoaWxkcmVuLmFwcGVuZCgobmV3X2ZpZWxkX25hbWUsIHZhbHVlKSkKICAgICAgICByZXR1cm4gbmV3X3EKCgpkZWYgX2RqYW5nb19yZXN1bHRfdG9fc3Vic3RpdHV0aW9uKAogICAgZmFjdDogRmFjdFByb3RvY29sLCB2YWx1ZXNfZGljdDogRmFjdFZhbHVlc0RpY3QKKSAtPiBkaWN0W3N0ciwgQW55XToKICAgICIiIkNvbnZlcnQgRGphbmdvIHF1ZXJ5IHJlc3VsdCB0byB2YXJpYWJsZSBzdWJzdGl0dXRpb24uIiIiCiAgICBzdWJzdGl0dXRpb24gPSB7fQogICAgaWYgaXNpbnN0YW5jZShmYWN0LnN1YmplY3QsIFZhcik6CiAgICAgICAgc3Vic3RpdHV0aW9uW2ZhY3Quc3ViamVjdC5uYW1lXSA9IHZhbHVlc19kaWN0WyJzdWJqZWN0Il0KICAgIGlmIGlzaW5zdGFuY2UoZmFjdC5vYmplY3QsIFZhcik6CiAgICAgICAgc3Vic3RpdHV0aW9uW2ZhY3Qub2JqZWN0Lm5hbWVdID0gdmFsdWVzX2RpY3RbIm9iamVjdCJdCgogICAgcmV0dXJuIHN1YnN0aXR1dGlvbgoKCmRlZiBfaHlkcmF0ZV9yZXN1bHRzKAogICAgcGtfcmVzdWx0czogbGlzdFtkaWN0W3N0ciwgQW55XV0sIGZhY3RfcGF0dGVybnM6IHR1cGxlW0ZhY3RQcm90b2NvbCwgLi4uXSB8IGxpc3RbRmFjdFByb3RvY29sXQopIC0+IEl0ZXJhdG9yW2RpY3Rbc3RyLCBBbnldXToKICAgICIiIkh5ZHJhdGUgUEsgdmFsdWVzIGJhY2sgdG8gbW9kZWwgaW5zdGFuY2VzLiIiIgogICAgaWYgbm90IHBrX3Jlc3VsdHM6CiAgICAgICAgcmV0dXJuCgogICAgIyBFeHRyYWN0IG1vZGVsIHR5cGVzIGZyb20gY2FjaGVkIG1ldGFkYXRhIGluc3RlYWQgb2YgcnVudGltZSB0eXBlIGludHJvc3BlY3Rpb24KICAgIG1vZGVsX3R5cGVzX2J5X3ZhciA9IHt9CgogICAgZm9yIGZhY3RfcGF0dGVybiBpbiBmYWN0X3BhdHRlcm5zOgogICAgICAgIGZhY3RfY2xhc3MgPSB0eXBlKGZhY3RfcGF0dGVybikKICAgICAgICBjYWNoZWRfdHlwZXMgPSBGYWN0Ll9tb2RlbF90eXBlc19jYWNoZS5nZXQoZmFjdF9jbGFzcywge30pCgogICAgICAgICMgTWFwIHZhcmlhYmxlcyB0byB0aGVpciBtb2RlbCB0eXBlcyBiYXNlZCBvbiBjYWNoZWQgbWV0YWRhdGEKICAgICAgICBpZiBpc2luc3RhbmNlKGZhY3RfcGF0dGVybi5zdWJqZWN0LCBWYXIpOgogICAgICAgICAgICBzdWJqZWN0X21vZGVsX3R5cGUgPSBjYWNoZWRfdHlwZXMuZ2V0KCJzdWJqZWN0IikKICAgICAgICAgICAgaWYgc3ViamVjdF9tb2RlbF90eXBlOgogICAgICAgICAgICAgICAgbW9kZWxfdHlwZXNfYnlfdmFyW2ZhY3RfcGF0dGVybi5zdWJqZWN0Lm5hbWVdID0gc3ViamVjdF9tb2RlbF90eXBlCgogICAgICAgIGlmIGlzaW5zdGFuY2UoZmFjdF9wYXR0ZXJuLm9iamVjdCwgVmFyKToKICAgICAgICAgICAgb2JqZWN0X21vZGVsX3R5cGUgPSBjYWNoZWRfdHlwZXMuZ2V0KCJvYmplY3QiKQogICAgICAgICAgICBpZiBvYmplY3RfbW9kZWxfdHlwZToKICAgICAgICAgICAgICAgIG1vZGVsX3R5cGVzX2J5X3ZhcltmYWN0X3BhdHRlcm4ub2JqZWN0Lm5hbWVdID0gb2JqZWN0X21vZGVsX3R5cGUKCiAgICAjIENvbGxlY3QgYWxsIFBLcyB0aGF0IG5lZWQgdG8gYmUgaHlkcmF0ZWQgYnkgbW9kZWwgdHlwZQogICAgcGtzX2J5X21vZGVsID0gZGVmYXVsdGRpY3Qoc2V0KQogICAgZm9yIHJlc3VsdCBpbiBwa19yZXN1bHRzOgogICAgICAgIGZvciB2YXJfbmFtZSwgcGtfdmFsdWUgaW4gcmVzdWx0Lml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHZhcl9uYW1lIGluIG1vZGVsX3R5cGVzX2J5X3ZhcjoKICAgICAgICAgICAgICAgIG1vZGVsX3R5cGUgPSBtb2RlbF90eXBlc19ieV92YXJbdmFyX25hbWVdCiAgICAgICAgICAgICAgICBwa3NfYnlfbW9kZWxbbW9kZWxfdHlwZV0uYWRkKHBrX3ZhbHVlKQoKICAgICMgQmF0Y2ggZmV0Y2ggYWxsIG1vZGVsIGluc3RhbmNlcwogICAgbW9kZWxfaW5zdGFuY2VzID0ge30KICAgIGZvciBtb2RlbF90eXBlLCBwa3MgaW4gcGtzX2J5X21vZGVsLml0ZW1zKCk6CiAgICAgICAgaW5zdGFuY2VzID0gbW9kZWxfdHlwZS5vYmplY3RzLmZpbHRlcihwa19faW49bGlzdChwa3MpKQogICAgICAgIGZvciBpbnN0YW5jZSBpbiBpbnN0YW5jZXM6CiAgICAgICAgICAgIG1vZGVsX2luc3RhbmNlc1ttb2RlbF90eXBlLCBpbnN0YW5jZS5wa10gPSBpbnN0YW5jZQoKICAgICMgSHlkcmF0ZSB0aGUgcmVzdWx0cwogICAgZm9yIHJlc3VsdCBpbiBwa19yZXN1bHRzOgogICAgICAgIGh5ZHJhdGVkX3Jlc3VsdCA9IHt9CiAgICAgICAgZm9yIHZhcl9uYW1lLCBwa192YWx1ZSBpbiByZXN1bHQuaXRlbXMoKToKICAgICAgICAgICAgaWYgdmFyX25hbWUgaW4gbW9kZWxfdHlwZXNfYnlfdmFyOgogICAgICAgICAgICAgICAgbW9kZWxfdHlwZSA9IG1vZGVsX3R5cGVzX2J5X3Zhclt2YXJfbmFtZV0KICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbW9kZWxfaW5zdGFuY2VzLmdldCgobW9kZWxfdHlwZSwgcGtfdmFsdWUpKQogICAgICAgICAgICAgICAgaWYgaW5zdGFuY2U6CiAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZWRfcmVzdWx0W3Zhcl9uYW1lXSA9IGluc3RhbmNlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgUEsgbm90IGZvdW5kLCBza2lwIHRoaXMgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZWRfcmVzdWx0ID0gTm9uZQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFZhcmlhYmxlIG5vdCBpbiBtb2RlbCB0eXBlcywga2VlcCBhcyBpcwogICAgICAgICAgICAgICAgaHlkcmF0ZWRfcmVzdWx0W3Zhcl9uYW1lXSA9IHBrX3ZhbHVlCgogICAgICAgIGlmIGh5ZHJhdGVkX3Jlc3VsdCBpcyBub3QgTm9uZToKICAgICAgICAgICAgeWllbGQgaHlkcmF0ZWRfcmVzdWx0CgoKZGVmIHF1ZXJ5KCpmYWN0X3BhdHRlcm5zOiBGYWN0UHJvdG9jb2wsIGh5ZHJhdGU6IGJvb2wgPSBUcnVlKSAtPiBJdGVyYXRvcltkaWN0W3N0ciwgQW55XV06CiAgICAiIiJRdWVyeSBmYWN0cyBmcm9tIHRoZSBkYXRhYmFzZSBhbmQgYXBwbHkgaW5mZXJlbmNlIHJ1bGVzLgoKICAgIEFyZ3M6CiAgICAgICAgKmZhY3RfcGF0dGVybnM6IE9uZSBvciBtb3JlIGZhY3QgcGF0dGVybnMgdG8gbWF0Y2ggYXMgYSBjb25qdW5jdGlvbgogICAgICAgIGh5ZHJhdGU6IElmIFRydWUgKGRlZmF1bHQpLCByZXR1cm5zIGZ1bGwgbW9kZWwgaW5zdGFuY2VzLiBJZiBGYWxzZSwgcmV0dXJucyBQS3Mgb25seS4KCiAgICBZaWVsZHM6CiAgICAgICAgRGljdGlvbmFyeSBtYXBwaW5nIHZhcmlhYmxlIG5hbWVzIHRvIHRoZWlyIHZhbHVlcyAobW9kZWxzIG9yIFBLcyBiYXNlZCBvbiBoeWRyYXRlKQogICAgIiIiCiAgICAjIEFsd2F5cyB1c2UgY29uanVuY3Rpb24gc29sdmluZyAtIGEgc2luZ2xlIGZhY3QgaXMganVzdCBhIGNvbmp1bmN0aW9uIG9mIG9uZQogICAgcGtfcmVzdWx0cyA9IF9zYXRpc2Z5X2Nvbmp1bmN0aW9uKGxpc3QoZmFjdF9wYXR0ZXJucyksIHt9KQogICAgCiAgICBpZiBoeWRyYXRlOgogICAgICAgICMgQ29sbGVjdCBhbGwgcmVzdWx0cyBmaXJzdCB0byBiYXRjaCBoeWRyYXRpb24KICAgICAgICBwa19yZXN1bHRzX2xpc3QgPSBsaXN0KHBrX3Jlc3VsdHMpCiAgICAgICAgIyBIeWRyYXRlIFBLcyB0byBtb2RlbCBpbnN0YW5jZXMKICAgICAgICB5aWVsZCBmcm9tIF9oeWRyYXRlX3Jlc3VsdHMocGtfcmVzdWx0c19saXN0LCBsaXN0KGZhY3RfcGF0dGVybnMpKQogICAgZWxzZToKICAgICAgICAjIFJldHVybiBQS3MgZGlyZWN0bHkgd2l0aG91dCBoeWRyYXRpb24KICAgICAgICB5aWVsZCBmcm9tIHBrX3Jlc3VsdHMKCgpkZWYgX3F1ZXJ5X3NpbmdsZV9mYWN0KGZhY3RfcGF0dGVybjogRmFjdFByb3RvY29sKSAtPiBJdGVyYXRvcltkaWN0W3N0ciwgQW55XV06CiAgICAjIFVzZSBhIHNldCB0byB0cmFjayBzZWVuIHN1YnN0aXR1dGlvbnMgZm9yIGRlZHVwbGljYXRpb24KICAgIHNlZW5fc3Vic3RpdHV0aW9ucyA9IHNldCgpCgogICAgIyBHZXQgdGhlIERqYW5nbyBtb2RlbCBmb3IgdGhpcyBmYWN0IHR5cGUKICAgIGZhY3RfY2xhc3MgPSB0eXBlKGZhY3RfcGF0dGVybikKICAgIGRqYW5nb19tb2RlbCA9IGZhY3RfY2xhc3MuX2RqYW5nb19tb2RlbAoKICAgICMgQ29udmVydCBmYWN0IHBhdHRlcm4gdG8gRGphbmdvIHF1ZXJ5CiAgICBxdWVyeV9wYXJhbXMsIHFfb2JqZWN0cyA9IF9mYWN0X3RvX2RqYW5nb19xdWVyeShmYWN0X3BhdHRlcm4pCgogICAgIyBCdWlsZCB0aGUgcXVlcnlzZXQgd2l0aCBib3RoIGZpbHRlciBwYXJhbXMgYW5kIFEgb2JqZWN0cwogICAgcXVlcnlzZXQgPSBkamFuZ29fbW9kZWwub2JqZWN0cy5maWx0ZXIoKipxdWVyeV9wYXJhbXMpCiAgICBmb3IgcV9vYmogaW4gcV9vYmplY3RzOgogICAgICAgIHF1ZXJ5c2V0ID0gcXVlcnlzZXQuZmlsdGVyKHFfb2JqKQoKICAgICMgUXVlcnkgdGhlIGRhdGFiYXNlIHdpdGggdmFsdWVzKCkgdG8gZ2V0IFBLcyBvbmx5CiAgICBmb3IgdmFsdWVzX2RpY3QgaW4gY2FzdCgKICAgICAgICBJdGVyYXRvcltGYWN0VmFsdWVzRGljdF0sCiAgICAgICAgcXVlcnlzZXQudmFsdWVzKCJzdWJqZWN0IiwgIm9iamVjdCIpLAogICAgKToKICAgICAgICBzdWJzdGl0dXRpb24gPSBfZGphbmdvX3Jlc3VsdF90b19zdWJzdGl0dXRpb24oZmFjdF9wYXR0ZXJuLCB2YWx1ZXNfZGljdCkKCiAgICAgICAgIyBDcmVhdGUgYSBoYXNoYWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3Vic3RpdHV0aW9uIGZvciBkZWR1cGxpY2F0aW9uCiAgICAgICAgc3Vic3RpdHV0aW9uX2tleSA9IGZyb3plbnNldChzdWJzdGl0dXRpb24uaXRlbXMoKSkKICAgICAgICBpZiBzdWJzdGl0dXRpb25fa2V5IG5vdCBpbiBzZWVuX3N1YnN0aXR1dGlvbnM6CiAgICAgICAgICAgIHNlZW5fc3Vic3RpdHV0aW9ucy5hZGQoc3Vic3RpdHV0aW9uX2tleSkKICAgICAgICAgICAgeWllbGQgc3Vic3RpdHV0aW9uCgogICAgIyBBcHBseSBpbmZlcmVuY2UgcnVsZXMKICAgIGZvciBydWxlIGluIEZhY3QuZ2V0X3J1bGVzKCk6CiAgICAgICAgaWYgdHlwZShydWxlLmhlYWQpIGlzIGZhY3RfY2xhc3MgYW5kIF9jYW5fdW5pZnkocnVsZS5oZWFkLCBmYWN0X3BhdHRlcm4pOgogICAgICAgICAgICAjIFRyeSB0byBkZXJpdmUgdGhpcyBmYWN0IGZyb20gdGhlIHJ1bGUgYm9keQogICAgICAgICAgICBmb3Igc3Vic3RpdHV0aW9uIGluIF9hcHBseV9ydWxlKHJ1bGUsIGZhY3RfcGF0dGVybik6CiAgICAgICAgICAgICAgICAjIENyZWF0ZSBhIGhhc2hhYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzdWJzdGl0dXRpb24gZm9yIGRlZHVwbGljYXRpb24KICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbl9rZXkgPSBmcm96ZW5zZXQoc3Vic3RpdHV0aW9uLml0ZW1zKCkpCiAgICAgICAgICAgICAgICBpZiBzdWJzdGl0dXRpb25fa2V5IG5vdCBpbiBzZWVuX3N1YnN0aXR1dGlvbnM6CiAgICAgICAgICAgICAgICAgICAgc2Vlbl9zdWJzdGl0dXRpb25zLmFkZChzdWJzdGl0dXRpb25fa2V5KQogICAgICAgICAgICAgICAgICAgIHlpZWxkIHN1YnN0aXR1dGlvbgoKCmRlZiBfY2FuX3VuaWZ5KGZhY3QxOiBGYWN0UHJvdG9jb2wsIGZhY3QyOiBGYWN0UHJvdG9jb2wpIC0+IGJvb2w6CiAgICAiIiJDaGVjayBpZiB0d28gZmFjdHMgY2FuIGJlIHVuaWZpZWQuIiIiCiAgICBpZiB0eXBlKGZhY3QxKSBpcyBub3QgdHlwZShmYWN0Mik6CiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgIyBDaGVjayBzdWJqZWN0CiAgICBpZiAoCiAgICAgICAgbm90IGlzaW5zdGFuY2UoZmFjdDEuc3ViamVjdCwgVmFyKQogICAgICAgIGFuZCBub3QgaXNpbnN0YW5jZShmYWN0Mi5zdWJqZWN0LCBWYXIpCiAgICAgICAgYW5kIGZhY3QxLnN1YmplY3QgIT0gZmFjdDIuc3ViamVjdAogICAgKToKICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAjIENoZWNrIG9iamVjdAogICAgcmV0dXJuIG5vdCAoCiAgICAgICAgbm90IGlzaW5zdGFuY2UoZmFjdDEub2JqZWN0LCBWYXIpCiAgICAgICAgYW5kIG5vdCBpc2luc3RhbmNlKGZhY3QyLm9iamVjdCwgVmFyKQogICAgICAgIGFuZCBmYWN0MS5vYmplY3QgIT0gZmFjdDIub2JqZWN0CiAgICApCgoKZGVmIF9hcHBseV9ydWxlKHJ1bGU6IFJ1bGUsIHRhcmdldF9wYXR0ZXJuOiBGYWN0UHJvdG9jb2wpIC0+IEl0ZXJhdG9yW2RpY3Rbc3RyLCBBbnldXToKICAgICIiIkFwcGx5IGEgcnVsZSB0byBkZXJpdmUgZmFjdHMgbWF0Y2hpbmcgdGhlIHRhcmdldCBwYXR0ZXJuLiIiIgogICAgIyBUaGlzIGlzIGEgc2ltcGxpZmllZCBpbXBsZW1lbnRhdGlvbgogICAgIyBJbiBhIGZ1bGwgZGF0YWxvZyBlbmdpbmUsIHRoaXMgd291bGQgaW52b2x2ZSBtb3JlIGNvbXBsZXggdW5pZmljYXRpb24KICAgICMgYW5kIGJhY2t0cmFja2luZwoKICAgICMgVHJ5IHRvIHVuaWZ5IHRoZSBydWxlIGhlYWQgd2l0aCB0aGUgdGFyZ2V0IHBhdHRlcm4KICAgIGhlYWRfc3Vic3RpdHV0aW9uID0gX3RyeV91bmlmeShydWxlLmhlYWQsIHRhcmdldF9wYXR0ZXJuKQogICAgaWYgaGVhZF9zdWJzdGl0dXRpb24gaXMgTm9uZToKICAgICAgICByZXR1cm4KCiAgICAjIFRyeSB0byBzYXRpc2Z5IGFsbCBjb25kaXRpb25zIGluIHRoZSBydWxlIGJvZHkKICAgIGZvciBib2R5X3N1YnN0aXR1dGlvbiBpbiBfc2F0aXNmeV9ib2R5KHJ1bGUuYm9keSwgaGVhZF9zdWJzdGl0dXRpb24pOgogICAgICAgICMgQXBwbHkgdGhlIHN1YnN0aXR1dGlvbiB0byBnZXQgdGhlIGZpbmFsIHJlc3VsdAogICAgICAgIHJlc3VsdCA9IHt9CiAgICAgICAgZm9yIHZhcl9uYW1lIGluIF9nZXRfdmFyaWFibGVzKHRhcmdldF9wYXR0ZXJuKToKICAgICAgICAgICAgaWYgdmFyX25hbWUgaW4gYm9keV9zdWJzdGl0dXRpb246CiAgICAgICAgICAgICAgICByZXN1bHRbdmFyX25hbWVdID0gYm9keV9zdWJzdGl0dXRpb25bdmFyX25hbWVdCgogICAgICAgIGlmIHJlc3VsdDoKICAgICAgICAgICAgeWllbGQgcmVzdWx0CgoKZGVmIF90cnlfdW5pZnkoZmFjdDE6IEZhY3RQcm90b2NvbCwgZmFjdDI6IEZhY3RQcm90b2NvbCkgLT4gZGljdFtzdHIsIEFueV0gfCBOb25lOgogICAgIiIiVHJ5IHRvIHVuaWZ5IHR3byBmYWN0cywgcmV0dXJuaW5nIHN1YnN0aXR1dGlvbiBpZiBzdWNjZXNzZnVsLiIiIgogICAgaWYgdHlwZShmYWN0MSkgaXMgbm90IHR5cGUoZmFjdDIpOgogICAgICAgIHJldHVybiBOb25lCgogICAgc3Vic3RpdHV0aW9uID0ge30KCiAgICAjIEhhbmRsZSBzdWJqZWN0CiAgICBpZiBpc2luc3RhbmNlKGZhY3QxLnN1YmplY3QsIFZhcikgYW5kIGlzaW5zdGFuY2UoZmFjdDIuc3ViamVjdCwgVmFyKToKICAgICAgICAjIEJvdGggdmFyaWFibGVzIC0gdGhleSBiZWNvbWUgZXF1aXZhbGVudAogICAgICAgIHBhc3MKICAgIGVsaWYgaXNpbnN0YW5jZShmYWN0MS5zdWJqZWN0LCBWYXIpOgogICAgICAgIHN1YnN0aXR1dGlvbltmYWN0MS5zdWJqZWN0Lm5hbWVdID0gZmFjdDIuc3ViamVjdAogICAgZWxpZiBpc2luc3RhbmNlKGZhY3QyLnN1YmplY3QsIFZhcik6CiAgICAgICAgc3Vic3RpdHV0aW9uW2ZhY3QyLnN1YmplY3QubmFtZV0gPSBmYWN0MS5zdWJqZWN0CiAgICBlbHNlOgogICAgICAgICMgQm90aCBjb25jcmV0ZSB2YWx1ZXMKICAgICAgICBpZiBmYWN0MS5zdWJqZWN0ICE9IGZhY3QyLnN1YmplY3Q6CiAgICAgICAgICAgIHJldHVybiBOb25lCgogICAgIyBIYW5kbGUgb2JqZWN0CiAgICBpZiBpc2luc3RhbmNlKGZhY3QxLm9iamVjdCwgVmFyKSBhbmQgaXNpbnN0YW5jZShmYWN0Mi5vYmplY3QsIFZhcik6CiAgICAgICAgIyBCb3RoIHZhcmlhYmxlcyAtIHRoZXkgYmVjb21lIGVxdWl2YWxlbnQKICAgICAgICBwYXNzCiAgICBlbGlmIGlzaW5zdGFuY2UoZmFjdDEub2JqZWN0LCBWYXIpOgogICAgICAgIHN1YnN0aXR1dGlvbltmYWN0MS5vYmplY3QubmFtZV0gPSBmYWN0Mi5vYmplY3QKICAgIGVsaWYgaXNpbnN0YW5jZShmYWN0Mi5vYmplY3QsIFZhcik6CiAgICAgICAgc3Vic3RpdHV0aW9uW2ZhY3QyLm9iamVjdC5uYW1lXSA9IGZhY3QxLm9iamVjdAogICAgZWxzZToKICAgICAgICAjIEJvdGggY29uY3JldGUgdmFsdWVzCiAgICAgICAgaWYgZmFjdDEub2JqZWN0ICE9IGZhY3QyLm9iamVjdDoKICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICByZXR1cm4gc3Vic3RpdHV0aW9uCgoKZGVmIF9lc3RpbWF0ZV9jb25kaXRpb25fc2VsZWN0aXZpdHkoCiAgICBjb25kaXRpb246IEZhY3RQcm90b2NvbCB8IGxpc3RbRmFjdFByb3RvY29sXSwgc3Vic3RpdHV0aW9uOiBkaWN0W3N0ciwgQW55XQopIC0+IGludDoKICAgICIiIkVzdGltYXRlIHRoZSBzZWxlY3Rpdml0eSBvZiBhIGNvbmRpdGlvbiAobG93ZXIgbnVtYmVyID0gbW9yZSBzZWxlY3RpdmUvZmV3ZXIgcmVzdWx0cykuIiIiCiAgICBpZiBpc2luc3RhbmNlKGNvbmRpdGlvbiwgbGlzdCk6CiAgICAgICAgIyBGb3IgY29uanVuY3Rpb25zLCByZXR1cm4gdGhlIHN1bSBvZiB1bmJvdW5kIHZhcmlhYmxlcwogICAgICAgIHJldHVybiBzdW0oX2NvdW50X3VuYm91bmRfdmFyaWFibGVzKGZhY3QsIHN1YnN0aXR1dGlvbikgZm9yIGZhY3QgaW4gY29uZGl0aW9uKQogICAgZWxzZToKICAgICAgICAjIEZvciBzaW5nbGUgZmFjdHMsIHJldHVybiB0aGUgbnVtYmVyIG9mIHVuYm91bmQgdmFyaWFibGVzCiAgICAgICAgcmV0dXJuIF9jb3VudF91bmJvdW5kX3ZhcmlhYmxlcyhjb25kaXRpb24sIHN1YnN0aXR1dGlvbikKCgpkZWYgX3NhdGlzZnlfYm9keSgKICAgIGJvZHk6IGxpc3RbRmFjdFByb3RvY29sIHwgbGlzdFtGYWN0UHJvdG9jb2xdXSwgaW5pdGlhbF9zdWJzdGl0dXRpb246IGRpY3Rbc3RyLCBBbnldCikgLT4gSXRlcmF0b3JbZGljdFtzdHIsIEFueV1dOgogICAgIiIiU2F0aXNmeSBhbGwgY29uZGl0aW9ucyBpbiBhIHJ1bGUgYm9keS4iIiIKICAgICMgVGhpcyBpcyBhIHNpbXBsaWZpZWQgaW1wbGVtZW50YXRpb24KICAgICMgQSBmdWxsIGltcGxlbWVudGF0aW9uIHdvdWxkIG5lZWQgcHJvcGVyIGJhY2t0cmFja2luZwoKICAgICMgVGhlIHJ1bGUgYm9keSBpcyBhIGRpc2p1bmN0aW9uIChPUikgb2YgY29uZGl0aW9ucwogICAgIyBFYWNoIGNvbmRpdGlvbiBjYW4gYmUgZWl0aGVyIGEgc2luZ2xlIGZhY3Qgb3IgYSBsaXN0IG9mIGZhY3RzIChjb25qdW5jdGlvbikKCiAgICAjIE9wdGltaXplOiBzb3J0IGNvbmRpdGlvbnMgYnkgZXN0aW1hdGVkIHNlbGVjdGl2aXR5IChtb3JlIHNlbGVjdGl2ZSBmaXJzdCkKICAgIHNvcnRlZF9ib2R5ID0gc29ydGVkKAogICAgICAgIGJvZHksIGtleT1sYW1iZGEgY29uZGl0aW9uOiBfZXN0aW1hdGVfY29uZGl0aW9uX3NlbGVjdGl2aXR5KGNvbmRpdGlvbiwgaW5pdGlhbF9zdWJzdGl0dXRpb24pCiAgICApCgogICAgZm9yIGNvbmRpdGlvbiBpbiBzb3J0ZWRfYm9keToKICAgICAgICBpZiBpc2luc3RhbmNlKGNvbmRpdGlvbiwgbGlzdCk6CiAgICAgICAgICAgICMgQ29uanVuY3Rpb24gKGFsbCBmYWN0cyBpbiB0aGUgbGlzdCBtdXN0IGJlIHRydWUpCiAgICAgICAgICAgICMgV2UgbmVlZCB0byBnZW5lcmF0ZSBhbGwgdmFsaWQgY29tYmluYXRpb25zCiAgICAgICAgICAgIHlpZWxkIGZyb20gX3NhdGlzZnlfY29uanVuY3Rpb24oY29uZGl0aW9uLCBpbml0aWFsX3N1YnN0aXR1dGlvbikKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIFNpbmdsZSBjb25kaXRpb24KICAgICAgICAgICAgc3Vic3RpdHV0ZWRfY29uZGl0aW9uID0gX3N1YnN0aXR1dGVfdmFyaWFibGVzKGNvbmRpdGlvbiwgaW5pdGlhbF9zdWJzdGl0dXRpb24pCiAgICAgICAgICAgIGZvciByZXN1bHQgaW4gX3F1ZXJ5X3NpbmdsZV9mYWN0KHN1YnN0aXR1dGVkX2NvbmRpdGlvbik6CiAgICAgICAgICAgICAgICBjdXJyZW50X3N1YnN0aXR1dGlvbiA9IGluaXRpYWxfc3Vic3RpdHV0aW9uLmNvcHkoKQogICAgICAgICAgICAgICAgY3VycmVudF9zdWJzdGl0dXRpb24udXBkYXRlKHJlc3VsdCkKICAgICAgICAgICAgICAgIHlpZWxkIGN1cnJlbnRfc3Vic3RpdHV0aW9uCgoKZGVmIF9jb3VudF91bmJvdW5kX3ZhcmlhYmxlcyhmYWN0OiBGYWN0UHJvdG9jb2wsIHN1YnN0aXR1dGlvbjogZGljdFtzdHIsIEFueV0pIC0+IGludDoKICAgICIiIkNvdW50IHRoZSBudW1iZXIgb2YgdW5ib3VuZCB2YXJpYWJsZXMgaW4gYSBmYWN0IGdpdmVuIGN1cnJlbnQgc3Vic3RpdHV0aW9uLiIiIgogICAgY291bnQgPSAwCiAgICBpZiBpc2luc3RhbmNlKGZhY3Quc3ViamVjdCwgVmFyKSBhbmQgZmFjdC5zdWJqZWN0Lm5hbWUgbm90IGluIHN1YnN0aXR1dGlvbjoKICAgICAgICBjb3VudCArPSAxCiAgICBpZiBpc2luc3RhbmNlKGZhY3Qub2JqZWN0LCBWYXIpIGFuZCBmYWN0Lm9iamVjdC5uYW1lIG5vdCBpbiBzdWJzdGl0dXRpb246CiAgICAgICAgY291bnQgKz0gMQogICAgcmV0dXJuIGNvdW50CgoKZGVmIF9zYXRpc2Z5X2Nvbmp1bmN0aW9uKAogICAgY29uZGl0aW9uczogbGlzdFtGYWN0UHJvdG9jb2xdLCBpbml0aWFsX3N1YnN0aXR1dGlvbjogZGljdFtzdHIsIEFueV0KKSAtPiBJdGVyYXRvcltkaWN0W3N0ciwgQW55XV06CiAgICAiIiJTYXRpc2Z5IGEgY29uanVuY3Rpb24gb2YgY29uZGl0aW9ucyAoYWxsIG11c3QgYmUgdHJ1ZSkuIiIiCiAgICBpZiBub3QgY29uZGl0aW9uczoKICAgICAgICB5aWVsZCBpbml0aWFsX3N1YnN0aXR1dGlvbgogICAgICAgIHJldHVybgoKICAgICMgT3B0aW1pemU6IHNvcnQgY29uZGl0aW9ucyBieSBudW1iZXIgb2YgdW5ib3VuZCB2YXJpYWJsZXMgKGZld2VyIGZpcnN0KQogICAgIyBUaGlzIG1ha2VzIHRoZSBzZWFyY2ggbW9yZSBlZmZpY2llbnQgYnkgY29uc3RyYWluaW5nIHRoZSBzZWFyY2ggc3BhY2UgZWFybHkKICAgIHNvcnRlZF9jb25kaXRpb25zID0gc29ydGVkKAogICAgICAgIGNvbmRpdGlvbnMsIGtleT1sYW1iZGEgZmFjdDogX2NvdW50X3VuYm91bmRfdmFyaWFibGVzKGZhY3QsIGluaXRpYWxfc3Vic3RpdHV0aW9uKQogICAgKQoKICAgICMgVGFrZSB0aGUgZmlyc3QgY29uZGl0aW9uIChub3cgdGhlIG9uZSB3aXRoIGZld2VzdCB2YXJpYWJsZXMpCiAgICBmaXJzdF9jb25kaXRpb24sICpyZW1haW5pbmdfY29uZGl0aW9ucyA9IHNvcnRlZF9jb25kaXRpb25zCiAgICBzdWJzdGl0dXRlZF9jb25kaXRpb24gPSBfc3Vic3RpdHV0ZV92YXJpYWJsZXMoZmlyc3RfY29uZGl0aW9uLCBpbml0aWFsX3N1YnN0aXR1dGlvbikKCiAgICBpZiBub3QgcmVtYWluaW5nX2NvbmRpdGlvbnM6CiAgICAgICAgIyBCYXNlIGNhc2U6IG9ubHkgb25lIGNvbmRpdGlvbiBsZWZ0CiAgICAgICAgZm9yIHJlc3VsdCBpbiBfcXVlcnlfc2luZ2xlX2ZhY3Qoc3Vic3RpdHV0ZWRfY29uZGl0aW9uKToKICAgICAgICAgICAgbmV3X3N1YnN0aXR1dGlvbiA9IGluaXRpYWxfc3Vic3RpdHV0aW9uLmNvcHkoKQogICAgICAgICAgICBuZXdfc3Vic3RpdHV0aW9uLnVwZGF0ZShyZXN1bHQpCiAgICAgICAgICAgIHlpZWxkIG5ld19zdWJzdGl0dXRpb24KICAgIGVsc2U6CiAgICAgICAgIyBCYXRjaCBvcHRpbWl6YXRpb246IGNvbGxlY3QgYWxsIHJlc3VsdHMgZnJvbSBmaXJzdCBjb25kaXRpb24sCiAgICAgICAgIyB0aGVuIGJhdGNoIHF1ZXJ5IHJlbWFpbmluZyBjb25kaXRpb25zCiAgICAgICAgeWllbGQgZnJvbSBfc2F0aXNmeV9jb25qdW5jdGlvbl93aXRoX2JhdGNoaW5nKAogICAgICAgICAgICBzdWJzdGl0dXRlZF9jb25kaXRpb24sIHJlbWFpbmluZ19jb25kaXRpb25zLCBpbml0aWFsX3N1YnN0aXR1dGlvbgogICAgICAgICkKCgpkZWYgX3NhdGlzZnlfY29uanVuY3Rpb25fd2l0aF9iYXRjaGluZygKICAgIGZpcnN0X2NvbmRpdGlvbjogRmFjdFByb3RvY29sLAogICAgcmVtYWluaW5nX2NvbmRpdGlvbnM6IGxpc3RbRmFjdFByb3RvY29sXSwKICAgIGluaXRpYWxfc3Vic3RpdHV0aW9uOiBkaWN0W3N0ciwgQW55XSwKKSAtPiBJdGVyYXRvcltkaWN0W3N0ciwgQW55XV06CiAgICAiIiJTYXRpc2Z5IGNvbmp1bmN0aW9uIHdpdGggYmF0Y2hlZCBxdWVyaWVzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuIiIiCiAgICAjIENvbGxlY3QgYWxsIHJlc3VsdHMgZnJvbSB0aGUgZmlyc3QgY29uZGl0aW9uIC0gdXNlIF9xdWVyeV9zaW5nbGVfZmFjdCBkaXJlY3RseSB0byBhdm9pZCByZWN1cnNpdmUgaHlkcmF0aW9uCiAgICBmaXJzdF9yZXN1bHRzID0gbGlzdChfcXVlcnlfc2luZ2xlX2ZhY3QoZmlyc3RfY29uZGl0aW9uKSkKCiAgICBpZiBub3QgZmlyc3RfcmVzdWx0czoKICAgICAgICByZXR1cm4KCiAgICAjIEdyb3VwIHJlc3VsdHMgYnkgdGhlIHZhcmlhYmxlIHZhbHVlcyB0byBlbmFibGUgYmF0Y2hpbmcKICAgICMgRm9yIHRoZSBuZXh0IGNvbmRpdGlvbiwgd2Ugd2FudCB0byBiYXRjaCBieSB0aGUgYm91bmQgdmFyaWFibGVzCiAgICBuZXh0X2NvbmRpdGlvbiA9IHJlbWFpbmluZ19jb25kaXRpb25zWzBdCiAgICByZW1haW5pbmdfYWZ0ZXJfbmV4dCA9IHJlbWFpbmluZ19jb25kaXRpb25zWzE6XQoKICAgICMgQ2hlY2sgaWYgd2UgY2FuIGJhdGNoIHRoZSBuZXh0IGNvbmRpdGlvbgogICAgaWYgX2Nhbl9iYXRjaF9xdWVyeShuZXh0X2NvbmRpdGlvbiwgZmlyc3RfcmVzdWx0cyk6CiAgICAgICAgeWllbGQgZnJvbSBfZXhlY3V0ZV9iYXRjaGVkX2Nvbmp1bmN0aW9uKAogICAgICAgICAgICBmaXJzdF9yZXN1bHRzLCBuZXh0X2NvbmRpdGlvbiwgcmVtYWluaW5nX2FmdGVyX25leHQsIGluaXRpYWxfc3Vic3RpdHV0aW9uCiAgICAgICAgKQogICAgZWxzZToKICAgICAgICAjIEZhbGwgYmFjayB0byBpbmRpdmlkdWFsIHByb2Nlc3NpbmcKICAgICAgICBmb3IgcmVzdWx0IGluIGZpcnN0X3Jlc3VsdHM6CiAgICAgICAgICAgIG5ld19zdWJzdGl0dXRpb24gPSBpbml0aWFsX3N1YnN0aXR1dGlvbi5jb3B5KCkKICAgICAgICAgICAgbmV3X3N1YnN0aXR1dGlvbi51cGRhdGUocmVzdWx0KQogICAgICAgICAgICB5aWVsZCBmcm9tIF9zYXRpc2Z5X2Nvbmp1bmN0aW9uKHJlbWFpbmluZ19jb25kaXRpb25zLCBuZXdfc3Vic3RpdHV0aW9uKQoKCmRlZiBfY2FuX2JhdGNoX3F1ZXJ5KGNvbmRpdGlvbjogRmFjdFByb3RvY29sLCByZXN1bHRzOiBsaXN0W2RpY3Rbc3RyLCBBbnldXSkgLT4gYm9vbDoKICAgICIiIkNoZWNrIGlmIGEgY29uZGl0aW9uIGNhbiBiZSBiYXRjaGVkIGJhc2VkIG9uIHRoZSBhdmFpbGFibGUgcmVzdWx0cy4iIiIKICAgIGlmIG5vdCByZXN1bHRzOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgICMgQ2hlY2sgaWYgdGhlIGNvbmRpdGlvbiBoYXMgYSB2YXJpYWJsZSB0aGF0J3MgYm91bmQgaW4gYWxsIHJlc3VsdHMKICAgICMgYW5kIHRoZSBvdGhlciBmaWVsZCBpcyBlaXRoZXIgYm91bmQgb3IgYSB2YXJpYWJsZQogICAgY29uZGl0aW9uX3ZhcnMgPSBfZ2V0X3ZhcmlhYmxlcyhjb25kaXRpb24pCiAgICBpZiBub3QgY29uZGl0aW9uX3ZhcnM6CiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgIyBHZXQgdmFyaWFibGVzIHRoYXQgYXJlIGJvdW5kIGluIGFsbCByZXN1bHRzCiAgICBmaXJzdF9yZXN1bHQgPSByZXN1bHRzWzBdCiAgICBib3VuZF92YXJzID0gc2V0KGZpcnN0X3Jlc3VsdC5rZXlzKCkpCiAgICBmb3IgcmVzdWx0IGluIHJlc3VsdHNbMTpdOgogICAgICAgIGJvdW5kX3ZhcnMgJj0gc2V0KHJlc3VsdC5rZXlzKCkpCgogICAgIyBDaGVjayBpZiB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBib3VuZCB2YXJpYWJsZSB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbmRpdGlvbgogICAgcmV0dXJuIGJvb2woY29uZGl0aW9uX3ZhcnMgJiBib3VuZF92YXJzKQoKCmRlZiBfZXhlY3V0ZV9iYXRjaGVkX2Nvbmp1bmN0aW9uKAogICAgZmlyc3RfcmVzdWx0czogbGlzdFtkaWN0W3N0ciwgQW55XV0sCiAgICBuZXh0X2NvbmRpdGlvbjogRmFjdFByb3RvY29sLAogICAgcmVtYWluaW5nX2NvbmRpdGlvbnM6IGxpc3RbRmFjdFByb3RvY29sXSwKICAgIGluaXRpYWxfc3Vic3RpdHV0aW9uOiBkaWN0W3N0ciwgQW55XSwKKSAtPiBJdGVyYXRvcltkaWN0W3N0ciwgQW55XV06CiAgICAiIiJFeGVjdXRlIGJhdGNoZWQgY29uanVuY3Rpb24gcXVlcnkuIiIiCiAgICAjIEdyb3VwIGZpcnN0IHJlc3VsdHMgYnkgdGhlaXIgdmFyaWFibGUgYmluZGluZ3MgdG8gY3JlYXRlIGJhdGNoIHF1ZXJpZXMKCiAgICAjIEdldCB0aGUgdmFyaWFibGUgdGhhdCB3ZSBjYW4gdXNlIGZvciBiYXRjaGluZwogICAgY29uZGl0aW9uX3ZhcnMgPSBfZ2V0X3ZhcmlhYmxlcyhuZXh0X2NvbmRpdGlvbikKICAgIGJhdGNoX3ZhciA9IE5vbmUKICAgIGJhdGNoX3ZhbHVlcyA9IFtdCgogICAgIyBGaW5kIGEgdmFyaWFibGUgdGhhdCdzIGJvdW5kIGluIHJlc3VsdHMgYW5kIGFwcGVhcnMgaW4gbmV4dCBjb25kaXRpb24KICAgIGZvciByZXN1bHQgaW4gZmlyc3RfcmVzdWx0czoKICAgICAgICBmb3IgdmFyX25hbWUgaW4gcmVzdWx0OgogICAgICAgICAgICBpZiB2YXJfbmFtZSBpbiBsaXN0KGNvbmRpdGlvbl92YXJzKToKICAgICAgICAgICAgICAgIGlmIGJhdGNoX3ZhciBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIGJhdGNoX3ZhciA9IHZhcl9uYW1lCiAgICAgICAgICAgICAgICBiYXRjaF92YWx1ZXMuYXBwZW5kKHJlc3VsdFt2YXJfbmFtZV0pCiAgICAgICAgICAgICAgICBicmVhawoKICAgIGlmIGJhdGNoX3ZhciBhbmQgYmF0Y2hfdmFsdWVzOgogICAgICAgICMgQ3JlYXRlIGJhdGNoZWQgcXVlcnkgdXNpbmcgX19pbiBsb29rdXAKICAgICAgICB5aWVsZCBmcm9tIF9leGVjdXRlX2luX3F1ZXJ5KAogICAgICAgICAgICBuZXh0X2NvbmRpdGlvbiwKICAgICAgICAgICAgYmF0Y2hfdmFyLAogICAgICAgICAgICBiYXRjaF92YWx1ZXMsCiAgICAgICAgICAgIGZpcnN0X3Jlc3VsdHMsCiAgICAgICAgICAgIHJlbWFpbmluZ19jb25kaXRpb25zLAogICAgICAgICAgICBpbml0aWFsX3N1YnN0aXR1dGlvbiwKICAgICAgICApCiAgICBlbHNlOgogICAgICAgICMgRmFsbCBiYWNrIHRvIGluZGl2aWR1YWwgcXVlcmllcwogICAgICAgIGZvciByZXN1bHQgaW4gZmlyc3RfcmVzdWx0czoKICAgICAgICAgICAgbmV3X3N1YnN0aXR1dGlvbiA9IGluaXRpYWxfc3Vic3RpdHV0aW9uLmNvcHkoKQogICAgICAgICAgICBuZXdfc3Vic3RpdHV0aW9uLnVwZGF0ZShyZXN1bHQpCiAgICAgICAgICAgIHlpZWxkIGZyb20gX3NhdGlzZnlfY29uanVuY3Rpb24oCiAgICAgICAgICAgICAgICBbKnJlbWFpbmluZ19jb25kaXRpb25zLCBuZXh0X2NvbmRpdGlvbl0sIG5ld19zdWJzdGl0dXRpb24KICAgICAgICAgICAgKQoKCmRlZiBfZXhlY3V0ZV9pbl9xdWVyeSgKICAgIGNvbmRpdGlvbjogRmFjdFByb3RvY29sLAogICAgYmF0Y2hfdmFyOiBzdHIsCiAgICBiYXRjaF92YWx1ZXM6IGxpc3RbQW55XSwKICAgIGZpcnN0X3Jlc3VsdHM6IGxpc3RbZGljdFtzdHIsIEFueV1dLAogICAgcmVtYWluaW5nX2NvbmRpdGlvbnM6IGxpc3RbRmFjdFByb3RvY29sXSwKICAgIGluaXRpYWxfc3Vic3RpdHV0aW9uOiBkaWN0W3N0ciwgQW55XSwKKSAtPiBJdGVyYXRvcltkaWN0W3N0ciwgQW55XV06CiAgICAiIiJFeGVjdXRlIGFuIElOIHF1ZXJ5IGZvciBiYXRjaGVkIGNvbmp1bmN0aW9uLiIiIgogICAgIyBHZXQgdGhlIERqYW5nbyBtb2RlbCBmb3IgdGhpcyBjb25kaXRpb24KICAgIGZhY3RfY2xhc3MgPSB0eXBlKGNvbmRpdGlvbikKICAgIGRqYW5nb19tb2RlbCA9IGZhY3RfY2xhc3MuX2RqYW5nb19tb2RlbAoKICAgICMgRGV0ZXJtaW5lIHdoaWNoIGZpZWxkIHRvIHVzZSBmb3IgdGhlIElOIHF1ZXJ5CiAgICBpZiBpc2luc3RhbmNlKGNvbmRpdGlvbi5zdWJqZWN0LCBWYXIpIGFuZCBjb25kaXRpb24uc3ViamVjdC5uYW1lID09IGJhdGNoX3ZhcjoKICAgICAgICBpbl9maWVsZCA9ICJzdWJqZWN0X19pbiIKICAgIGVsaWYgaXNpbnN0YW5jZShjb25kaXRpb24ub2JqZWN0LCBWYXIpIGFuZCBjb25kaXRpb24ub2JqZWN0Lm5hbWUgPT0gYmF0Y2hfdmFyOgogICAgICAgIGluX2ZpZWxkID0gIm9iamVjdF9faW4iCiAgICBlbHNlOgogICAgICAgICMgRmFsbCBiYWNrIHRvIGluZGl2aWR1YWwgcXVlcmllcwogICAgICAgIGZvciByZXN1bHQgaW4gZmlyc3RfcmVzdWx0czoKICAgICAgICAgICAgbmV3X3N1YnN0aXR1dGlvbiA9IGluaXRpYWxfc3Vic3RpdHV0aW9uLmNvcHkoKQogICAgICAgICAgICBuZXdfc3Vic3RpdHV0aW9uLnVwZGF0ZShyZXN1bHQpCiAgICAgICAgICAgIHlpZWxkIGZyb20gX3NhdGlzZnlfY29uanVuY3Rpb24oW2NvbmRpdGlvbiwgKnJlbWFpbmluZ19jb25kaXRpb25zXSwgbmV3X3N1YnN0aXR1dGlvbikKICAgICAgICByZXR1cm4KCiAgICAjIEJ1aWxkIHRoZSBiYXRjaGVkIHF1ZXJ5CiAgICBxdWVyeV9wYXJhbXMgPSB7aW5fZmllbGQ6IGJhdGNoX3ZhbHVlc30KCiAgICAjIEFkZCBhbnkgb3RoZXIgY29uc3RyYWludHMgZnJvbSB0aGUgY29uZGl0aW9uCiAgICBiYXNlX3F1ZXJ5X3BhcmFtcywgcV9vYmplY3RzID0gX2ZhY3RfdG9fZGphbmdvX3F1ZXJ5KGNvbmRpdGlvbikKICAgIGZvciBrZXksIHZhbHVlIGluIGJhc2VfcXVlcnlfcGFyYW1zLml0ZW1zKCk6CiAgICAgICAgaWYgbm90IGtleS5lbmRzd2l0aCgiX19pbiIpOiAgIyBEb24ndCBvdmVycmlkZSBvdXIgSU4gcXVlcnkKICAgICAgICAgICAgcXVlcnlfcGFyYW1zW2tleV0gPSB2YWx1ZQoKICAgICMgQnVpbGQgdGhlIHF1ZXJ5c2V0IHdpdGggYm90aCBmaWx0ZXIgcGFyYW1zIGFuZCBRIG9iamVjdHMKICAgIHF1ZXJ5c2V0ID0gZGphbmdvX21vZGVsLm9iamVjdHMuZmlsdGVyKCoqcXVlcnlfcGFyYW1zKQogICAgZm9yIHFfb2JqIGluIHFfb2JqZWN0czoKICAgICAgICBxdWVyeXNldCA9IHF1ZXJ5c2V0LmZpbHRlcihxX29iaikKCiAgICAjIEV4ZWN1dGUgdGhlIGJhdGNoZWQgcXVlcnkgd2l0aCB2YWx1ZXMoKSB0byBnZXQgUEtzIG9ubHkKICAgIGJhdGNoX3Jlc3VsdHMgPSB7fQogICAgZm9yIHZhbHVlc19kaWN0IGluIGNhc3QoCiAgICAgICAgSXRlcmF0b3JbRmFjdFZhbHVlc0RpY3RdLAogICAgICAgIHF1ZXJ5c2V0LnZhbHVlcygic3ViamVjdCIsICJvYmplY3QiKSwKICAgICk6CiAgICAgICAgc3Vic3RpdHV0aW9uID0gX2RqYW5nb19yZXN1bHRfdG9fc3Vic3RpdHV0aW9uKGNvbmRpdGlvbiwgdmFsdWVzX2RpY3QpCiAgICAgICAgIyBHcm91cCBieSB0aGUgYmF0Y2ggdmFyaWFibGUgdmFsdWUKICAgICAgICBiYXRjaF9rZXkgPSBzdWJzdGl0dXRpb24uZ2V0KGJhdGNoX3ZhcikKICAgICAgICBpZiBiYXRjaF9rZXkgbm90IGluIGJhdGNoX3Jlc3VsdHM6CiAgICAgICAgICAgIGJhdGNoX3Jlc3VsdHNbYmF0Y2hfa2V5XSA9IFtdCiAgICAgICAgYmF0Y2hfcmVzdWx0c1tiYXRjaF9rZXldLmFwcGVuZChzdWJzdGl0dXRpb24pCgogICAgIyBDb21iaW5lIHJlc3VsdHMgd2l0aCBmaXJzdF9yZXN1bHRzCiAgICBmb3IgZmlyc3RfcmVzdWx0IGluIGZpcnN0X3Jlc3VsdHM6CiAgICAgICAgYmF0Y2hfa2V5ID0gZmlyc3RfcmVzdWx0LmdldChiYXRjaF92YXIpCiAgICAgICAgaWYgYmF0Y2hfa2V5IGluIGJhdGNoX3Jlc3VsdHM6CiAgICAgICAgICAgIGZvciBiYXRjaF9yZXN1bHQgaW4gYmF0Y2hfcmVzdWx0c1tiYXRjaF9rZXldOgogICAgICAgICAgICAgICAgY29tYmluZWRfc3Vic3RpdHV0aW9uID0gaW5pdGlhbF9zdWJzdGl0dXRpb24uY29weSgpCiAgICAgICAgICAgICAgICBjb21iaW5lZF9zdWJzdGl0dXRpb24udXBkYXRlKGZpcnN0X3Jlc3VsdCkKICAgICAgICAgICAgICAgIGNvbWJpbmVkX3N1YnN0aXR1dGlvbi51cGRhdGUoYmF0Y2hfcmVzdWx0KQoKICAgICAgICAgICAgICAgIGlmIHJlbWFpbmluZ19jb25kaXRpb25zOgogICAgICAgICAgICAgICAgICAgIHlpZWxkIGZyb20gX3NhdGlzZnlfY29uanVuY3Rpb24ocmVtYWluaW5nX2NvbmRpdGlvbnMsIGNvbWJpbmVkX3N1YnN0aXR1dGlvbikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgeWllbGQgY29tYmluZWRfc3Vic3RpdHV0aW9uCgoKZGVmIHN0b3JlX2ZhY3RzKCpmYWN0czogRmFjdCkgLT4gTm9uZToKICAgICIiIlN0b3JlIG11bHRpcGxlIGZhY3RzIGluIHRoZWlyIHJlc3BlY3RpdmUgRGphbmdvIG1vZGVscy4iIiIKCiAgICAjIEdyb3VwIGZhY3RzIGJ5IHRoZWlyIG1vZGVsCiAgICBmYWN0X2dyb3VwczogZGVmYXVsdGRpY3RbdHlwZVttb2RlbHMuTW9kZWxdLCBsaXN0W21vZGVscy5Nb2RlbF1dID0gZGVmYXVsdGRpY3QobGlzdCkKICAgIGZvciBmYWN0IGluIGZhY3RzOgogICAgICAgIG1vZGVsX2NsYXNzID0gdHlwZShmYWN0KS5fZGphbmdvX21vZGVsCiAgICAgICAgZmFjdF9ncm91cHNbbW9kZWxfY2xhc3NdLmFwcGVuZCgKICAgICAgICAgICAgbW9kZWxfY2xhc3MoCiAgICAgICAgICAgICAgICBzdWJqZWN0PWZhY3Quc3ViamVjdCwKICAgICAgICAgICAgICAgIG9iamVjdD1mYWN0Lm9iamVjdCwKICAgICAgICAgICAgKQogICAgICAgICkKCiAgICAjIEJ1bGsgY3JlYXRlCiAgICB3aXRoIHRyYW5zYWN0aW9uLmF0b21pYygpOgogICAgICAgIGZvciBmYWN0X21vZGVsLCBmYWN0X2luc3RhbmNlcyBpbiBmYWN0X2dyb3Vwcy5pdGVtcygpOgogICAgICAgICAgICBmYWN0X21vZGVsLm9iamVjdHMuYnVsa19jcmVhdGUoZmFjdF9pbnN0YW5jZXMsIGJhdGNoX3NpemU9MTAwMCwgaWdub3JlX2NvbmZsaWN0cz1UcnVlKQoKCmRlZiByZXRyYWN0X2ZhY3RzKCpmYWN0czogRmFjdCkgLT4gTm9uZToKICAgICIiIlJlbW92ZSBtdWx0aXBsZSBmYWN0cyBmcm9tIHRoZWlyIHJlc3BlY3RpdmUgRGphbmdvIG1vZGVscy4iIiIKCiAgICAjIEdyb3VwIGZhY3RzIGJ5IHRoZWlyIG1vZGVsCiAgICBmYWN0X2dyb3VwczogZGVmYXVsdGRpY3RbdHlwZVttb2RlbHMuTW9kZWxdLCBsaXN0W0ZhY3RdXSA9IGRlZmF1bHRkaWN0KGxpc3QpCiAgICBmb3IgZmFjdCBpbiBmYWN0czoKICAgICAgICBtb2RlbF9jbGFzcyA9IHR5cGUoZmFjdCkuX2RqYW5nb19tb2RlbAogICAgICAgIGZhY3RfZ3JvdXBzW21vZGVsX2NsYXNzXS5hcHBlbmQoZmFjdCkKCiAgICAjIEJ1bGsgZGVsZXRlCiAgICB3aXRoIHRyYW5zYWN0aW9uLmF0b21pYygpOgogICAgICAgIGZvciBmYWN0X21vZGVsLCBmYWN0X2luc3RhbmNlcyBpbiBmYWN0X2dyb3Vwcy5pdGVtcygpOgogICAgICAgICAgICBxID0gcmVkdWNlKAogICAgICAgICAgICAgICAgb3BlcmF0b3Iub3JfLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIG1vZGVscy5RKHsic3ViamVjdCI6IGZhY3Quc3ViamVjdCwgIm9iamVjdCI6IGZhY3Qub2JqZWN0fSkKICAgICAgICAgICAgICAgICAgICBmb3IgZmFjdCBpbiBmYWN0X2luc3RhbmNlcwogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgKQogICAgICAgICAgICBmYWN0X21vZGVsLm9iamVjdHMuZmlsdGVyKHEpLmRlbGV0ZSgpCgAAAAAAAAAAvHQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjYwAAAAAAACNjAAAAAAAAAAAAAAAAAAA"
				],
				[
					47,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjYwAAAAAAACNjAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAACAwAAIiIiCkRhdGFsb2cgc3lzdGVtIGZvciBEamFuZ28gLSBtYWluIG1vZHVsZSB3aXRoIHB1YmxpYyBBUEkuCgpUaGlzIG1vZHVsZSBwcm92aWRlcyB0aGUgcHVibGljIGludGVyZmFjZSBmb3IgZGpkYXRhbG9nLCBpbXBvcnRpbmcgZnJvbQpzcGVjaWFsaXplZCBtb2R1bGVzIGZvciBmYWN0cywgcXVlcmllcywgYW5kIHJ1bGVzLgoiIiIKCiMgUHVibGljIEFQSSBpbXBvcnRzCmZyb20gZGpkYXRhbG9nLmZhY3RzIGltcG9ydCBGYWN0LCBzdG9yZV9mYWN0cywgcmV0cmFjdF9mYWN0cwpmcm9tIGRqZGF0YWxvZy5xdWVyeSBpbXBvcnQgVmFyLCBxdWVyeSwgX3ByZWZpeF9xX29iamVjdCwgX2ZhY3RfdG9fZGphbmdvX3F1ZXJ5CmZyb20gZGpkYXRhbG9nLnJ1bGVzIGltcG9ydCBydWxlLCBSdWxlLCBnZXRfcnVsZXMsIGNsZWFyX3J1bGVzCgojIFJlLWV4cG9ydCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhbmQgcHVibGljIEFQSQpfX2FsbF9fID0gWwogICAgIyBDb3JlIGNsYXNzZXMKICAgICdGYWN0JywKICAgICdWYXInLCAKICAgICdSdWxlJywKICAgIAogICAgIyBDb3JlIGZ1bmN0aW9ucwogICAgJ3F1ZXJ5JywKICAgICdzdG9yZV9mYWN0cycsCiAgICAncmV0cmFjdF9mYWN0cycsCiAgICAncnVsZScsCiAgICAnZ2V0X3J1bGVzJywKICAgICdjbGVhcl9ydWxlcycsCiAgICAKICAgICMgSW50ZXJuYWwgZnVuY3Rpb25zIChleHBvc2VkIGZvciB0ZXN0aW5nKQogICAgJ19wcmVmaXhfcV9vYmplY3QnLAogICAgJ19mYWN0X3RvX2RqYW5nb19xdWVyeScsCl0AAAAAAAAAADAHAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAwAAAAAAAAIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAwBwAAIiIiClRlc3QgbW9kZWxzIGZvciBkamRhdGFsb2cgLSBvbmx5IGxvYWRlZCB3aGVuIERKREFUQUxPR19URVNUSU5HIGlzIFRydWUuClRoZXNlIHByb3ZpZGUgZXhhbXBsZSBEamFuZ28gbW9kZWxzIGZvciB0ZXN0aW5nIHRoZSBkYXRhbG9nIGZ1bmN0aW9uYWxpdHkuCiIiIgoKZnJvbSBkamFuZ28uY29uZiBpbXBvcnQgc2V0dGluZ3MKZnJvbSBkamFuZ28uZGIgaW1wb3J0IG1vZGVscwoKCiMgT25seSBjcmVhdGUgbW9kZWxzIHdoZW4gaW4gdGVzdGluZyBtb2RlCmlmIGdldGF0dHIoc2V0dGluZ3MsICdESkRBVEFMT0dfVEVTVElORycsIEZhbHNlKToKICAgIAogICAgY2xhc3MgUGVyc29uKG1vZGVscy5Nb2RlbCk6CiAgICAgICAgIiIiRXhhbXBsZSBQZXJzb24gbW9kZWwgZm9yIGZhbWlseSByZWxhdGlvbnNoaXAgdGVzdHMuIiIiCiAgICAgICAgbmFtZSA9IG1vZGVscy5DaGFyRmllbGQobWF4X2xlbmd0aD0xMDApCiAgICAgICAgYWdlID0gbW9kZWxzLlBvc2l0aXZlSW50ZWdlckZpZWxkKG51bGw9VHJ1ZSwgYmxhbms9VHJ1ZSkKICAgICAgICBjaXR5ID0gbW9kZWxzLkNoYXJGaWVsZChtYXhfbGVuZ3RoPTEwMCwgYmxhbms9VHJ1ZSkKICAgICAgICBtYXJyaWVkID0gbW9kZWxzLkJvb2xlYW5GaWVsZChkZWZhdWx0PUZhbHNlKQogICAgICAgIHJldGlyZWQgPSBtb2RlbHMuQm9vbGVhbkZpZWxkKGRlZmF1bHQ9RmFsc2UpCiAgICAgICAgCiAgICAgICAgY2xhc3MgTWV0YToKICAgICAgICAgICAgYXBwX2xhYmVsID0gJ2RqZGF0YWxvZycKICAgICAgICAgICAgCiAgICAgICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgICAgIHJldHVybiBzZWxmLm5hbWUKCiAgICAKICAgIGNsYXNzIENvbXBhbnkobW9kZWxzLk1vZGVsKToKICAgICAgICAiIiJFeGFtcGxlIENvbXBhbnkgbW9kZWwgZm9yIGJ1c2luZXNzIHJlbGF0aW9uc2hpcCB0ZXN0cy4iIiIKICAgICAgICBuYW1lID0gbW9kZWxzLkNoYXJGaWVsZChtYXhfbGVuZ3RoPTEwMCkKICAgICAgICBhY3RpdmUgPSBtb2RlbHMuQm9vbGVhbkZpZWxkKGRlZmF1bHQ9VHJ1ZSkKICAgICAgICAKICAgICAgICBjbGFzcyBNZXRhOgogICAgICAgICAgICBhcHBfbGFiZWwgPSAnZGpkYXRhbG9nJwogICAgICAgICAgICAKICAgICAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYubmFtZQoKICAgIAogICAgY2xhc3MgRW1wbG95ZWUobW9kZWxzLk1vZGVsKToKICAgICAgICAiIiJFeGFtcGxlIEVtcGxveWVlIG1vZGVsIGZvciBvcmdhbml6YXRpb25hbCBoaWVyYXJjaHkgdGVzdHMuIiIiCiAgICAgICAgcGVyc29uID0gbW9kZWxzLk9uZVRvT25lRmllbGQoUGVyc29uLCBvbl9kZWxldGU9bW9kZWxzLkNBU0NBREUpCiAgICAgICAgY29tcGFueSA9IG1vZGVscy5Gb3JlaWduS2V5KENvbXBhbnksIG9uX2RlbGV0ZT1tb2RlbHMuQ0FTQ0FERSkKICAgICAgICBwb3NpdGlvbiA9IG1vZGVscy5DaGFyRmllbGQobWF4X2xlbmd0aD0xMDApCiAgICAgICAgCiAgICAgICAgY2xhc3MgTWV0YToKICAgICAgICAgICAgYXBwX2xhYmVsID0gJ2RqZGF0YWxvZycKICAgICAgICAgICAgCiAgICAgICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgICAgIHJldHVybiBmIntzZWxmLnBlcnNvbi5uYW1lfSBhdCB7c2VsZi5jb21wYW55Lm5hbWV9IgoKZWxzZToKICAgICMgV2hlbiBub3QgaW4gdGVzdGluZyBtb2RlLCBjcmVhdGUgZHVtbXkgY2xhc3NlcyB0byBwcmV2ZW50IGltcG9ydCBlcnJvcnMKICAgIGNsYXNzIFBlcnNvbjoKICAgICAgICBwYXNzCiAgICAKICAgIGNsYXNzIENvbXBhbnk6CiAgICAgICAgcGFzcwogICAgICAgIAogICAgY2xhc3MgRW1wbG95ZWU6CiAgICAgICAgcGFzcwAAAAAAAAAAlggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjBwAAAAAAACMHAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAACWCAAAIiIiCkRhdGFsb2cgc3lzdGVtIGZvciBEamFuZ28gLSBtYWluIG1vZHVsZSB3aXRoIHB1YmxpYyBBUEkgYW5kIHRlc3QgbW9kZWxzLgoKVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIHB1YmxpYyBpbnRlcmZhY2UgZm9yIGRqZGF0YWxvZywgaW1wb3J0aW5nIGZyb20Kc3BlY2lhbGl6ZWQgbW9kdWxlcyBmb3IgZmFjdHMsIHF1ZXJpZXMsIGFuZCBydWxlcy4gSXQgYWxzbyBpbmNsdWRlcwp0ZXN0IG1vZGVscyB0aGF0IGFyZSBvbmx5IGxvYWRlZCB3aGVuIERKREFUQUxPR19URVNUSU5HIGlzIFRydWUuCiIiIgoKZnJvbSBkamFuZ28uY29uZiBpbXBvcnQgc2V0dGluZ3MKZnJvbSBkamFuZ28uZGIgaW1wb3J0IG1vZGVscwoKIyBQdWJsaWMgQVBJIGltcG9ydHMKZnJvbSBkamRhdGFsb2cuZmFjdHMgaW1wb3J0IEZhY3QsIHN0b3JlX2ZhY3RzLCByZXRyYWN0X2ZhY3RzCmZyb20gZGpkYXRhbG9nLnF1ZXJ5IGltcG9ydCBWYXIsIHF1ZXJ5LCBfcHJlZml4X3Ffb2JqZWN0LCBfZmFjdF90b19kamFuZ29fcXVlcnkKZnJvbSBkamRhdGFsb2cucnVsZXMgaW1wb3J0IHJ1bGUsIFJ1bGUsIGdldF9ydWxlcywgY2xlYXJfcnVsZXMKCgojIE9ubHkgY3JlYXRlIG1vZGVscyB3aGVuIGluIHRlc3RpbmcgbW9kZQppZiBnZXRhdHRyKHNldHRpbmdzLCAnREpEQVRBTE9HX1RFU1RJTkcnLCBGYWxzZSk6CiAgICAKICAgIGNsYXNzIFBlcnNvbihtb2RlbHMuTW9kZWwpOgogICAgICAgICIiIkV4YW1wbGUgUGVyc29uIG1vZGVsIGZvciBmYW1pbHkgcmVsYXRpb25zaGlwIHRlc3RzLiIiIgogICAgICAgIG5hbWUgPSBtb2RlbHMuQ2hhckZpZWxkKG1heF9sZW5ndGg9MTAwKQogICAgICAgIGFnZSA9IG1vZGVscy5Qb3NpdGl2ZUludGVnZXJGaWVsZChudWxsPVRydWUsIGJsYW5rPVRydWUpCiAgICAgICAgY2l0eSA9IG1vZGVscy5DaGFyRmllbGQobWF4X2xlbmd0aD0xMDAsIGJsYW5rPVRydWUpCiAgICAgICAgbWFycmllZCA9IG1vZGVscy5Cb29sZWFuRmllbGQoZGVmYXVsdD1GYWxzZSkKICAgICAgICByZXRpcmVkID0gbW9kZWxzLkJvb2xlYW5GaWVsZChkZWZhdWx0PUZhbHNlKQogICAgICAgIAogICAgICAgIGNsYXNzIE1ldGE6CiAgICAgICAgICAgIGFwcF9sYWJlbCA9ICdkamRhdGFsb2cnCiAgICAgICAgICAgIAogICAgICAgIGRlZiBfX3N0cl9fKHNlbGYpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5uYW1lCgogICAgCiAgICBjbGFzcyBDb21wYW55KG1vZGVscy5Nb2RlbCk6CiAgICAgICAgIiIiRXhhbXBsZSBDb21wYW55IG1vZGVsIGZvciBidXNpbmVzcyByZWxhdGlvbnNoaXAgdGVzdHMuIiIiCiAgICAgICAgbmFtZSA9IG1vZGVscy5DaGFyRmllbGQobWF4X2xlbmd0aD0xMDApCiAgICAgICAgYWN0aXZlID0gbW9kZWxzLkJvb2xlYW5GaWVsZChkZWZhdWx0PVRydWUpCiAgICAgICAgCiAgICAgICAgY2xhc3MgTWV0YToKICAgICAgICAgICAgYXBwX2xhYmVsID0gJ2RqZGF0YWxvZycKICAgICAgICAgICAgCiAgICAgICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgICAgIHJldHVybiBzZWxmLm5hbWUKCiAgICAKICAgIGNsYXNzIEVtcGxveWVlKG1vZGVscy5Nb2RlbCk6CiAgICAgICAgIiIiRXhhbXBsZSBFbXBsb3llZSBtb2RlbCBmb3Igb3JnYW5pemF0aW9uYWwgaGllcmFyY2h5IHRlc3RzLiIiIgogICAgICAgIHBlcnNvbiA9IG1vZGVscy5PbmVUb09uZUZpZWxkKFBlcnNvbiwgb25fZGVsZXRlPW1vZGVscy5DQVNDQURFKQogICAgICAgIGNvbXBhbnkgPSBtb2RlbHMuRm9yZWlnbktleShDb21wYW55LCBvbl9kZWxldGU9bW9kZWxzLkNBU0NBREUpCiAgICAgICAgcG9zaXRpb24gPSBtb2RlbHMuQ2hhckZpZWxkKG1heF9sZW5ndGg9MTAwKQogICAgICAgIAogICAgICAgIGNsYXNzIE1ldGE6CiAgICAgICAgICAgIGFwcF9sYWJlbCA9ICdkamRhdGFsb2cnCiAgICAgICAgICAgIAogICAgICAgIGRlZiBfX3N0cl9fKHNlbGYpOgogICAgICAgICAgICByZXR1cm4gZiJ7c2VsZi5wZXJzb24ubmFtZX0gYXQge3NlbGYuY29tcGFueS5uYW1lfSIKCmVsc2U6CiAgICAjIFdoZW4gbm90IGluIHRlc3RpbmcgbW9kZSwgY3JlYXRlIGR1bW15IGNsYXNzZXMgdG8gcHJldmVudCBpbXBvcnQgZXJyb3JzCiAgICBjbGFzcyBQZXJzb246CiAgICAgICAgcGFzcwogICAgCiAgICBjbGFzcyBDb21wYW55OgogICAgICAgIHBhc3MKICAgICAgICAKICAgIGNsYXNzIEVtcGxveWVlOgogICAgICAgIHBhc3MAAAAAAAAAAF0KAAAAAAAAAAAAAAAAAAAAAAAAXQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjBwAAAAAAACMHAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `main`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n  - djdatalog/README.md\n  - kaiko.sublime-workspace\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
			"settings":
			{
				"buffer_size": 2377,
				"line_ending": "Unix",
				"name": "STATUS: kaiko",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					4,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    \n\n  UNSTAGED:\n    djdatalog/models.py\n    kaiko/accounts/api/v20250710.py\n    kaiko/fleet/models/permissions.py\n\n  UNTRACKED:\n    .claude/\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"help":
							[
								216,
								1983
							],
							"unstaged_files":
							[
								78,
								189
							],
							"untracked_files":
							[
								189,
								216
							]
						}
					},
					"AQAAAAAAAAAAAAAAwAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           f98079ed0 djdatalog: Use conjunction solving by default\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    djdatalog/models.py\n    kaiko/accounts/api/v20250710.py\n    kaiko/fleet/models/permissions.py\n\n  UNTRACKED:\n    .claude/\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								497
							],
							"help":
							[
								636,
								2403
							],
							"unstaged_files":
							[
								498,
								609
							],
							"untracked_files":
							[
								609,
								636
							]
						}
					},
					"AQAAAAAAAAAAAAAAZAkAAAAAAADABwAACiAgUk9PVDogICAgfi9TeW5jL2thaWtvL2thaWtvCgogIEJSQU5DSDogIE9uIGJyYW5jaCBgZGpkYXRhbG9nYC4KICBIRUFEOiAgICAKCiAgVU5TVEFHRUQ6CiAgICBkamRhdGFsb2cvbW9kZWxzLnB5CiAgICBrYWlrby9hY2NvdW50cy9hcGkvdjIwMjUwNzEwLnB5CiAgICBrYWlrby9mbGVldC9tb2RlbHMvcGVybWlzc2lvbnMucHkKCiAgVU5UUkFDS0VEOgogICAgLmNsYXVkZS8KCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjIyMjIyMKICAjIyBTRUxFQ1RFRCBGSUxFICMjICAgICAgICAgICAgICAgICAgICMjIEFMTCBGSUxFUyAjIwogICMjIyMjIyMjIyMjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyMjIyMjCgogIFtvXSBvcGVuIGZpbGUgICAgICAgICAgICAgICAgICAgICAgICAgW0FdIHN0YWdlIGFsbCB1bnN0YWdlZCBhbmQgdW50cmFja2VkIGZpbGVzCiAgW3NdIHN0YWdlIGZpbGUgICAgICAgICAgICAgICAgICAgICAgICBbU10gc3RhZ2UgYWxsIHVuc3RhZ2VkIGZpbGVzCiAgW3VdIHVuc3RhZ2UgZmlsZSAgICAgICAgICAgICAgICAgICAgICBbVV0gdW5zdGFnZSBhbGwgc3RhZ2VkIGZpbGVzCiAgW2RdIGRpc2NhcmQgY2hhbmdlcyB0byBmaWxlICAgICAgICAgICBbRF0gZGlzY2FyZCBhbGwgdW5zdGFnZWQgY2hhbmdlcwogIFtpXSBza2lwL3Vuc2tpcCBmaWxlCiAgW2hdIG9wZW4gZmlsZSBpbiBicm93c2VyCgogIFtsXSBkaWZmIGZpbGUgaW5saW5lICAgICAgICAgICAgICAgICAgW2ZdIGRpZmYgYWxsIGZpbGVzCiAgW2VdIGRpZmYgZmlsZSAgICAgICAgICAgICAgICAgICAgICAgICBbRl0gZGlmZiBhbGwgY2FjaGVkIGZpbGVzCgogIFtzcGFjZV0gdG8gc2VsZWN0IG11bHRpcGxlIGl0ZW1zCiAgW2N0cmwtc3BhY2VdIHRvIGNsZWFyIHNlbGVjdGlvbgoKICAjIyMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjIyMKICAjIyBBQ1RJT05TICMjICAgICAgICAgICAgICAgICAgICAgICAgICMjIFNUQVNIRVMgIyMKICAjIyMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjIyMKCiAgW2NdIGNvbW1pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdF1bYV0gYXBwbHkgc3Rhc2gKICBbQ10gY29tbWl0LCBpbmNsdWRpbmcgdW5zdGFnZWQgICAgICAgIFt0XVtwXSBwb3Agc3Rhc2gKICBbbV0gYW1lbmQgcHJldmlvdXMgY29tbWl0ICAgICAgICAgICAgIFtvXSAgICBvcGVuIHN0YXNoCiAgW3BdIHB1c2ggY3VycmVudCBicmFuY2ggICAgICAgICAgICAgICBbdF1bY10gY3JlYXRlIHN0YXNoCiAgW1BdIHB1bGwgY3VycmVudCBicmFuY2ggICAgICAgICAgICAgICBbdF1bdV0gY3JlYXRlIHN0YXNoIGluY2x1ZGluZyB1bnRyYWNrZWQgZmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0XVtnXSBjcmVhdGUgc3Rhc2ggb2Ygc3RhZ2VkIGNoYW5nZXMgb25seQogIFtJXSBhZGQgLmdpdGlnbm9yZSBwYXR0ZXJuICAgICAgICAgICAgW3RdW2RdIGRyb3Agc3Rhc2gKCiAgW01dIGxhdW5jaCBleHRlcm5hbCBtZXJnZSB0b29sCiAgW0JdIGFib3J0IG1lcmdlCgogICMjIyMjIyMjIyMjCiAgIyMgT1RIRVIgIyMKICAjIyMjIyMjIyMjIwoKICBbT10gICAgICAgICBzaG93IG1vc3QgcmVjZW50IGNvbW1pdAogIFtnXSAgICAgICAgIHNob3cgZ3JhcGggcmVwbyBoaXN0b3J5CiAgW0ddICAgICAgICAgc2hvdyBvdmVydmlldyBvZiBicmFuY2hlcyBhbmQgdGFncwogIFs/XSAgICAgICAgIHRvZ2dsZSB0aGlzIGhlbHAgbWVudQogIFt0YWJdICAgICAgIHRyYW5zaXRpb24gdG8gbmV4dCBkYXNoYm9hcmQKICBbc2hpZnQtdGFiXSB0cmFuc2l0aW9uIHRvIHByZXZpb3VzIGRhc2hib2FyZAogIFsuXSAgICAgICAgIG1vdmUgY3Vyc29yIHRvIG5leHQgZmlsZQogIFssXSAgICAgICAgIG1vdmUgY3Vyc29yIHRvIHByZXZpb3VzIGZpbGUKCi0KCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfAAAAAAAAAF8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"gs_status_stage_file",
					null,
					"AQAAAAAAAAAAAAAAbwkAAAAAAABqCQAACiAgUk9PVDogICAgfi9TeW5jL2thaWtvL2thaWtvCgogIEJSQU5DSDogIE9uIGJyYW5jaCBgZGpkYXRhbG9nYC4KICBIRUFEOiAgICBkMzM5ZTZmNTYgQ0xBVURFLm1kIHVwZGF0ZSB0byBhdm9pZCBpbi1mdW5jdGlvbiBpbXBvcnRzCiAgICAgICAgICAgZDI2OGI3NjYzIGZsZWV0OiBBZGQgcmVsYXRpb24gUGlubmVkKFVzZXIsIFZlc3NlbCkgdG8ga25vdyB3aGljaCB2ZXNzZWxzIHRoZSB1c2VyIGhhcyBwaW5uZWQKICAgICAgICAgICBmNTQ0Zjk3M2QgQWRkIENMQVVERS5tZAogICAgICAgICAgIDA2MWNkZWE3ZSBkamRhdGFsb2c6IE9wdGltaXplIHF1ZXJpZXMgYnkgbm90IGZldGNoaW5nIHJlbGF0ZWQgb2JqZWN0cyBhdCBhbGwsIGFuZCBkbyB0aGF0IGF0IHRoZSBlbmQKICAgICAgICAgICBmOTgwNzllZDAgZGpkYXRhbG9nOiBVc2UgY29uanVuY3Rpb24gc29sdmluZyBieSBkZWZhdWx0CiAgICAgICAgICAg4oCLIOKLrgogICAgICAgICAgIDkwODQxZTk5NiDigIsoc3RhZ2luZykKCiAgVU5TVEFHRUQ6CiAgICBkamRhdGFsb2cvbW9kZWxzLnB5CiAgICBrYWlrby9hY2NvdW50cy9hcGkvdjIwMjUwNzEwLnB5CiAgICBrYWlrby9mbGVldC9tb2RlbHMvcGVybWlzc2lvbnMucHkKCiAgVU5UUkFDS0VEOgogICAgLmNsYXVkZS8KCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjIyMjIyMKICAjIyBTRUxFQ1RFRCBGSUxFICMjICAgICAgICAgICAgICAgICAgICMjIEFMTCBGSUxFUyAjIwogICMjIyMjIyMjIyMjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyMjIyMjCgogIFtvXSBvcGVuIGZpbGUgICAgICAgICAgICAgICAgICAgICAgICAgW0FdIHN0YWdlIGFsbCB1bnN0YWdlZCBhbmQgdW50cmFja2VkIGZpbGVzCiAgW3NdIHN0YWdlIGZpbGUgICAgICAgICAgICAgICAgICAgICAgICBbU10gc3RhZ2UgYWxsIHVuc3RhZ2VkIGZpbGVzCiAgW3VdIHVuc3RhZ2UgZmlsZSAgICAgICAgICAgICAgICAgICAgICBbVV0gdW5zdGFnZSBhbGwgc3RhZ2VkIGZpbGVzCiAgW2RdIGRpc2NhcmQgY2hhbmdlcyB0byBmaWxlICAgICAgICAgICBbRF0gZGlzY2FyZCBhbGwgdW5zdGFnZWQgY2hhbmdlcwogIFtpXSBza2lwL3Vuc2tpcCBmaWxlCiAgW2hdIG9wZW4gZmlsZSBpbiBicm93c2VyCgogIFtsXSBkaWZmIGZpbGUgaW5saW5lICAgICAgICAgICAgICAgICAgW2ZdIGRpZmYgYWxsIGZpbGVzCiAgW2VdIGRpZmYgZmlsZSAgICAgICAgICAgICAgICAgICAgICAgICBbRl0gZGlmZiBhbGwgY2FjaGVkIGZpbGVzCgogIFtzcGFjZV0gdG8gc2VsZWN0IG11bHRpcGxlIGl0ZW1zCiAgW2N0cmwtc3BhY2VdIHRvIGNsZWFyIHNlbGVjdGlvbgoKICAjIyMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjIyMKICAjIyBBQ1RJT05TICMjICAgICAgICAgICAgICAgICAgICAgICAgICMjIFNUQVNIRVMgIyMKICAjIyMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjIyMKCiAgW2NdIGNvbW1pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdF1bYV0gYXBwbHkgc3Rhc2gKICBbQ10gY29tbWl0LCBpbmNsdWRpbmcgdW5zdGFnZWQgICAgICAgIFt0XVtwXSBwb3Agc3Rhc2gKICBbbV0gYW1lbmQgcHJldmlvdXMgY29tbWl0ICAgICAgICAgICAgIFtvXSAgICBvcGVuIHN0YXNoCiAgW3BdIHB1c2ggY3VycmVudCBicmFuY2ggICAgICAgICAgICAgICBbdF1bY10gY3JlYXRlIHN0YXNoCiAgW1BdIHB1bGwgY3VycmVudCBicmFuY2ggICAgICAgICAgICAgICBbdF1bdV0gY3JlYXRlIHN0YXNoIGluY2x1ZGluZyB1bnRyYWNrZWQgZmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0XVtnXSBjcmVhdGUgc3Rhc2ggb2Ygc3RhZ2VkIGNoYW5nZXMgb25seQogIFtJXSBhZGQgLmdpdGlnbm9yZSBwYXR0ZXJuICAgICAgICAgICAgW3RdW2RdIGRyb3Agc3Rhc2gKCiAgW01dIGxhdW5jaCBleHRlcm5hbCBtZXJnZSB0b29sCiAgW0JdIGFib3J0IG1lcmdlCgogICMjIyMjIyMjIyMjCiAgIyMgT1RIRVIgIyMKICAjIyMjIyMjIyMjIwoKICBbT10gICAgICAgICBzaG93IG1vc3QgcmVjZW50IGNvbW1pdAogIFtnXSAgICAgICAgIHNob3cgZ3JhcGggcmVwbyBoaXN0b3J5CiAgW0ddICAgICAgICAgc2hvdyBvdmVydmlldyBvZiBicmFuY2hlcyBhbmQgdGFncwogIFs/XSAgICAgICAgIHRvZ2dsZSB0aGlzIGhlbHAgbWVudQogIFt0YWJdICAgICAgIHRyYW5zaXRpb24gdG8gbmV4dCBkYXNoYm9hcmQKICBbc2hpZnQtdGFiXSB0cmFuc2l0aW9uIHRvIHByZXZpb3VzIGRhc2hib2FyZAogIFsuXSAgICAgICAgIG1vdmUgY3Vyc29yIHRvIG5leHQgZmlsZQogIFssXSAgICAgICAgIG1vdmUgY3Vyc29yIHRvIHByZXZpb3VzIGZpbGUKCi0KCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADAgAAAAAAAAMCAAAAAAAAAAAAAAAAREA"
				],
				[
					19,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    kaiko/accounts/api/v20250710.py\n    kaiko/fleet/models/permissions.py\n\n  UNTRACKED:\n    .claude/\n\n  STAGED:\n    djdatalog/models.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								698,
								2465
							],
							"staged_files":
							[
								663,
								698
							],
							"unstaged_files":
							[
								549,
								636
							],
							"untracked_files":
							[
								636,
								663
							]
						}
					},
					"AQAAAE0AAAAAAAAAJAIAAAAAAACqAQAAZDMzOWU2ZjU2IENMQVVERS5tZCB1cGRhdGUgdG8gYXZvaWQgaW4tZnVuY3Rpb24gaW1wb3J0cwogICAgICAgICAgIGQyNjhiNzY2MyBmbGVldDogQWRkIHJlbGF0aW9uIFBpbm5lZChVc2VyLCBWZXNzZWwpIHRvIGtub3cgd2hpY2ggdmVzc2VscyB0aGUgdXNlciBoYXMgcGlubmVkCiAgICAgICAgICAgZjU0NGY5NzNkIEFkZCBDTEFVREUubWQKICAgICAgICAgICAwNjFjZGVhN2UgZGpkYXRhbG9nOiBPcHRpbWl6ZSBxdWVyaWVzIGJ5IG5vdCBmZXRjaGluZyByZWxhdGVkIG9iamVjdHMgYXQgYWxsLCBhbmQgZG8gdGhhdCBhdCB0aGUgZW5kCiAgICAgICAgICAgZjk4MDc5ZWQwIGRqZGF0YWxvZzogVXNlIGNvbmp1bmN0aW9uIHNvbHZpbmcgYnkgZGVmYXVsdAogICAgICAgICAgIOKAiyDii64KICAgICAgICAgICA5MDg0MWU5OTYg4oCLKHN0YWdpbmcp",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADAgAAAAAAAAMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    kaiko/accounts/api/v20250710.py\n    kaiko/fleet/models/permissions.py\n\n  UNTRACKED:\n    .claude/\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								663,
								2430
							],
							"unstaged_files":
							[
								549,
								636
							],
							"untracked_files":
							[
								636,
								663
							]
						}
					},
					"AQAAAJcCAAAAAAAAlwIAAAAAAAAjAAAACiAgU1RBR0VEOgogICAgZGpkYXRhbG9nL21vZGVscy5weQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AgAAAAAAADYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNTRACKED:\n    .claude/\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								576,
								2343
							],
							"untracked_files":
							[
								549,
								576
							]
						}
					},
					"AQAAACUCAAAAAAAAJQIAAAAAAABXAAAACiAgVU5TVEFHRUQ6CiAgICBrYWlrby9hY2NvdW50cy9hcGkvdjIwMjUwNzEwLnB5CiAgICBrYWlrby9mbGVldC9tb2RlbHMvcGVybWlzc2lvbnMucHkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AgAAAAAAADYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    djdatalog/models.py\n    kaiko/accounts/api/v20250710.py\n    kaiko/fleet/models/permissions.py\n\n  UNTRACKED:\n    .claude/\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								687,
								2454
							],
							"unstaged_files":
							[
								549,
								660
							],
							"untracked_files":
							[
								660,
								687
							]
						}
					},
					"AQAAAAAAAAAAAAAAlwkAAAAAAAAuCQAACiAgUk9PVDogICAgfi9TeW5jL2thaWtvL2thaWtvCgogIEJSQU5DSDogIE9uIGJyYW5jaCBgZGpkYXRhbG9nYC4KICBIRUFEOiAgICA5YjQzMGY4NTIgZGpkYXRhbG9nOiBBZGQgYSBoeWRyYXRlIHBhcmFtZXRlciB0byBxdWVyeSB0byBoeWRyYXRlIHRoZSBxdWVyaWVzIG9yIGp1c3QgcmV0dXJuIHRoZSByYXcgdmFsdWVzCiAgICAgICAgICAgZDMzOWU2ZjU2IENMQVVERS5tZCB1cGRhdGUgdG8gYXZvaWQgaW4tZnVuY3Rpb24gaW1wb3J0cwogICAgICAgICAgIGQyNjhiNzY2MyBmbGVldDogQWRkIHJlbGF0aW9uIFBpbm5lZChVc2VyLCBWZXNzZWwpIHRvIGtub3cgd2hpY2ggdmVzc2VscyB0aGUgdXNlciBoYXMgcGlubmVkCiAgICAgICAgICAgZjU0NGY5NzNkIEFkZCBDTEFVREUubWQKICAgICAgICAgICAwNjFjZGVhN2UgZGpkYXRhbG9nOiBPcHRpbWl6ZSBxdWVyaWVzIGJ5IG5vdCBmZXRjaGluZyByZWxhdGVkIG9iamVjdHMgYXQgYWxsLCBhbmQgZG8gdGhhdCBhdCB0aGUgZW5kCiAgICAgICAgICAg4oCLIOKLrgogICAgICAgICAgIDkwODQxZTk5NiDigIsoc3RhZ2luZykKCiAgVU5UUkFDS0VEOgogICAgLmNsYXVkZS8KCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjIyMjIyMKICAjIyBTRUxFQ1RFRCBGSUxFICMjICAgICAgICAgICAgICAgICAgICMjIEFMTCBGSUxFUyAjIwogICMjIyMjIyMjIyMjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyMjIyMjCgogIFtvXSBvcGVuIGZpbGUgICAgICAgICAgICAgICAgICAgICAgICAgW0FdIHN0YWdlIGFsbCB1bnN0YWdlZCBhbmQgdW50cmFja2VkIGZpbGVzCiAgW3NdIHN0YWdlIGZpbGUgICAgICAgICAgICAgICAgICAgICAgICBbU10gc3RhZ2UgYWxsIHVuc3RhZ2VkIGZpbGVzCiAgW3VdIHVuc3RhZ2UgZmlsZSAgICAgICAgICAgICAgICAgICAgICBbVV0gdW5zdGFnZSBhbGwgc3RhZ2VkIGZpbGVzCiAgW2RdIGRpc2NhcmQgY2hhbmdlcyB0byBmaWxlICAgICAgICAgICBbRF0gZGlzY2FyZCBhbGwgdW5zdGFnZWQgY2hhbmdlcwogIFtpXSBza2lwL3Vuc2tpcCBmaWxlCiAgW2hdIG9wZW4gZmlsZSBpbiBicm93c2VyCgogIFtsXSBkaWZmIGZpbGUgaW5saW5lICAgICAgICAgICAgICAgICAgW2ZdIGRpZmYgYWxsIGZpbGVzCiAgW2VdIGRpZmYgZmlsZSAgICAgICAgICAgICAgICAgICAgICAgICBbRl0gZGlmZiBhbGwgY2FjaGVkIGZpbGVzCgogIFtzcGFjZV0gdG8gc2VsZWN0IG11bHRpcGxlIGl0ZW1zCiAgW2N0cmwtc3BhY2VdIHRvIGNsZWFyIHNlbGVjdGlvbgoKICAjIyMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjIyMKICAjIyBBQ1RJT05TICMjICAgICAgICAgICAgICAgICAgICAgICAgICMjIFNUQVNIRVMgIyMKICAjIyMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjIyMKCiAgW2NdIGNvbW1pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdF1bYV0gYXBwbHkgc3Rhc2gKICBbQ10gY29tbWl0LCBpbmNsdWRpbmcgdW5zdGFnZWQgICAgICAgIFt0XVtwXSBwb3Agc3Rhc2gKICBbbV0gYW1lbmQgcHJldmlvdXMgY29tbWl0ICAgICAgICAgICAgIFtvXSAgICBvcGVuIHN0YXNoCiAgW3BdIHB1c2ggY3VycmVudCBicmFuY2ggICAgICAgICAgICAgICBbdF1bY10gY3JlYXRlIHN0YXNoCiAgW1BdIHB1bGwgY3VycmVudCBicmFuY2ggICAgICAgICAgICAgICBbdF1bdV0gY3JlYXRlIHN0YXNoIGluY2x1ZGluZyB1bnRyYWNrZWQgZmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0XVtnXSBjcmVhdGUgc3Rhc2ggb2Ygc3RhZ2VkIGNoYW5nZXMgb25seQogIFtJXSBhZGQgLmdpdGlnbm9yZSBwYXR0ZXJuICAgICAgICAgICAgW3RdW2RdIGRyb3Agc3Rhc2gKCiAgW01dIGxhdW5jaCBleHRlcm5hbCBtZXJnZSB0b29sCiAgW0JdIGFib3J0IG1lcmdlCgogICMjIyMjIyMjIyMjCiAgIyMgT1RIRVIgIyMKICAjIyMjIyMjIyMjIwoKICBbT10gICAgICAgICBzaG93IG1vc3QgcmVjZW50IGNvbW1pdAogIFtnXSAgICAgICAgIHNob3cgZ3JhcGggcmVwbyBoaXN0b3J5CiAgW0ddICAgICAgICAgc2hvdyBvdmVydmlldyBvZiBicmFuY2hlcyBhbmQgdGFncwogIFs/XSAgICAgICAgIHRvZ2dsZSB0aGlzIGhlbHAgbWVudQogIFt0YWJdICAgICAgIHRyYW5zaXRpb24gdG8gbmV4dCBkYXNoYm9hcmQKICBbc2hpZnQtdGFiXSB0cmFuc2l0aW9uIHRvIHByZXZpb3VzIGRhc2hib2FyZAogIFsuXSAgICAgICAgIG1vdmUgY3Vyc29yIHRvIG5leHQgZmlsZQogIFssXSAgICAgICAgIG1vdmUgY3Vyc29yIHRvIHByZXZpb3VzIGZpbGUKCi0KCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    djdatalog/models.py\n\n  UNTRACKED:\n    test_q_objects.py\n    test_q_transform.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								646,
								2413
							],
							"unstaged_files":
							[
								549,
								586
							],
							"untracked_files":
							[
								586,
								646
							]
						}
					},
					"AgAAAJQCAAAAAAAA0AIAAAAAAAAbAAAACiAgVU5UUkFDS0VEOgogICAgLmNsYXVkZS8KJQIAAAAAAABKAgAAAAAAAG8AAAAKICBVTlNUQUdFRDoKICAgIGRqZGF0YWxvZy9tb2RlbHMucHkKICAgIGthaWtvL2FjY291bnRzL2FwaS92MjAyNTA3MTAucHkKICAgIGthaWtvL2ZsZWV0L21vZGVscy9wZXJtaXNzaW9ucy5weQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AgAAAAAAADYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"gs_status_stage_file",
					null,
					"AQAAAAAAAAAAAAAAbAkAAAAAAAB0CQAACiAgUk9PVDogICAgfi9TeW5jL2thaWtvL2thaWtvCgogIEJSQU5DSDogIE9uIGJyYW5jaCBgZGpkYXRhbG9nYC4KICBIRUFEOiAgICA5YjQzMGY4NTIgZGpkYXRhbG9nOiBBZGQgYSBoeWRyYXRlIHBhcmFtZXRlciB0byBxdWVyeSB0byBoeWRyYXRlIHRoZSBxdWVyaWVzIG9yIGp1c3QgcmV0dXJuIHRoZSByYXcgdmFsdWVzCiAgICAgICAgICAgZDMzOWU2ZjU2IENMQVVERS5tZCB1cGRhdGUgdG8gYXZvaWQgaW4tZnVuY3Rpb24gaW1wb3J0cwogICAgICAgICAgIGQyNjhiNzY2MyBmbGVldDogQWRkIHJlbGF0aW9uIFBpbm5lZChVc2VyLCBWZXNzZWwpIHRvIGtub3cgd2hpY2ggdmVzc2VscyB0aGUgdXNlciBoYXMgcGlubmVkCiAgICAgICAgICAgZjU0NGY5NzNkIEFkZCBDTEFVREUubWQKICAgICAgICAgICAwNjFjZGVhN2UgZGpkYXRhbG9nOiBPcHRpbWl6ZSBxdWVyaWVzIGJ5IG5vdCBmZXRjaGluZyByZWxhdGVkIG9iamVjdHMgYXQgYWxsLCBhbmQgZG8gdGhhdCBhdCB0aGUgZW5kCiAgICAgICAgICAg4oCLIOKLrgogICAgICAgICAgIDkwODQxZTk5NiDigIsoc3RhZ2luZykKCiAgVU5TVEFHRUQ6CiAgICBkamRhdGFsb2cvbW9kZWxzLnB5CgogIFVOVFJBQ0tFRDoKICAgIHRlc3RfcV9vYmplY3RzLnB5CiAgICB0ZXN0X3FfdHJhbnNmb3JtLnB5CgogICMjIyMjIyMjIyMjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyMjIyMjCiAgIyMgU0VMRUNURUQgRklMRSAjIyAgICAgICAgICAgICAgICAgICAjIyBBTEwgRklMRVMgIyMKICAjIyMjIyMjIyMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjIyMjIwoKICBbb10gb3BlbiBmaWxlICAgICAgICAgICAgICAgICAgICAgICAgIFtBXSBzdGFnZSBhbGwgdW5zdGFnZWQgYW5kIHVudHJhY2tlZCBmaWxlcwogIFtzXSBzdGFnZSBmaWxlICAgICAgICAgICAgICAgICAgICAgICAgW1NdIHN0YWdlIGFsbCB1bnN0YWdlZCBmaWxlcwogIFt1XSB1bnN0YWdlIGZpbGUgICAgICAgICAgICAgICAgICAgICAgW1VdIHVuc3RhZ2UgYWxsIHN0YWdlZCBmaWxlcwogIFtkXSBkaXNjYXJkIGNoYW5nZXMgdG8gZmlsZSAgICAgICAgICAgW0RdIGRpc2NhcmQgYWxsIHVuc3RhZ2VkIGNoYW5nZXMKICBbaV0gc2tpcC91bnNraXAgZmlsZQogIFtoXSBvcGVuIGZpbGUgaW4gYnJvd3NlcgoKICBbbF0gZGlmZiBmaWxlIGlubGluZSAgICAgICAgICAgICAgICAgIFtmXSBkaWZmIGFsbCBmaWxlcwogIFtlXSBkaWZmIGZpbGUgICAgICAgICAgICAgICAgICAgICAgICAgW0ZdIGRpZmYgYWxsIGNhY2hlZCBmaWxlcwoKICBbc3BhY2VdIHRvIHNlbGVjdCBtdWx0aXBsZSBpdGVtcwogIFtjdHJsLXNwYWNlXSB0byBjbGVhciBzZWxlY3Rpb24KCiAgIyMjIyMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjIyMjCiAgIyMgQUNUSU9OUyAjIyAgICAgICAgICAgICAgICAgICAgICAgICAjIyBTVEFTSEVTICMjCiAgIyMjIyMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjIyMjCgogIFtjXSBjb21taXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RdW2FdIGFwcGx5IHN0YXNoCiAgW0NdIGNvbW1pdCwgaW5jbHVkaW5nIHVuc3RhZ2VkICAgICAgICBbdF1bcF0gcG9wIHN0YXNoCiAgW21dIGFtZW5kIHByZXZpb3VzIGNvbW1pdCAgICAgICAgICAgICBbb10gICAgb3BlbiBzdGFzaAogIFtwXSBwdXNoIGN1cnJlbnQgYnJhbmNoICAgICAgICAgICAgICAgW3RdW2NdIGNyZWF0ZSBzdGFzaAogIFtQXSBwdWxsIGN1cnJlbnQgYnJhbmNoICAgICAgICAgICAgICAgW3RdW3VdIGNyZWF0ZSBzdGFzaCBpbmNsdWRpbmcgdW50cmFja2VkIGZpbGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdF1bZ10gY3JlYXRlIHN0YXNoIG9mIHN0YWdlZCBjaGFuZ2VzIG9ubHkKICBbSV0gYWRkIC5naXRpZ25vcmUgcGF0dGVybiAgICAgICAgICAgIFt0XVtkXSBkcm9wIHN0YXNoCgogIFtNXSBsYXVuY2ggZXh0ZXJuYWwgbWVyZ2UgdG9vbAogIFtCXSBhYm9ydCBtZXJnZQoKICAjIyMjIyMjIyMjIwogICMjIE9USEVSICMjCiAgIyMjIyMjIyMjIyMKCiAgW09dICAgICAgICAgc2hvdyBtb3N0IHJlY2VudCBjb21taXQKICBbZ10gICAgICAgICBzaG93IGdyYXBoIHJlcG8gaGlzdG9yeQogIFtHXSAgICAgICAgIHNob3cgb3ZlcnZpZXcgb2YgYnJhbmNoZXMgYW5kIHRhZ3MKICBbP10gICAgICAgICB0b2dnbGUgdGhpcyBoZWxwIG1lbnUKICBbdGFiXSAgICAgICB0cmFuc2l0aW9uIHRvIG5leHQgZGFzaGJvYXJkCiAgW3NoaWZ0LXRhYl0gdHJhbnNpdGlvbiB0byBwcmV2aW91cyBkYXNoYm9hcmQKICBbLl0gICAgICAgICBtb3ZlIGN1cnNvciB0byBuZXh0IGZpbGUKICBbLF0gICAgICAgICBtb3ZlIGN1cnNvciB0byBwcmV2aW91cyBmaWxlCgotCgo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AgAAAAAAADYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNTRACKED:\n    djdatalog/README.md\n    test_q_objects.py\n    test_q_transform.py\n\n  STAGED:\n    djdatalog/models.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								668,
								2435
							],
							"staged_files":
							[
								633,
								668
							],
							"untracked_files":
							[
								549,
								633
							]
						}
					},
					"AQAAACUCAAAAAAAAeQIAAAAAAAA8AAAACiAgVU5UUkFDS0VEOgogICAgdGVzdF9xX29iamVjdHMucHkKICAgIHRlc3RfcV90cmFuc2Zvcm0ucHkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNAgAAAAAAAE0CAAAAAAAAAAAAAAAAREA"
				],
				[
					58,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNTRACKED:\n    djdatalog/README.md\n    djdatalog/tests/\n    test_q_objects.py\n    test_q_transform.py\n\n  STAGED:\n    djdatalog/models.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								689,
								2456
							],
							"staged_files":
							[
								654,
								689
							],
							"untracked_files":
							[
								549,
								654
							]
						}
					},
					"AQAAACUCAAAAAAAAjgIAAAAAAABUAAAACiAgVU5UUkFDS0VEOgogICAgZGpkYXRhbG9nL1JFQURNRS5tZAogICAgdGVzdF9xX29iamVjdHMucHkKICAgIHRlc3RfcV90cmFuc2Zvcm0ucHkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAAREA"
				],
				[
					59,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNTRACKED:\n    djdatalog/README.md\n    djdatalog/tests/\n\n  STAGED:\n    djdatalog/models.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								643,
								2410
							],
							"staged_files":
							[
								608,
								643
							],
							"untracked_files":
							[
								549,
								608
							]
						}
					},
					"AQAAACUCAAAAAAAAYAIAAAAAAABpAAAACiAgVU5UUkFDS0VEOgogICAgZGpkYXRhbG9nL1JFQURNRS5tZAogICAgZGpkYXRhbG9nL3Rlc3RzLwogICAgdGVzdF9xX29iamVjdHMucHkKICAgIHRlc3RfcV90cmFuc2Zvcm0ucHkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					2,
					"gs_status_stage_file",
					null,
					"BAAAAGACAAAAAAAAmwIAAAAAAAAjAAAACiAgU1RBR0VEOgogICAgZGpkYXRhbG9nL21vZGVscy5weQolAgAAAAAAAEgCAAAAAAAAOwAAAAogIFVOVFJBQ0tFRDoKICAgIGRqZGF0YWxvZy9SRUFETUUubWQKICAgIGRqZGF0YWxvZy90ZXN0cy8KSAIAAAAAAAAlAwAAAAAAADsAAAAKICBTVEFHRUQ6CiAgICBkamRhdGFsb2cvUkVBRE1FLm1kCiAgICBkamRhdGFsb2cvbW9kZWxzLnB5CiUCAAAAAAAAJQIAAAAAAAAjAAAACiAgVU5UUkFDS0VEOgogICAgZGpkYXRhbG9nL3Rlc3RzLwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAAREA"
				],
				[
					96,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    djdatalog/README.md\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_query_hydration.py\n\n  UNTRACKED:\n    djdatalog/run_tests.py\n    djdatalog/test_models.py\n    djdatalog/tests/test_family_example.py\n\n  STAGED:\n    djdatalog/README.md\n    djdatalog/models.py\n    djdatalog/tests/__init__.py\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_q_objects.py\n    djdatalog/tests/test_query_hydration.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								1012,
								2779
							],
							"staged_files":
							[
								791,
								1012
							],
							"unstaged_files":
							[
								549,
								678
							],
							"untracked_files":
							[
								678,
								791
							]
						}
					},
					"AQAAAAAAAAAAAAAA3AoAAAAAAADwCQAACiAgUk9PVDogICAgfi9TeW5jL2thaWtvL2thaWtvCgogIEJSQU5DSDogIE9uIGJyYW5jaCBgZGpkYXRhbG9nYC4KICBIRUFEOiAgICA5YjQzMGY4NTIgZGpkYXRhbG9nOiBBZGQgYSBoeWRyYXRlIHBhcmFtZXRlciB0byBxdWVyeSB0byBoeWRyYXRlIHRoZSBxdWVyaWVzIG9yIGp1c3QgcmV0dXJuIHRoZSByYXcgdmFsdWVzCiAgICAgICAgICAgZDMzOWU2ZjU2IENMQVVERS5tZCB1cGRhdGUgdG8gYXZvaWQgaW4tZnVuY3Rpb24gaW1wb3J0cwogICAgICAgICAgIGQyNjhiNzY2MyBmbGVldDogQWRkIHJlbGF0aW9uIFBpbm5lZChVc2VyLCBWZXNzZWwpIHRvIGtub3cgd2hpY2ggdmVzc2VscyB0aGUgdXNlciBoYXMgcGlubmVkCiAgICAgICAgICAgZjU0NGY5NzNkIEFkZCBDTEFVREUubWQKICAgICAgICAgICAwNjFjZGVhN2UgZGpkYXRhbG9nOiBPcHRpbWl6ZSBxdWVyaWVzIGJ5IG5vdCBmZXRjaGluZyByZWxhdGVkIG9iamVjdHMgYXQgYWxsLCBhbmQgZG8gdGhhdCBhdCB0aGUgZW5kCiAgICAgICAgICAg4oCLIOKLrgogICAgICAgICAgIDkwODQxZTk5NiDigIsoc3RhZ2luZykKCiAgU1RBR0VEOgogICAgZGpkYXRhbG9nL1JFQURNRS5tZAogICAgZGpkYXRhbG9nL21vZGVscy5weQogICAgZGpkYXRhbG9nL3Rlc3RzL19faW5pdF9fLnB5CiAgICBkamRhdGFsb2cvdGVzdHMvdGVzdF9iYXNpY19mdW5jdGlvbmFsaXR5LnB5CiAgICBkamRhdGFsb2cvdGVzdHMvdGVzdF9xX29iamVjdHMucHkKICAgIGRqZGF0YWxvZy90ZXN0cy90ZXN0X3F1ZXJ5X2h5ZHJhdGlvbi5weQoKICAjIyMjIyMjIyMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjIyMjIwogICMjIFNFTEVDVEVEIEZJTEUgIyMgICAgICAgICAgICAgICAgICAgIyMgQUxMIEZJTEVTICMjCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjIyMjIyMKCiAgW29dIG9wZW4gZmlsZSAgICAgICAgICAgICAgICAgICAgICAgICBbQV0gc3RhZ2UgYWxsIHVuc3RhZ2VkIGFuZCB1bnRyYWNrZWQgZmlsZXMKICBbc10gc3RhZ2UgZmlsZSAgICAgICAgICAgICAgICAgICAgICAgIFtTXSBzdGFnZSBhbGwgdW5zdGFnZWQgZmlsZXMKICBbdV0gdW5zdGFnZSBmaWxlICAgICAgICAgICAgICAgICAgICAgIFtVXSB1bnN0YWdlIGFsbCBzdGFnZWQgZmlsZXMKICBbZF0gZGlzY2FyZCBjaGFuZ2VzIHRvIGZpbGUgICAgICAgICAgIFtEXSBkaXNjYXJkIGFsbCB1bnN0YWdlZCBjaGFuZ2VzCiAgW2ldIHNraXAvdW5za2lwIGZpbGUKICBbaF0gb3BlbiBmaWxlIGluIGJyb3dzZXIKCiAgW2xdIGRpZmYgZmlsZSBpbmxpbmUgICAgICAgICAgICAgICAgICBbZl0gZGlmZiBhbGwgZmlsZXMKICBbZV0gZGlmZiBmaWxlICAgICAgICAgICAgICAgICAgICAgICAgIFtGXSBkaWZmIGFsbCBjYWNoZWQgZmlsZXMKCiAgW3NwYWNlXSB0byBzZWxlY3QgbXVsdGlwbGUgaXRlbXMKICBbY3RybC1zcGFjZV0gdG8gY2xlYXIgc2VsZWN0aW9uCgogICMjIyMjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyMjIwogICMjIEFDVElPTlMgIyMgICAgICAgICAgICAgICAgICAgICAgICAgIyMgU1RBU0hFUyAjIwogICMjIyMjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyMjIwoKICBbY10gY29tbWl0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0XVthXSBhcHBseSBzdGFzaAogIFtDXSBjb21taXQsIGluY2x1ZGluZyB1bnN0YWdlZCAgICAgICAgW3RdW3BdIHBvcCBzdGFzaAogIFttXSBhbWVuZCBwcmV2aW91cyBjb21taXQgICAgICAgICAgICAgW29dICAgIG9wZW4gc3Rhc2gKICBbcF0gcHVzaCBjdXJyZW50IGJyYW5jaCAgICAgICAgICAgICAgIFt0XVtjXSBjcmVhdGUgc3Rhc2gKICBbUF0gcHVsbCBjdXJyZW50IGJyYW5jaCAgICAgICAgICAgICAgIFt0XVt1XSBjcmVhdGUgc3Rhc2ggaW5jbHVkaW5nIHVudHJhY2tlZCBmaWxlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RdW2ddIGNyZWF0ZSBzdGFzaCBvZiBzdGFnZWQgY2hhbmdlcyBvbmx5CiAgW0ldIGFkZCAuZ2l0aWdub3JlIHBhdHRlcm4gICAgICAgICAgICBbdF1bZF0gZHJvcCBzdGFzaAoKICBbTV0gbGF1bmNoIGV4dGVybmFsIG1lcmdlIHRvb2wKICBbQl0gYWJvcnQgbWVyZ2UKCiAgIyMjIyMjIyMjIyMKICAjIyBPVEhFUiAjIwogICMjIyMjIyMjIyMjCgogIFtPXSAgICAgICAgIHNob3cgbW9zdCByZWNlbnQgY29tbWl0CiAgW2ddICAgICAgICAgc2hvdyBncmFwaCByZXBvIGhpc3RvcnkKICBbR10gICAgICAgICBzaG93IG92ZXJ2aWV3IG9mIGJyYW5jaGVzIGFuZCB0YWdzCiAgWz9dICAgICAgICAgdG9nZ2xlIHRoaXMgaGVscCBtZW51CiAgW3RhYl0gICAgICAgdHJhbnNpdGlvbiB0byBuZXh0IGRhc2hib2FyZAogIFtzaGlmdC10YWJdIHRyYW5zaXRpb24gdG8gcHJldmlvdXMgZGFzaGJvYXJkCiAgWy5dICAgICAgICAgbW92ZSBjdXJzb3IgdG8gbmV4dCBmaWxlCiAgWyxdICAgICAgICAgbW92ZSBjdXJzb3IgdG8gcHJldmlvdXMgZmlsZQoKLQoK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaAgAAAAAAANoCAAAAAAAAAAAAAAAAREA"
				],
				[
					100,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    djdatalog/README.md\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_query_hydration.py\n\n  UNTRACKED:\n    djdatalog/run_tests.py\n    djdatalog/test_facts.py\n    djdatalog/test_models.py\n    djdatalog/tests/test_family_example.py\n\n  STAGED:\n    djdatalog/README.md\n    djdatalog/models.py\n    djdatalog/tests/__init__.py\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_q_objects.py\n    djdatalog/tests/test_query_hydration.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								1040,
								2807
							],
							"staged_files":
							[
								819,
								1040
							],
							"unstaged_files":
							[
								549,
								678
							],
							"untracked_files":
							[
								678,
								819
							]
						}
					},
					"AQAAAKYCAAAAAAAAMwMAAAAAAABxAAAACiAgVU5UUkFDS0VEOgogICAgZGpkYXRhbG9nL3J1bl90ZXN0cy5weQogICAgZGpkYXRhbG9nL3Rlc3RfbW9kZWxzLnB5CiAgICBkamRhdGFsb2cvdGVzdHMvdGVzdF9mYW1pbHlfZXhhbXBsZS5weQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAgAAAAAAANMCAAAAAAAAAAAAAAAAREA"
				],
				[
					101,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    djdatalog/README.md\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_query_hydration.py\n\n  UNTRACKED:\n    djdatalog/facts.py\n    djdatalog/run_tests.py\n    djdatalog/test_facts.py\n    djdatalog/test_models.py\n    djdatalog/test_rules.py\n    djdatalog/tests/test_family_example.py\n\n  STAGED:\n    djdatalog/README.md\n    djdatalog/models.py\n    djdatalog/tests/__init__.py\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_q_objects.py\n    djdatalog/tests/test_query_hydration.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								1091,
								2858
							],
							"staged_files":
							[
								870,
								1091
							],
							"unstaged_files":
							[
								549,
								678
							],
							"untracked_files":
							[
								678,
								870
							]
						}
					},
					"AQAAAKYCAAAAAAAAZgMAAAAAAACNAAAACiAgVU5UUkFDS0VEOgogICAgZGpkYXRhbG9nL3J1bl90ZXN0cy5weQogICAgZGpkYXRhbG9nL3Rlc3RfZmFjdHMucHkKICAgIGRqZGF0YWxvZy90ZXN0X21vZGVscy5weQogICAgZGpkYXRhbG9nL3Rlc3RzL3Rlc3RfZmFtaWx5X2V4YW1wbGUucHkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAgAAAAAAANMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    djdatalog/README.md\n    djdatalog/models.py\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_query_hydration.py\n\n  UNTRACKED:\n    djdatalog/facts.py\n    djdatalog/query.py\n    djdatalog/rules.py\n    djdatalog/run_tests.py\n    djdatalog/test_facts.py\n    djdatalog/test_models.py\n    djdatalog/test_rules.py\n    djdatalog/tests/test_family_example.py\n\n  STAGED:\n    djdatalog/README.md\n    djdatalog/models.py\n    djdatalog/tests/__init__.py\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_q_objects.py\n    djdatalog/tests/test_query_hydration.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								1161,
								2928
							],
							"staged_files":
							[
								940,
								1161
							],
							"unstaged_files":
							[
								549,
								702
							],
							"untracked_files":
							[
								702,
								940
							]
						}
					},
					"AgAAAKYCAAAAAAAAlAMAAAAAAADAAAAACiAgVU5UUkFDS0VEOgogICAgZGpkYXRhbG9nL2ZhY3RzLnB5CiAgICBkamRhdGFsb2cvcnVuX3Rlc3RzLnB5CiAgICBkamRhdGFsb2cvdGVzdF9mYWN0cy5weQogICAgZGpkYXRhbG9nL3Rlc3RfbW9kZWxzLnB5CiAgICBkamRhdGFsb2cvdGVzdF9ydWxlcy5weQogICAgZGpkYXRhbG9nL3Rlc3RzL3Rlc3RfZmFtaWx5X2V4YW1wbGUucHkKJQIAAAAAAAC+AgAAAAAAAIEAAAAKICBVTlNUQUdFRDoKICAgIGRqZGF0YWxvZy9SRUFETUUubWQKICAgIGRqZGF0YWxvZy90ZXN0cy90ZXN0X2Jhc2ljX2Z1bmN0aW9uYWxpdHkucHkKICAgIGRqZGF0YWxvZy90ZXN0cy90ZXN0X3F1ZXJ5X2h5ZHJhdGlvbi5weQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAgAAAAAAAM8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `djdatalog`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n    djdatalog/README.md\n    djdatalog/models.py\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_query_hydration.py\n\n  UNTRACKED:\n    djdatalog/facts.py\n    djdatalog/query.py\n    djdatalog/rules.py\n    djdatalog/tests/run_tests.py\n    djdatalog/tests/test_facts.py\n    djdatalog/tests/test_family_example.py\n    djdatalog/tests/test_rules.py\n\n  STAGED:\n    djdatalog/README.md\n    djdatalog/models.py\n    djdatalog/tests/__init__.py\n    djdatalog/tests/test_basic_functionality.py\n    djdatalog/tests/test_q_objects.py\n    djdatalog/tests/test_query_hydration.py\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								65
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								77,
								548
							],
							"help":
							[
								1150,
								2917
							],
							"staged_files":
							[
								929,
								1150
							],
							"unstaged_files":
							[
								549,
								702
							],
							"untracked_files":
							[
								702,
								929
							]
						}
					},
					"AQAAAL4CAAAAAAAAoQMAAAAAAADuAAAACiAgVU5UUkFDS0VEOgogICAgZGpkYXRhbG9nL2ZhY3RzLnB5CiAgICBkamRhdGFsb2cvcXVlcnkucHkKICAgIGRqZGF0YWxvZy9ydWxlcy5weQogICAgZGpkYXRhbG9nL3J1bl90ZXN0cy5weQogICAgZGpkYXRhbG9nL3Rlc3RfZmFjdHMucHkKICAgIGRqZGF0YWxvZy90ZXN0X21vZGVscy5weQogICAgZGpkYXRhbG9nL3Rlc3RfcnVsZXMucHkKICAgIGRqZGF0YWxvZy90ZXN0cy90ZXN0X2ZhbWlseV9leGFtcGxlLnB5Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJAgAAAAAAAEkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"gs_new_content_and_regions",
					{
						"content": "\n  ROOT:    ~/Sync/kaiko/kaiko\n\n  BRANCH:  On branch `main`.\n  HEAD:    9b430f852 djdatalog: Add a hydrate parameter to query to hydrate the queries or just return the raw values\n           d339e6f56 CLAUDE.md update to avoid in-function imports\n           d268b7663 fleet: Add relation Pinned(User, Vessel) to know which vessels the user has pinned\n           f544f973d Add CLAUDE.md\n           061cdea7e djdatalog: Optimize queries by not fetching related objects at all, and do that at the end\n           ​ ⋮\n           90841e996 ​(staging)\n\n  UNSTAGED:\n  - djdatalog/README.md\n  - kaiko.sublime-workspace\n\n  ###################                   ###############\n  ## SELECTED FILE ##                   ## ALL FILES ##\n  ###################                   ###############\n\n  [o] open file                         [A] stage all unstaged and untracked files\n  [s] stage file                        [S] stage all unstaged files\n  [u] unstage file                      [U] unstage all staged files\n  [d] discard changes to file           [D] discard all unstaged changes\n  [i] skip/unskip file\n  [h] open file in browser\n\n  [l] diff file inline                  [f] diff all files\n  [e] diff file                         [F] diff all cached files\n\n  [space] to select multiple items\n  [ctrl-space] to clear selection\n\n  #############                         #############\n  ## ACTIONS ##                         ## STASHES ##\n  #############                         #############\n\n  [c] commit                            [t][a] apply stash\n  [C] commit, including unstaged        [t][p] pop stash\n  [m] amend previous commit             [o]    open stash\n  [p] push current branch               [t][c] create stash\n  [P] pull current branch               [t][u] create stash including untracked files\n                                        [t][g] create stash of staged changes only\n  [I] add .gitignore pattern            [t][d] drop stash\n\n  [M] launch external merge tool\n  [B] abort merge\n\n  ###########\n  ## OTHER ##\n  ###########\n\n  [O]         show most recent commit\n  [g]         show graph repo history\n  [G]         show overview of branches and tags\n  [?]         toggle this help menu\n  [tab]       transition to next dashboard\n  [shift-tab] transition to previous dashboard\n  [.]         move cursor to next file\n  [,]         move cursor to previous file\n\n-\n\n",
						"regions":
						{
							"branch_status":
							[
								43,
								60
							],
							"git_root":
							[
								12,
								30
							],
							"head":
							[
								72,
								543
							],
							"help":
							[
								609,
								2376
							],
							"unstaged_files":
							[
								544,
								609
							]
						}
					},
					"BAAAAKEDAAAAAAAAoQMAAAAAAADdAAAACiAgU1RBR0VEOgogICAgZGpkYXRhbG9nL1JFQURNRS5tZAogICAgZGpkYXRhbG9nL21vZGVscy5weQogICAgZGpkYXRhbG9nL3Rlc3RzL19faW5pdF9fLnB5CiAgICBkamRhdGFsb2cvdGVzdHMvdGVzdF9iYXNpY19mdW5jdGlvbmFsaXR5LnB5CiAgICBkamRhdGFsb2cvdGVzdHMvdGVzdF9xX29iamVjdHMucHkKICAgIGRqZGF0YWxvZy90ZXN0cy90ZXN0X3F1ZXJ5X2h5ZHJhdGlvbi5weQq+AgAAAAAAAL4CAAAAAAAA4wAAAAogIFVOVFJBQ0tFRDoKICAgIGRqZGF0YWxvZy9mYWN0cy5weQogICAgZGpkYXRhbG9nL3F1ZXJ5LnB5CiAgICBkamRhdGFsb2cvcnVsZXMucHkKICAgIGRqZGF0YWxvZy90ZXN0cy9ydW5fdGVzdHMucHkKICAgIGRqZGF0YWxvZy90ZXN0cy90ZXN0X2ZhY3RzLnB5CiAgICBkamRhdGFsb2cvdGVzdHMvdGVzdF9mYW1pbHlfZXhhbXBsZS5weQogICAgZGpkYXRhbG9nL3Rlc3RzL3Rlc3RfcnVsZXMucHkKJQIAAAAAAABmAgAAAAAAAJkAAAAKICBVTlNUQUdFRDoKICAgIGRqZGF0YWxvZy9SRUFETUUubWQKICAgIGRqZGF0YWxvZy9tb2RlbHMucHkKICAgIGRqZGF0YWxvZy90ZXN0cy90ZXN0X2Jhc2ljX2Z1bmN0aW9uYWxpdHkucHkKICAgIGRqZGF0YWxvZy90ZXN0cy90ZXN0X3F1ZXJ5X2h5ZHJhdGlvbi5weQorAAAAAAAAADwAAAAAAAAAFgAAAE9uIGJyYW5jaCBgZGpkYXRhbG9nYC4",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhAgAAAAAAAGECAAAAAAAAAAAAAADAbEA"
				]
			]
		},
		{
			"contents": "\"\"\"\nTest models for djdatalog - only loaded when DJDATALOG_TESTING is True.\nThese provide example Django models for testing the datalog functionality.\n\"\"\"\n\nfrom django.conf import settings\nfrom django.db import models\n\n\n# Only create models when in testing mode\nif getattr(settings, 'DJDATALOG_TESTING', False):\n    \n    class Person(models.Model):\n        \"\"\"Example Person model for family relationship tests.\"\"\"\n        name = models.CharField(max_length=100)\n        age = models.PositiveIntegerField(null=True, blank=True)\n        city = models.CharField(max_length=100, blank=True)\n        married = models.BooleanField(default=False)\n        retired = models.BooleanField(default=False)\n        \n        class Meta:\n            app_label = 'djdatalog'\n            \n        def __str__(self):\n            return self.name\n\n    \n    class Company(models.Model):\n        \"\"\"Example Company model for business relationship tests.\"\"\"\n        name = models.CharField(max_length=100)\n        active = models.BooleanField(default=True)\n        \n        class Meta:\n            app_label = 'djdatalog'\n            \n        def __str__(self):\n            return self.name\n\n    \n    class Employee(models.Model):\n        \"\"\"Example Employee model for organizational hierarchy tests.\"\"\"\n        person = models.OneToOneField(Person, on_delete=models.CASCADE)\n        company = models.ForeignKey(Company, on_delete=models.CASCADE)\n        position = models.CharField(max_length=100)\n        \n        class Meta:\n            app_label = 'djdatalog'\n            \n        def __str__(self):\n            return f\"{self.person.name} at {self.company.name}\"\n\nelse:\n    # When not in testing mode, create dummy classes to prevent import errors\n    class Person:\n        pass\n    \n    class Company:\n        pass\n        \n    class Employee:\n        pass",
			"file": "djdatalog/test_models.py",
			"file_size": 1840,
			"file_write_time": 133975020398791135,
			"settings":
			{
				"buffer_size": 1840,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/env python\n\"\"\"\nSimple test for Q object transformation logic without database.\n\"\"\"\n\nimport os\nimport django\nfrom django.conf import settings\n\n# Setup Django\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kaiko.settings')\ndjango.setup()\n\nfrom django.db.models import Q\nfrom djdatalog.models import _prefix_q_object\n\n\ndef test_q_object_prefixing():\n    \"\"\"Test the Q object prefixing functionality.\"\"\"\n    print(\"Testing Q object prefixing...\")\n    \n    try:\n        # Test 1: Simple Q object\n        print(\"\\nTest 1: Simple Q object\")\n        simple_q = Q(archived=False)\n        prefixed_q = _prefix_q_object(simple_q, \"object\")\n        \n        print(f\"Original Q: {simple_q}\")\n        print(f\"Prefixed Q: {prefixed_q}\")\n        \n        # Check that the field was prefixed\n        assert len(prefixed_q.children) == 1\n        field_name, value = prefixed_q.children[0]\n        assert field_name == \"object__archived\"\n        assert value == False\n        \n        # Test 2: Complex Q object with AND\n        print(\"\\nTest 2: Complex Q with AND\")\n        complex_q = Q(archived=False) & Q(name__icontains=\"test\")\n        prefixed_complex = _prefix_q_object(complex_q, \"subject\")\n        \n        print(f\"Original complex Q: {complex_q}\")\n        print(f\"Prefixed complex Q: {prefixed_complex}\")\n        \n        # Should have 2 children for the AND operation\n        assert len(prefixed_complex.children) == 2\n        \n        # Check first condition\n        field1, value1 = prefixed_complex.children[0]\n        assert field1 == \"subject__archived\"\n        assert value1 == False\n        \n        # Check second condition\n        field2, value2 = prefixed_complex.children[1]\n        assert field2 == \"subject__name__icontains\"\n        assert value2 == \"test\"\n        \n        # Test 3: Nested Q object with OR\n        print(\"\\nTest 3: Nested Q with OR\")\n        nested_q = Q(archived=False) | Q(name=\"special\")\n        prefixed_nested = _prefix_q_object(nested_q, \"object\")\n        \n        print(f\"Original nested Q: {nested_q}\")\n        print(f\"Prefixed nested Q: {prefixed_nested}\")\n        \n        # Check connector is preserved\n        assert prefixed_nested.connector == Q.OR\n        \n        # Check both conditions are prefixed\n        assert len(prefixed_nested.children) == 2\n        field1, value1 = prefixed_nested.children[0]\n        field2, value2 = prefixed_nested.children[1]\n        \n        assert field1 == \"object__archived\"\n        assert value1 == False\n        assert field2 == \"object__name\"\n        assert value2 == \"special\"\n        \n        print(\"\\n✅ All Q object prefixing tests passed!\")\n        \n    except Exception as e:\n        print(f\"\\n❌ Test failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n    \n    return True\n\n\ndef test_var_with_where():\n    \"\"\"Test that Var with where clause is created correctly.\"\"\"\n    print(\"\\nTesting Var with where clause...\")\n    \n    try:\n        from djdatalog.models import Var\n        \n        # Test creating a Var with Q constraint\n        q_constraint = Q(archived=False)\n        vessel_var = Var(\"vessel\", where=q_constraint)\n        \n        print(f\"Var with constraint: {vessel_var}\")\n        \n        # Check the Var has the constraint\n        assert vessel_var.name == \"vessel\"\n        assert vessel_var.where is not None\n        assert vessel_var.where == q_constraint\n        \n        # Test Var without constraint\n        simple_var = Var(\"vessel\")\n        print(f\"Var without constraint: {simple_var}\")\n        \n        assert simple_var.name == \"vessel\"  \n        assert simple_var.where is None\n        \n        print(\"✅ Var with where clause tests passed!\")\n        \n    except Exception as e:\n        print(f\"❌ Var test failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n    \n    return True\n\n\nif __name__ == \"__main__\":\n    success1 = test_q_object_prefixing()\n    success2 = test_var_with_where()\n    \n    if success1 and success2:\n        print(\"\\n🎉 All tests passed!\")\n        exit(0)\n    else:\n        print(\"\\n💥 Some tests failed!\")\n        exit(1)",
			"file": "test_q_transform.py",
			"file_size": 4149,
			"file_write_time": 133975010990749021,
			"settings":
			{
				"buffer_size": 4135,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/env python\n\"\"\"\nMinimal test script for djdatalog Q object constraints.\n\"\"\"\n\nimport os\nimport django\nfrom django.conf import settings\n\n# Setup Django\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kaiko.settings')\ndjango.setup()\n\nfrom django.db.models import Q\nfrom djdatalog.models import store_facts, Var, query\nfrom kaiko.accounts.models import User\nfrom kaiko.enterprise.models import Company\nfrom kaiko.fleet.models.models import Vessel\nfrom kaiko.fleet.models.permissions import HasAccess, MemberOf, Owns\n\n\ndef test_q_object_constraints():\n    \"\"\"Test Q object constraints in datalog queries.\"\"\"\n    print(\"Testing djdatalog Q object constraints...\")\n    \n    # Clean up any existing test data\n    User.objects.filter(email__startswith=\"test_q_\").delete()\n    Company.objects.filter(name__startswith=\"Test Q \").delete()\n    Vessel.objects.filter(name__startswith=\"Test Q Vessel\").delete()\n    \n    try:\n        # Create test data\n        print(\"Creating test data...\")\n        user = User.objects.create_user(email=\"test_q_user@test.com\", password=\"testpass123\")\n        company = Company.objects.create(name=\"Test Q Company\")\n        \n        # Create vessels - some archived, some not\n        vessel_active = Vessel.objects.create(\n            name=\"Test Q Vessel Active\", \n            owner=company, \n            archived=False\n        )\n        vessel_archived = Vessel.objects.create(\n            name=\"Test Q Vessel Archived\", \n            owner=company, \n            archived=True\n        )\n        \n        # Set up permissions - user has access through company membership\n        store_facts(\n            MemberOf(subject=user, object=company),\n            Owns(subject=company, object=vessel_active),\n            Owns(subject=company, object=vessel_archived)\n        )\n        \n        print(f\"Created vessels: active={vessel_active.id}, archived={vessel_archived.id}\")\n        \n        # Test 1: Query all vessels (no constraint)\n        print(\"\\nTest 1: All accessible vessels\")\n        all_vessel_ids = []\n        for result in query(HasAccess(user, Var(\"vessel\")), hydrate=False):\n            all_vessel_ids.append(result[\"vessel\"])\n        \n        print(f\"All vessel IDs: {all_vessel_ids}\")\n        assert vessel_active.id in all_vessel_ids, f\"Active vessel {vessel_active.id} should be accessible\"\n        assert vessel_archived.id in all_vessel_ids, f\"Archived vessel {vessel_archived.id} should be accessible\"\n        \n        # Test 2: Query only unarchived vessels\n        print(\"\\nTest 2: Only unarchived vessels\")\n        unarchived_vessel_ids = []\n        for result in query(HasAccess(user, Var(\"vessel\", where=Q(archived=False))), hydrate=False):\n            unarchived_vessel_ids.append(result[\"vessel\"])\n        \n        print(f\"Unarchived vessel IDs: {unarchived_vessel_ids}\")\n        assert vessel_active.id in unarchived_vessel_ids, f\"Active vessel {vessel_active.id} should be in unarchived results\"\n        assert vessel_archived.id not in unarchived_vessel_ids, f\"Archived vessel {vessel_archived.id} should NOT be in unarchived results\"\n        \n        # Test 3: Query only archived vessels\n        print(\"\\nTest 3: Only archived vessels\")\n        archived_vessel_ids = []\n        for result in query(HasAccess(user, Var(\"vessel\", where=Q(archived=True))), hydrate=False):\n            archived_vessel_ids.append(result[\"vessel\"])\n        \n        print(f\"Archived vessel IDs: {archived_vessel_ids}\")\n        assert vessel_active.id not in archived_vessel_ids, f\"Active vessel {vessel_active.id} should NOT be in archived results\"\n        assert vessel_archived.id in archived_vessel_ids, f\"Archived vessel {vessel_archived.id} should be in archived results\"\n        \n        # Test 4: Complex Q constraint\n        print(\"\\nTest 4: Complex Q constraint\")\n        complex_constraint = Q(archived=False) & Q(name__icontains=\"active\")\n        complex_vessel_ids = []\n        for result in query(HasAccess(user, Var(\"vessel\", where=complex_constraint)), hydrate=False):\n            complex_vessel_ids.append(result[\"vessel\"])\n        \n        print(f\"Complex constraint vessel IDs: {complex_vessel_ids}\")\n        assert vessel_active.id in complex_vessel_ids, f\"Active vessel {vessel_active.id} should match complex constraint\"\n        assert vessel_archived.id not in complex_vessel_ids, f\"Archived vessel {vessel_archived.id} should NOT match complex constraint\"\n        \n        print(\"\\n✅ All tests passed!\")\n        \n    except Exception as e:\n        print(f\"\\n❌ Test failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n    \n    finally:\n        # Clean up test data\n        print(\"\\nCleaning up test data...\")\n        User.objects.filter(email__startswith=\"test_q_\").delete()\n        Company.objects.filter(name__startswith=\"Test Q \").delete()\n        Vessel.objects.filter(name__startswith=\"Test Q Vessel\").delete()\n    \n    return True\n\n\nif __name__ == \"__main__\":\n    success = test_q_object_constraints()\n    exit(0 if success else 1)",
			"file": "test_q_objects.py",
			"file_size": 5036,
			"file_write_time": 133975010617675177,
			"settings":
			{
				"buffer_size": 5032,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from __future__ import annotations\n\nimport logging\nimport random\nimport re\nimport typing as t\nfrom collections.abc import Sequence\nfrom datetime import UTC, date, datetime\nfrom functools import cached_property\nfrom uuid import UUID\n\nimport recurrence\nfrom auditlog.models import AuditlogHistoryField\nfrom auditlog.registry import auditlog\nfrom dirtyfields import DirtyFieldsMixin\nfrom django.contrib.auth.models import AnonymousUser\nfrom django.contrib.postgres.indexes import GinIndex\nfrom django.core.validators import MinValueValidator, RegexValidator\nfrom django.db import models\nfrom django.db.models import Index, Max, Min, Q, TextChoices\nfrom django.db.models.constraints import CheckConstraint\nfrom django.db.models.expressions import Case, Value, When\nfrom django.db.models.functions import Coalesce\nfrom django.db.models.signals import m2m_changed, post_save, pre_delete, pre_save\nfrom django.dispatch import receiver\nfrom django.shortcuts import resolve_url\nfrom django.utils.html import format_html\nfrom django.utils.text import slugify\nfrom django.utils.timezone import now\nfrom django_countries.fields import Country, CountryField\nfrom typing_extensions import deprecated\n\nfrom kaiko.accounts.models import User, UserProfileState\nfrom kaiko.enterprise.models import Company\nfrom kaiko.eot.signals import post_eot\nfrom kaiko.fleet.schemas.module_config import VesselModuleConfig, VesselModuleConfigAdapter\nfrom kaiko.integration.automagi import KAIAnalysisMode, VesselCorrosionAnalysisSettingMixin\nfrom kaiko.saas.model_migrator.schemas import (\n    VesselModuleMigrationStatus,\n    VesselModuleMigrationStatusAdapter,\n)\nfrom kaiko.survey.checkpoints import CheckpointOwnerQuerySet\nfrom kaiko.survey.rating import RatingMixin\nfrom kaiko.utils import db\nfrom kaiko.utils.db.base import TextChoiceField\nfrom kaiko.utils.string import force_ascii, normalize_spaces\nfrom kaiko.utils.types import Unset\n\nfrom .validators import validate_current_year_or_earlier\n\nlogger = logging.getLogger(__name__)\n\nFIRST_DAY = 1\n\n\ndef of_vessel_ids(\n    self: db.QS,\n    vessel_ids: t.Sequence[UUID],\n    prefix: str = \"\",\n) -> db.QS:\n    return self.filter_with_prefix(prefix, Q(id__in=vessel_ids))\n\n\nclass AttachmentRole(models.TextChoices):\n    HEALTH_REPORT = \"health_report\"\n    STRUCTURAL_HEALTH_REPORT = \"structural_health_report\"\n    SAFETY_HEALTH_REPORT = \"safety_health_report\"\n\n\nclass VesselTypeQS(db.ArchivableQuerySet[\"VesselType\"], db.TrackedModelQS[\"VesselType\"]):\n    pass\n\n\nclass VesselType(db.NamedModel, db.TrackedModel, db.ArchivableModel):\n    class Meta:\n        constraints = [\n            models.UniqueConstraint(\n                fields=(\"name\",),\n                name=\"vessel_type_unique_name\",\n            )\n        ]\n\n    objects: VesselTypeQS = VesselTypeQS.as_manager()\n\n\nclass VesselQS(\n    CheckpointOwnerQuerySet[\"Vessel\"],\n    db.ArchivableQuerySet[\"Vessel\"],\n):\n    @t.override\n    def create(self, **kwargs):\n        if \"name\" in kwargs:\n            kwargs[\"name\"] = normalize_spaces(kwargs[\"name\"])\n        return super().create(**kwargs)\n\n    @t.override\n    def update(self, **kwargs) -> int:\n        # The name could an F, Case, or any sort of complex expression, so this will only work for\n        # str and Value.  For instance 'bulk_update' does a single update with Case.\n        if (name := kwargs.get(\"name\", Unset)) is not Unset:\n            match name:\n                case str():\n                    kwargs[\"name\"] = normalize_spaces(name)\n                case Value() as value:\n                    kwargs[\"name\"] = normalize_spaces(value.value)\n                case _:\n                    pass\n        return super().update(**kwargs)\n\n    @t.override\n    def bulk_create(\n        self,\n        objs,\n        batch_size: int | None = None,\n        ignore_conflicts: bool = False,\n        update_conflicts: bool | None = None,\n        update_fields: Sequence[str] | None = None,\n        unique_fields: Sequence[str] | None = None,\n    ):\n        def _iter_normalized_objs():\n            for obj in objs:\n                obj.name = normalize_spaces(obj.name)\n                set_vessel_slug(instance=obj)\n                yield obj\n\n        return super().bulk_create(\n            _iter_normalized_objs(),\n            batch_size,\n            ignore_conflicts,\n            update_conflicts,\n            update_fields,\n            unique_fields,\n        )\n\n    @t.override\n    def bulk_update(self, objs, fields: Sequence[str], batch_size: int | None = None):\n        def _iter_normalized_objs():\n            if \"name\" in fields:\n                for obj in objs:\n                    obj.name = normalize_spaces(obj.name)\n                    yield obj\n            else:\n                yield from objs\n\n        return super().bulk_update(_iter_normalized_objs(), fields=fields, batch_size=batch_size)\n\n    def unchartered(self):\n        return self.filter(archived=False, is_chartered=False)\n\n    def for_user(self, user: User):\n        return self.filter(user_relationships__user=user)\n\n    def annotate_checkpoint_owner_vessel(self: t.Self) -> t.Self:\n        return self.annotate(vessel_pk=models.F(\"pk\"))\n\n    def expired(self):\n        return self.filter(vessel_removal_date__lte=now().date())\n\n    def of_vessel_ids(self, vessel_ids):\n        return of_vessel_ids(self, vessel_ids)\n\n    def pinned(self, user: User, prefix: str = \"user_relationships\"):\n        \"\"\"Filter by the result of `pinned_query`.\"\"\"\n        return self.filter(self.pinned_query(user, prefix=prefix))\n\n    def pinned_query(self, user: User, prefix: str = \"user_relationships\"):\n        \"\"\"Returns a Query that you can use to filter objects that are\n        related to Vessels that are pinned depending on user settings\n        \"\"\"\n        if prefix and not prefix.endswith(\"__\"):\n            prefix += \"__\"\n\n        q = Q(**{f\"{prefix}user\": user})\n        if user.show_only_bookmarked_vessels:\n            q &= Q(**{f\"{prefix}pinned\": True})\n        return q\n\n    def invalidate_denormalized_data(self):\n        self.update(last_eot_date=now())\n\n    def update_denormalized_data(self, *, updated_when: datetime | None = None) -> int:\n        \"\"\"Updates the denormalized data of a bunch of vessels.\"\"\"\n        from kaiko.survey.models import Inspection\n        from kaiko.tree.models import Answer\n\n        updated_when = updated_when or now()\n\n        # Don't use 'exists' because we want to make a single query and catch the results for the\n        # other two queries, if needed.\n        vessels = {vessel.pk: vessel for vessel in self}\n        if not vessels:\n            return 0\n\n        DEFAULT_DATA = {\n            \"first_uploaded_at\": updated_when,\n            \"last_uploaded_at\": datetime(1970, 1, 1, tzinfo=UTC),\n            \"last_app_version\": \"1970.01.01.0000\",\n        }\n        inspections_data = {\n            row[\"vessel_id\"]: row\n            for row in Inspection.objects.filter(vessel__in=self)\n            .values(\"vessel_id\")\n            .annotate(\n                first_uploaded_at=Coalesce(\n                    Min(\"uploaded_at\"), Value(DEFAULT_DATA[\"first_uploaded_at\"])\n                ),\n                last_uploaded_at=Coalesce(\n                    Max(\"uploaded_at\"), Value(DEFAULT_DATA[\"last_uploaded_at\"])\n                ),\n                last_app_version=Coalesce(\n                    Max(\"app_version\"), Value(DEFAULT_DATA[\"last_app_version\"])\n                ),\n            )\n        }\n        answers_data = {\n            row[\"vessel_id\"]: row\n            for row in Answer.objects.filter(vessel__in=self)\n            .values(\"vessel_id\")\n            .annotate(\n                first_uploaded_at=Coalesce(\n                    Min(\"created_at\"), Value(DEFAULT_DATA[\"first_uploaded_at\"])\n                ),\n                last_uploaded_at=Coalesce(\n                    Max(\"created_at\"), Value(DEFAULT_DATA[\"last_uploaded_at\"])\n                ),\n                last_app_version=Coalesce(\n                    Max(\"app_version\"), Value(DEFAULT_DATA[\"last_app_version\"])\n                ),\n            )\n        }\n        for vessel_pk, vessel in vessels.items():\n            inspection_data = inspections_data.get(vessel_pk, DEFAULT_DATA)\n            answer_data = answers_data.get(vessel_pk, DEFAULT_DATA)\n            vessel.last_denormalized_at = updated_when\n            vessel.first_upload_date = min(\n                inspection_data[\"first_uploaded_at\"],\n                answer_data[\"first_uploaded_at\"],\n            )\n            vessel.last_upload_date = max(\n                inspection_data[\"last_uploaded_at\"],\n                answer_data[\"last_uploaded_at\"],\n            )\n            vessel.last_app_version = max(\n                inspection_data[\"last_app_version\"],\n                answer_data[\"last_app_version\"],\n            )\n        return self.model.objects.bulk_update(\n            vessels.values(),\n            [\n                \"first_upload_date\",\n                \"last_upload_date\",\n                \"last_app_version\",\n                \"last_denormalized_at\",\n            ],\n        )\n\n\nclass StandardRecurrence(models.TextChoices):\n    w_1 = \"1w\", \"Weekly\"\n    w_2 = \"2w\", \"Biweekly\"\n    m_1 = \"1m\", \"Monthly\"\n    m_3 = \"3m\", \"Quarterly\"\n    m_6 = \"6m\", \"Half a year\"\n    y_1 = \"1y\", \"Annually\"\n    y_2 = \"2y\", \"Every 2 years\"\n    y_3 = \"3y\", \"Every 3 years\"\n    y_5 = \"5y\", \"Every 5 years\"\n    y_10 = \"10y\", \"Every 10 years\"\n\n\nclass Resolution(models.IntegerChoices):\n    FHD = 1080, \"FHD 1080p\"\n    HD = 720, \"HD 720p\"\n    SD = 480, \"SD 480p\"\n    ORIGINAL = 0, \"No compression\"\n\n\nclass EmbeddedCameraConfig(models.TextChoices):\n    ENABLED = \"ENABLED\", \"Enabled\"\n    DISABLED = \"DISABLED\", \"Disabled\"\n    CONDITIONAL = \"CONDITIONAL\", \"Conditional\"\n\n\nclass Vessel(\n    DirtyFieldsMixin,\n    RatingMixin,\n    db.TrackedModel,\n    db.ArchivableModel,\n    db.Model,\n    VesselCorrosionAnalysisSettingMixin,\n):\n    owner = models.ForeignKey(  # type: ignore\n        Company,\n        models.CASCADE,\n        related_name=\"vessels\",\n    )\n\n    name = models.CharField(max_length=128)  # type: ignore\n    slug = models.SlugField(max_length=128, unique=True, blank=True)\n\n    flag: Country = CountryField(default=\"DE\")  # type: ignore\n    vessel_report_file = models.FileField(\n        upload_to=\"assessment/%Y/%m/%d/\",\n        blank=True,\n        null=True,\n    )\n    vessel_type = models.ForeignKey(\n        VesselType, on_delete=models.SET_NULL, null=True, default=None, blank=True\n    )\n    vessel_type_id: UUID\n    are_kai_features_enabled = models.BooleanField(\n        default=False,\n        verbose_name=\"KAI Sight and KAI Corrosion enabled\",\n        help_text=(\n            \"Enhanced pictures and corrosion analysis will be generated for each next upload in VHM. \"\n            \"⚠️ Do not forget to activate it in Question in level link and for Questions\"\n        ),\n    )\n    is_kai_summary_enabled = models.BooleanField(\n        default=False,\n        verbose_name=\"KAI Summary enabled\",\n        help_text=(\n            \"KAI Rating and KAI Summary will be generated for each next upload with a picture in VHM. \"\n            \"⚠️ No extra action is required\"\n        ),\n    )\n    allow_kai_debug_mode = models.BooleanField(\n        default=True,\n        verbose_name=\"Allow fake results with KAI features in debug mode\",\n        help_text=(\n            \"Create fake API endpoints for Enhancements, Ratings and other KAI features\"\n            \" when settings.DEBUG is True.\"\n        ),\n    )\n    _picture_prompt_every_n_inspections = models.PositiveSmallIntegerField(\n        blank=True,\n        null=True,\n        verbose_name=\"Picture prompt every n inspections\",\n        help_text=\"The number of inspections to do before the app indicates the user to take a picture.\",\n    )\n    # IMO number is a 7 digits numbers prefixed with \"IMO\".  See\n    # https://bit.ly/3jtZudY\n    imo_number = models.CharField(\n        max_length=7,\n        validators=[\n            RegexValidator(\n                re.compile(r\"\\d{7}\"),\n                message=\"The IMO number is a 7 digit number\",\n            )\n        ],\n        db_index=True,\n        unique=True,\n        null=True,\n        blank=True,\n        verbose_name=\"IMO Number\",\n        help_text=\"You should not change this value after it is first used.\",\n    )\n    use_embedded_camera = TextChoiceField(\n        EmbeddedCameraConfig, default=EmbeddedCameraConfig.CONDITIONAL\n    )\n    # The app reads this field and to know what max resolution of the pics\n    # should be used for this vessel\n    max_pic_resolution = models.IntegerField(\n        choices=Resolution.choices,\n        default=Resolution.FHD,\n        help_text=\"Max resolution used by the app to take pictures\",\n    )\n\n    # Video compression and resolution settings\n    max_video_resolution = models.PositiveSmallIntegerField(\n        choices=Resolution.choices,\n        default=Resolution.SD,\n        help_text=\"Max resolution used by the app to compress videos\",\n    )\n\n    harmonization_date = models.DateField(\n        default=date.today,\n        help_text=(\n            \"The date when the vessel became operational. \"\n            \"By default, this will be the creation date of the vessel.\"\n        ),\n    )\n\n    vessel_removal_date = models.DateField(\n        default=None,\n        null=True,\n        blank=True,\n        verbose_name=\"Expiration date\",\n        help_text=(\n            \"If set and the vessel is also archived, it will be removed \"\n            \"along with all the related data after the given date. \"\n            \"Once the vessels is being deleted it won't be possible to recover it.\"\n        ),\n    )\n\n    use_new_user_profiles = models.BooleanField(default=False)\n\n    # Fingings vessel settings\n    mandatory_findings_deadline = models.BooleanField(\n        default=False,\n        help_text=\"Check this for vessels that requires a deadline in their findings.\",\n    )\n    mandatory_findings_observations = models.BooleanField(\n        default=False,\n        help_text=\"Check this for vessels that requires an observation in their findings.\",\n    )\n\n    module_config_json = models.JSONField(\n        default=dict,\n        blank=True,\n        help_text=\"Centralized configuration for all vessel modules (CF, SIRE, TSI, etc.)\",\n    )\n\n    module_migration_status_json = models.JSONField(\n        default=dict,\n        blank=True,\n        help_text=\"Status of migration for all vessel modules.\",\n    )\n\n    # Yet another random setting. This one's about PSC checklist\n    # FIXME: put all settings into a JSON field\n    enable_psc = models.BooleanField(\n        default=False,\n        verbose_name=\"Enable PSC\",\n        help_text=(\n            \"When enabled this vessel will have 'Port checklist' module available \"\n            \"in dashboard and app.\"\n        ),\n    )\n\n    use_custom_assessment_guidance = models.BooleanField(\n        default=False,\n        help_text=\"When enabled this vessel will show custom guidance in answer's page.\",\n    )\n\n    # Denormalized data to avoid slow queries in the Vessel Admin page.\n    last_eot_date = models.DateTimeField(editable=False, default=now)\n    last_denormalized_at = models.DateTimeField(editable=False, default=now)\n    last_upload_date = models.DateTimeField(default=None, null=True, blank=True)\n    last_app_version = models.CharField(max_length=64, default=\"\", blank=True)\n    first_upload_date = models.DateTimeField(default=None, null=True, editable=False)\n\n    # A chartered vessel is a vessel managed simultaneously by two companies.\n    # The vessel with this flag set to True represents a reduced, read-only copy\n    # of another vessel.\n    is_chartered = models.BooleanField(default=False)\n\n    # Corrosion Analysis settings\n    corrosion_analysis_mode = db.TextChoiceField(\n        KAIAnalysisMode,\n        default=KAIAnalysisMode.COMPANY,\n        db_index=True,\n    )\n\n    # Vessel Particulars\n    call_sign = models.CharField(\n        max_length=6,\n        unique=True,\n        null=True,\n        blank=True,\n        validators=[\n            RegexValidator(\n                regex=r\"^[A-Z0-9]{4,6}$\",\n                message=\"Call sign must be 4 to 6 uppercase letters or digits.\",\n            )\n        ],\n    )\n    mmsi = models.CharField(\n        max_length=9,\n        unique=True,\n        null=True,\n        blank=True,\n        validators=[\n            RegexValidator(\n                regex=r\"^\\d{9}$\",\n                message=\"MMSI must be 9 digits.\",\n            )\n        ],\n        verbose_name=\"MMSI\",\n    )\n    gross_tonnage = models.PositiveIntegerField(\n        null=True,\n        blank=True,\n        verbose_name=\"Gross tonnage (mt)\",\n    )\n    deadweight_tonnage = models.PositiveIntegerField(\n        null=True,\n        blank=True,\n        verbose_name=\"Deadweight tonnage (mt)\",\n    )\n    year_of_build = models.PositiveIntegerField(\n        null=True,\n        blank=True,\n        validators=[\n            MinValueValidator(1800),\n            validate_current_year_or_earlier,\n            RegexValidator(\n                regex=r\"^\\d{4}$\",\n                message=\"Enter a four digit year.\",\n            ),\n        ],\n        verbose_name=\"Year of build\",\n    )\n    length = models.DecimalField(\n        max_digits=9,\n        decimal_places=2,\n        null=True,\n        blank=True,\n        verbose_name=\"Length (m)\",\n    )\n    breadth = models.DecimalField(\n        max_digits=9,\n        decimal_places=2,\n        null=True,\n        blank=True,\n        verbose_name=\"Breadth (m)\",\n    )\n    moulded_depth = models.DecimalField(\n        max_digits=9,\n        decimal_places=2,\n        null=True,\n        blank=True,\n        verbose_name=\"Moulded depth (m)\",\n    )\n\n    # Audit logs\n    history = AuditlogHistoryField(pk_indexable=False)\n\n    if t.TYPE_CHECKING:\n        from kaiko.accounts.models.user import UserProfileQS\n        from kaiko.company_forms.models import CompanyFormQS\n        from kaiko.eot.models import EOTSignalQS\n        from kaiko.permissions.models import VesselPermissionQS\n        from kaiko.risq.models.base import RisqVettingPeriodQS\n        from kaiko.sire2.models.periods import Sire2VettingPeriodQS\n        from kaiko.survey.models import InspectionQS, InspectionTourQS\n        from kaiko.tree.models import AnswerQS, AnswerTourQS, FindingQS, LevelQS, QuestionQS\n        from kaiko.vessel.models import SectionQS\n        from kaiko.vhl.models import VesselLayoutQS\n\n        from .vessel_particulars_job import VesselParticularsJob\n        from .vessel_particulars_result import VesselParticularsResult\n\n        particulars_result: VesselParticularsResult\n        particulars_job: VesselParticularsJob\n        staff: VesselStaffQS\n        company_forms: CompanyFormQS\n        tours: InspectionTourQS\n        inspections: InspectionQS\n        sections: SectionQS\n        findings: FindingQS\n        answers: AnswerQS\n        questions: QuestionQS\n        levels: LevelQS\n        answer_tours: AnswerTourQS\n        profiles: UserProfileQS\n        permissions: VesselPermissionQS\n        risqvettingperiod_set: RisqVettingPeriodQS\n        layouts: VesselLayoutQS\n        sire2_vetting_periods: Sire2VettingPeriodQS\n        user_relationships: UserVesselRelationshipQS\n        eot_signals: EOTSignalQS\n\n    objects: VesselQS = VesselQS.as_manager()\n\n    class Meta:\n        ordering = (\"name\",)\n        indexes = [\n            Index(\n                fields=(\"id\",),\n                condition=Q(archived=False),\n                name=\"%(app_label)s_vessel_not_archived_idx\",\n            ),\n            Index(\n                fields=(\"id\",),\n                condition=Q(archived=True),\n                name=\"%(app_label)s_vessel_archived_idx\",\n            ),\n            GinIndex(\n                fields=(\"module_config_json\",),\n                name=\"%(app_label)s_vessel_module_enabled\",\n                opclasses=[\"jsonb_path_ops\"],\n                # NB: We expect the module_config_json not to be updated very often but read much\n                # more.\n                fastupdate=False,\n            ),\n        ]\n        constraints = [\n            CheckConstraint(\n                check=Q(max_pic_resolution__in=Resolution.values),\n                name=\"max_pic_resolution_choices\",\n            ),\n            models.UniqueConstraint(fields=[\"owner\", \"name\"], name=\"unique_company_vessel_name\"),\n        ]\n\n    def __str__(self) -> str:\n        return self.name\n\n    def get_absolute_url(self, _name=\"vessel_structural\", **kwargs):\n        return resolve_url(_name, vessel_slug=self.slug, **kwargs)\n\n    def is_crew(self, user):\n        return self.staff.filter(user=user).crew().exists()\n\n    def flag_icon(self):\n        return format_html(\n            '<i title=\"{name}\" class=\"{flag}\"></i>',\n            name=self.flag.name,\n            flag=self.flag.flag_css,\n        )\n\n    flag_icon.short_description = \"Flag\"  # type: ignore\n\n    def owned_by(self, user: User):\n        return user in self.owner.members.all()\n\n    @property\n    def module_config(self) -> VesselModuleConfig:\n        return VesselModuleConfigAdapter.validate_python(self.module_config_json)\n\n    @module_config.setter\n    def module_config(self, obj):\n        self.module_config_json = VesselModuleConfigAdapter.dump_python(obj, mode=\"json\")\n\n    @property\n    def module_migration_status(self) -> VesselModuleMigrationStatus:\n        return VesselModuleMigrationStatusAdapter.validate_python(self.module_migration_status_json)\n\n    @module_migration_status.setter\n    def module_migration_status(self, obj):\n        self.module_migration_status_json = VesselModuleMigrationStatusAdapter.dump_python(\n            obj, mode=\"json\"\n        )\n\n    @property\n    def users(self) -> t.AbstractSet[User]:\n        \"\"\"The users related to the vessel, either directly or by the company.\"\"\"\n        return set(\n            UserVesselRelationship.objects.for_vessel(self)\n            .select_related(\"user\")\n            .mapped(lambda rel: rel.user)\n        )\n\n    @property\n    def picture_prompt_every_n_inspections(self):\n        value = (\n            self._picture_prompt_every_n_inspections\n            or self.owner.picture_prompt_every_n_inspections\n        )\n        return value or 25\n\n    @cached_property\n    def recurrences(self) -> dict[StandardRecurrence, recurrence.Recurrence]:\n        return {\n            StandardRecurrence.w_1: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.WEEKLY, byday=recurrence.MONDAY)],\n                dtstart=self.harmonization_datetime,\n            ),\n            StandardRecurrence.w_2: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.WEEKLY, byday=recurrence.MONDAY, interval=2)],\n                dtstart=self.harmonization_datetime,\n            ),\n            StandardRecurrence.m_1: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.MONTHLY, bymonthday=FIRST_DAY)],\n                dtstart=self.harmonization_datetime,\n            ),\n            StandardRecurrence.m_3: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.MONTHLY, interval=3, bymonthday=FIRST_DAY)],\n                dtstart=self.harmonization_datetime,\n            ),\n            StandardRecurrence.m_6: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.MONTHLY, interval=6, bymonthday=FIRST_DAY)],\n                dtstart=self.harmonization_datetime,\n            ),\n            StandardRecurrence.y_1: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.YEARLY)],\n                dtstart=self.harmonization_datetime,\n            ),\n            StandardRecurrence.y_2: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.YEARLY, interval=2)],\n                dtstart=self.harmonization_datetime,\n            ),\n            StandardRecurrence.y_3: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.YEARLY, interval=3)],\n                dtstart=self.harmonization_datetime,\n            ),\n            StandardRecurrence.y_5: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.YEARLY, interval=5)],\n                dtstart=self.harmonization_datetime,\n            ),\n            StandardRecurrence.y_10: recurrence.Recurrence(\n                rrules=[recurrence.Rule(recurrence.YEARLY, interval=10)],\n                dtstart=self.harmonization_datetime,\n            ),\n        }\n\n    @property\n    def harmonization_datetime(self) -> datetime:\n        year, month, day, *_ = self.harmonization_date.timetuple()\n        return datetime(year, month, day).replace(tzinfo=UTC)\n\n    def synchronize_recurrence(\n        self,\n        recurrence: recurrence.Recurrence | None,\n    ) -> recurrence.Recurrence | None:\n        \"\"\"Force the DTSTART of the recurrence to be the vessel's harmonization\n        date (in UTC).\n\n        If the `recurrence` has no RRULE, return None.\n\n        \"\"\"\n        # When in the admin you remove all rules of a recurrence it saves it\n        # as non-null but with no rules, we replace that here with a None.\n        #\n        # If you want to make a recurrence not produce more occurences any more\n        # then set a DTEND\n        if recurrence and recurrence.rrules == []:\n            recurrence = None\n        if recurrence:\n            recurrence.dtstart = self.harmonization_datetime\n        return recurrence\n\n    @t.override\n    def save(\n        self, *args, force_insert=False, force_update=False, using=None, update_fields=None\n    ) -> None:\n        self.name = normalize_spaces(self.name)\n        return super().save(\n            *args,\n            force_insert=force_insert,\n            force_update=force_update,\n            using=using,\n            update_fields=update_fields,\n        )\n\n\n@receiver(pre_save, sender=Vessel)\ndef set_vessel_slug(instance: Vessel, **kwargs):\n    if not instance.slug:\n        slugified_name = slugify(force_ascii(instance.name))\n        instance.slug = (\n            slugified_name\n            if not Vessel.objects.filter(slug=slugified_name).exists()\n            else slugified_name[:126] + str(random.randint(1, 99))\n        )\n\n\nclass VesselPosition(db.Model):\n    name = models.CharField(max_length=128, unique=True)\n    is_crew = models.BooleanField(db_index=True)\n\n    class Meta:\n        ordering = (\"is_crew\", \"name\")\n        indexes = [\n            models.Index(\n                fields=ordering,\n                name=\"vessel_position_ordering_idx\",\n            )\n        ]\n\n    def __str__(self):\n        if self.is_crew:\n            return f\"{self.name} (crew)\"\n        else:\n            return f\"{self.name} (shore)\"\n\n\n# NB; there's a Role in the 'permissions' app, but it has more values it's only\n# applies to the VesselPermission, which is likely to be removed at some point.\nclass VesselRole(TextChoices):\n    KAIKO = \"kaiko\"\n    SHORE = \"shore\"\n    CREW = \"crew\"\n\n\nclass VesselStaffQS(db.QuerySet[\"VesselStaff\"]):\n    def crew(self):\n        return self.filter(role=VesselRole.CREW).prefetch_related(\"user\")\n\n    def exclude_crew(self):\n        return self.exclude(role=VesselRole.CREW).prefetch_related(\"user\")\n\n    def active_crew(self):\n        return self.crew().filter(user__profiles__state=UserProfileState.ACTIVE).distinct()\n\n\nclass VesselStaff(db.Model):\n    user_id: UUID\n    user = models.ForeignKey(User, models.CASCADE, related_name=\"staff_of\")\n    vessel_id: UUID\n    vessel = models.ForeignKey(Vessel, models.CASCADE, related_name=\"staff\")\n\n    _position = models.ForeignKey(VesselPosition, models.CASCADE, related_name=\"staff\", null=True)  # type: ignore\n    role = db.TextChoiceField(VesselRole)\n\n    objects: VesselStaffQS = VesselStaffQS.as_manager()\n\n    if t.TYPE_CHECKING:\n\n        @deprecated(\"position for staff is deprecated\")\n        @property\n        def _position(self) -> VesselPosition | None: ...\n\n    class Meta:\n        unique_together = (\"vessel\", \"user\")\n\n    def __str__(self):\n        return f\"{self.user} is {self.role!s} of {self.vessel}\"\n\n    def save(self, **kwargs):\n        super().save(**kwargs)\n        UserVesselRelationship.objects.get_or_create(user=self.user, vessel=self.vessel)\n\n\ndef user_has_access_to_vessel_id(user: User, vessel_id: UUID):\n    return UserVesselRelationship.objects.for_user(user).filter(vessel_id=vessel_id).exists()\n\n\nclass UserVesselRelationshipQS(db.QuerySet):\n    def unarchived(self):\n        return self.filter(vessel__archived=False)\n\n    def toggle_pin(self):\n        return self.update(\n            pinned=Case(\n                When(pinned=True, then=Value(False)),\n                When(pinned=False, then=Value(True)),\n            ),\n            updated_at=models.functions.Now(),\n        )\n\n    def set_pinned(self, pinned: bool):\n        return self.update(\n            pinned=pinned,\n            updated_at=models.functions.Now(),\n        )\n\n    def get_or_create(self, defaults=None, **kwargs):\n        rel, created = super().get_or_create(defaults, **kwargs)\n        if created:\n            # Add settings for the vessel in user notifications\n            rel.user.settings.setdefault(\"notifications\", {}).update(\n                rel.default_notifications_setting()\n            )\n            rel.user.save()\n\n    def vessel_ids(self):\n        return self.values_list(\"vessel_id\", flat=True)\n\n    def for_user(self, user: AnonymousUser | User):\n        if user.is_authenticated:\n            return self.filter(user=user)\n        else:\n            return self.none()\n\n    def for_vessel(self, vessel: Vessel):\n        return self.filter(vessel=vessel)\n\n    def pinned(self):\n        return self.filter(pinned=True)\n\n    def get_user_selection(self, user: User):\n        \"\"\"Returns the selection made by user.\n\n        If the user has some vessels pinned, only those are returned.  Otherwise\n        all vessel relations are returned.  This costs a query to decide which\n        query set to return.\n\n        \"\"\"\n        qs = self.for_user(user)\n        if user.show_only_bookmarked_vessels:\n            return qs.pinned() or qs\n        else:\n            return qs\n\n\nclass UserVesselRelationship(db.Model):\n    \"\"\"The basic relation between user and vessels.\n\n    Every time a VesselStaff is saved this model will create (if necessary) a\n    tuple in the database.\n\n    When an User gets added/removed from a Company saves, we generate/update a\n    tuple in this table for each vessel in it companies.\n\n    \"\"\"\n\n    user = models.ForeignKey(\n        User,\n        models.CASCADE,\n        related_name=\"vessel_relationships\",\n    )\n    vessel = models.ForeignKey(\n        Vessel,\n        models.CASCADE,\n        related_name=\"user_relationships\",\n    )\n    pinned = models.BooleanField(\n        default=False,\n        help_text=\"The user pinned this vessel.\",\n    )\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        unique_together = (\"vessel\", \"user\")\n\n    objects: UserVesselRelationshipQS = UserVesselRelationshipQS.as_manager()\n\n    def default_notifications_setting(self):\n        \"\"\"Get notification settings for this user vessel relation.\"\"\"\n        from kaiko.notifications.models import Notification, NotificationScope\n\n        key = str(self.vessel.id)\n        vessel_settings = {\"use_global\": True, \"mute\": False}\n        for entry in Notification.kinds(scope=NotificationScope.VESSEL):\n            vessel_settings[entry.setting_id] = entry.setting_default_value\n        return {key: vessel_settings}\n\n\n@receiver(m2m_changed, sender=Company.members.through)\ndef _update_users_vessel_pin_rel(sender, instance, action, pk_set, **kwargs):\n    users = User.objects.filter(id__in=pk_set)\n    if action == \"pre_add\":\n        # TODO: Move this to a celery task.  Try to use bulk_create if possible\n        # or document why it isn't.\n        for user in users:\n            for vessel in instance.vessels.all():\n                UserVesselRelationship.objects.get_or_create(\n                    user=user,\n                    vessel=vessel,\n                    defaults={\"updated_at\": models.functions.Now()},\n                )\n    elif action == \"pre_remove\":\n        users_staff = VesselStaff.objects.filter(user__in=users)\n        for user in users:\n            for vessel in instance.vessels.all():\n                # Only remove pins if the user is not part of vessel staff\n                if not users_staff.filter(user=user, vessel=vessel):\n                    UserVesselRelationship.objects.filter(\n                        user=user,\n                        vessel=vessel,\n                    ).delete()\n\n\n@receiver(post_save, sender=Vessel)\ndef _update_vessel_user_rel(sender, instance, update_fields, **kwargs):\n    # Purpose: Update the user-vessel relations when the owner of the vessel changes.\n    if not update_fields or \"owner\" in update_fields:\n        members = instance.owner.members.all()\n        rels = [UserVesselRelationship(user=user, vessel=instance) for user in members]\n        UserVesselRelationship.objects.bulk_create(\n            rels,\n            ignore_conflicts=True,\n            unique_fields=(\"user\", \"vessel\"),\n        )\n\n        staffs = VesselStaff.objects.filter(vessel=instance)\n        with_staff = User.objects.filter(staff_of__in=staffs)\n        to_remove = User.objects.exclude(id__in=members | with_staff)\n        UserVesselRelationship.objects.filter(user__in=to_remove, vessel=instance).delete()\n\n\n@receiver(post_save, sender=VesselStaff)\ndef _add_user_vessel_relationship(sender, instance: VesselStaff, **kwargs):\n    UserVesselRelationship.objects.get_or_create(\n        user=instance.user,\n        vessel=instance.vessel,\n        defaults={\"updated_at\": models.functions.Now()},\n    )\n\n\n@receiver(pre_delete, sender=VesselStaff)\ndef _maybe_delete_user_vessel_relationship(\n    sender,\n    instance: VesselStaff,\n    **kwargs,\n):\n    user = instance.user\n    vessel: Vessel = instance.vessel\n    owner: Company = vessel.owner\n    if not owner.members.filter(id=user.id):\n        UserVesselRelationship.objects.filter(user=user, vessel=vessel).delete()\n\n\n@receiver(pre_delete, sender=UserVesselRelationship)\ndef _delete_user_vessel_notifications_settings(\n    sender,\n    instance: UserVesselRelationship,\n    **kwargs,\n):\n    \"\"\"Delete notifications for this relationship in user\"\"\"\n    user = instance.user\n    vessel = str(instance.vessel.id)\n    res = user.settings.get(\"notifications\", {}).pop(vessel, None)\n    if res is not None:\n        user.save()\n\n\n@receiver(post_eot)\ndef invalidate_denormalized_data(\n    inspection_tours,\n    answer_tours,\n    **kwargs,\n):\n    pks = {tour.vessel_id for tour in inspection_tours} | {tour.vessel_id for tour in answer_tours}\n    Vessel.objects.filter(pk__in=pks).invalidate_denormalized_data()\n\n\n# Audit logs for app settings\nauditlog.register(\n    Vessel,\n    include_fields=[\n        \"max_pic_resolution\",\n        \"_picture_prompt_every_n_inspections\",\n        \"max_video_resolution\",\n    ],\n)\n",
			"file": "kaiko/fleet/models/models.py",
			"file_size": 34893,
			"file_write_time": 133972961161692820,
			"settings":
			{
				"buffer_size": 34885,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import logging\nfrom collections.abc import Callable, Container, Sequence\nfrom contextlib import ExitStack, contextmanager\nfrom datetime import date, datetime\nfrom typing import TYPE_CHECKING, Any, ClassVar, Generic, Literal, Self, TypeVar, overload\nfrom uuid import UUID\n\nfrom django.contrib.postgres.fields import ArrayField\nfrom django.contrib.postgres.indexes import GinIndex\nfrom django.db import connections, models\nfrom django.db.models import PositiveIntegerField, Subquery\nfrom django.urls import reverse\nfrom recurrence.fields import RecurrenceField as BaseRecurrenceField\nfrom uuid6 import uuid7\n\nfrom .fields import OneToOneField\nfrom .functions import ArrayConcat\n\nSHORT_STR_LENGTH = LABEL_LENGTH = TWEET_LENGTH = 256\nMAX_LENGTH = 4096\n\nTChoices = TypeVar(\"TChoices\", bound=models.TextChoices)\n\nlogger = logging.getLogger(__name__)\n\n\nclass RecurrenceField(BaseRecurrenceField):\n    def get_prep_value(self, value):\n        \"\"\"Empty RRuleSet should always be None.\"\"\"\n        value = super().get_prep_value(value)\n        return value or None if self.null else value\n\n\ndef get_max_length(obj: type[models.TextChoices]):\n    \"\"\"Computes the max_length of a TextChoices.\"\"\"\n    return max(len(value) for value, _display_name in obj.choices)\n\n\ndef TextChoiceField(obj: type[TChoices], max_length=None, **kwargs) -> models.CharField[TChoices]:\n    \"A simple alias to CharField for selections.\"\n    return models.CharField(  # type: ignore\n        choices=obj.choices,\n        max_length=max_length or get_max_length(obj),\n        null=False,\n        **kwargs,\n    )\n\n\ndef TextChoiceFieldOptional(\n    obj: type[TChoices], max_length=None, **kwargs\n) -> models.CharField[TChoices | None]:\n    \"A simple alias to CharField for selections.\"\n    return models.CharField(  # type: ignore\n        choices=obj.choices,\n        max_length=max_length or get_max_length(obj),\n        null=True,\n        **kwargs,\n    )\n\n\nQS = TypeVar(\"QS\", bound=\"QuerySet\")\nM = TypeVar(\"M\", bound=models.Model)\nT = TypeVar(\"T\")\n\n\nclass QuerySet(models.QuerySet[M], Generic[M]):\n    # IMPORTANT: This QuerySet MUST NOT contain code specific to the definition\n    # of 'Model' below.  It MUST be applicable to Django models that don't\n    # inherit from 'kaiko.utils.db.Model'.\n\n    model: type[M]\n\n    def get_pg_sql(self) -> str:\n        \"\"\"Get the raw postgres SQL query.\n\n        This is better that calling `str(qs.query)`.  It will properly inline\n        the params in the query and you will be able to run it unchanged with\n        psql.\n\n        \"\"\"\n        query, params = self.query.sql_with_params()\n        conn = connections[self.db]\n        result = conn.cursor().mogrify(query, params)\n        if isinstance(result, bytes):\n            return result.decode(\"utf-8\")\n        else:\n            assert isinstance(result, str)\n            return result\n\n    def first(self, *args, **kwargs) -> M | None:\n        if args or kwargs:\n            return self.filter(*args, **kwargs).first()\n        else:\n            return super().first()\n\n    def last(self, *args, **kwargs) -> M | None:\n        if args or kwargs:\n            return self.filter(*args, **kwargs).last()\n        else:\n            return super().last()\n\n    def filter_with_prefix(self, prefix: str, pred: models.Q):\n        \"\"\"Apply a filter based on prefixed predicate.\n\n        .. seealso:: `prefix_condition`:func:.\n\n        \"\"\"\n        return self.filter(prefix_condition(prefix, pred))\n\n    def load(self, instance: int | str | UUID | M | None) -> M | None:\n        \"\"\"Load the `instance` by UUID if needed.\"\"\"\n        if instance is None:\n            return None\n        if isinstance(instance, self.model):\n            return instance\n        else:\n            return self.first(id=instance)\n\n    def picking(self, instance: int | UUID | M):\n        \"\"\"Return a QS that selects the given instance or id.\n\n        This is useful in some situations where you have implemented logic\n        within QuerySet annotations and to keep it DRY you might just do::\n\n           Model.objects.picking(id).annotate_with_my_logic().first()\n\n        \"\"\"\n        if isinstance(instance, self.model):\n            return self.filter(pk=instance.pk)\n        else:\n            return self.filter(pk=instance)\n\n    def clone_instances(\n        self,\n        instance: int | UUID | M,\n        *,\n        replacements: dict[str, Any] | None = None,\n        perform_save: bool = True,\n        ignore_fields: Container[str] | None = None,\n    ) -> M | None:\n        \"\"\"Creates a copy of `instance` replacing several of its attributes.\n\n        Only basic provisions are taken for relations.  We don't copy reversed\n        related fields, not many to many fields.\n\n        If `perform_save` is False, we don't save the instance to the DB.\n\n        \"\"\"\n        replacements = replacements or {}\n        source = self.load(instance=instance)\n        if source is None:\n            return None\n        cls = type(source)\n        kwargs = {\n            attr.name: getattr(source, attr.name)\n            for attr in source._meta.fields\n            if attr.name != \"id\"\n            if not ignore_fields or attr.name not in ignore_fields\n            if not isinstance(attr, models.ManyToManyField)\n        }\n        # Avoid errors trying to set a pk or an id while cloning.\n        replacements.pop(\"id\", None)\n        replacements.pop(\"pk\", None)\n        kwargs.update(replacements)\n        new_instance = cls(**kwargs)\n        if perform_save:\n            new_instance.save()\n        return new_instance\n\n    def mapped(self, fn: Callable[[M], T]) -> list[T]:\n        \"\"\"Performs a map from the matched objects.\"\"\"\n        return [fn(obj) for obj in self]\n\n    # fmt: off\n    @overload\n    def pks(self, *, stringify: Literal[True] = True) -> list[str]:\n        ...\n\n    @overload\n    def pks(self, *, stringify: Literal[False] = False) -> list[int | str | UUID]:\n        ...\n\n    # fmt: on\n\n    def pks(self, *, stringify: bool = True):\n        \"\"\"Return the list of stringified(or not) primary keys.\"\"\"\n        if stringify:\n            return self.mapped(lambda instance: str(instance.pk))\n        else:\n            return self.mapped(lambda instance: instance.pk)\n\n    if TYPE_CHECKING:\n\n        @classmethod\n        def as_manager(cls: type[Self]) -> Self: ...\n\n\nclass ClonableModel(models.Model):\n    class Meta:\n        abstract = True\n\n    objects: ClassVar[QS] = QuerySet.as_manager()  # type: ignore\n\n    def clone(\n        self: Self,\n        *,\n        replacements: dict[str, Any] | None = None,\n        perform_save: bool = True,\n        ignore_fields: Container[str] | None = None,\n    ) -> Self:\n        \"\"\"Return a clone with some attributes replaced.\n\n        If `perform_save` is False, don't save the clone to the DB.\n\n        \"\"\"\n        clone = type(self).objects.clone_instances(\n            self,\n            replacements=replacements,\n            perform_save=perform_save,\n            ignore_fields=ignore_fields,\n        )\n        assert clone, \"Self cloning failed\"\n        return clone\n\n\nclass Model(ClonableModel):\n    id = models.UUIDField(primary_key=True, default=uuid7, editable=False)\n\n    objects: ClassVar[QS] = QuerySet.as_manager()  # type: ignore\n\n    if TYPE_CHECKING:\n        pk: UUID\n\n    class Meta:\n        abstract = True\n\n    @property\n    def get_admin_url(self) -> str:\n        \"\"\"Return the admin URL for this object.\"\"\"\n        return reverse(\n            f\"admin:{self._meta.app_label}_{self._meta.model_name}_change\",\n            args=[self.id],\n        )\n\n\nSM = TypeVar(\"SM\", bound=\"SingletonModel\")\n_SINGLETON_PK = 1\n\n\nclass SingletonModel(models.Model):\n    \"\"\"A model for an object that has a single instance.\"\"\"\n\n    class Meta:\n        abstract = True\n\n    def save(self, *args, **kwargs):\n        self.pk = _SINGLETON_PK\n        return super().save(*args, **kwargs)\n\n    @classmethod\n    def load(cls: type[SM], **defaults) -> SM:\n        \"\"\"Load or create the single instance of the model.\n\n        If the object does not exists, use the `defaults` to create the object.\n        If the object already exists, ignore the `defaults`.\n\n        \"\"\"\n        obj, _ = cls.objects.get_or_create(pk=_SINGLETON_PK, defaults=defaults)\n        return obj\n\n\nTM = TypeVar(\"TM\", bound=\"TrackedModel\")\n\n\nclass TrackedModelQS(QuerySet[TM]):\n    def created_after(self, since: datetime | date):\n        \"\"\"Return items created after (``gt``) the given date/datetime.\"\"\"\n        if not isinstance(since, datetime):\n            return self.filter(created_at__date__gt=since)\n        return self.filter(created_at__gt=since)\n\n    def created_since(self, since: datetime | date):\n        \"\"\"Return items created since (``gte``) the given date/datetime.\"\"\"\n        if not isinstance(since, datetime):\n            return self.filter(created_at__date__gte=since)\n        return self.filter(created_at__gte=since)\n\n    def created_before(self, until: datetime | date):\n        \"\"\"Return items created before (``lt``) the given date/datetime.\"\"\"\n        if not isinstance(until, datetime):\n            return self.filter(created_at__date__lt=until)\n        return self.filter(created_at__lt=until)\n\n    def created_until(self, until: datetime | date):\n        \"\"\"Return items created until (``lte``) the given date/datetime.\"\"\"\n        if not isinstance(until, datetime):\n            return self.filter(created_at__date__lte=until)\n        return self.filter(created_at__lte=until)\n\n    def updated_before(self, since: datetime | date):\n        \"\"\"Return items updated before (``lt``) the given date/datetime.\"\"\"\n        if not isinstance(since, datetime):\n            return self.filter(updated_at__date__lt=since)\n        return self.filter(updated_at__lt=since)\n\n    def updated_since(self, since: datetime | date):\n        \"\"\"Return items updated since (``lte``) the given date/datetime.\"\"\"\n        if not isinstance(since, datetime):\n            return self.filter(updated_at__date__lte=since)\n        return self.filter(updated_at__lte=since)\n\n    def updated_after(self, until: datetime | date):\n        \"\"\"Return items updated after (``gt``) the given date/datetime.\"\"\"\n        if not isinstance(until, datetime):\n            return self.filter(updated_at__date__gt=until)\n        return self.filter(updated_at__gt=until)\n\n    def updated_until(self, until: datetime | date):\n        \"\"\"Return items updated until (``gte``) the given date/datetime.\"\"\"\n        if not isinstance(until, datetime):\n            return self.filter(updated_at__date__gte=until)\n        return self.filter(updated_at__gte=until)\n\n\nclass TrackedModel(models.Model):\n    \"\"\"Model that tracks creation and update time.\"\"\"\n\n    class Meta:\n        abstract = True\n\n    created_at = models.DateTimeField(\n        verbose_name=\"Creation date\",\n        auto_now_add=True,\n        db_index=True,\n    )\n    updated_at = models.DateTimeField(\n        verbose_name=\"Last modification date\",\n        auto_now=True,\n        db_index=True,\n    )\n\n\nAM = TypeVar(\"AM\", bound=\"ArchivableModel\")\n\n\nclass ArchivableQuerySet(QuerySet[AM], Generic[AM]):\n    def toggle_archived(self) -> int:\n        return self.update(\n            archived=models.Case(\n                models.When(archived=True, then=models.Value(False)),\n                models.When(archived=False, then=models.Value(True)),\n            ),\n        )\n\n    def set_archived(self) -> int:\n        return self.update(archived=True)\n\n    def set_unarchived(self) -> int:\n        return self.update(archived=False)\n\n    def archived(self):\n        return self.filter(archived=True)\n\n    def unarchived(self):\n        return self.filter(archived=False)\n\n\nclass ArchivableModel(models.Model):\n    archived = models.BooleanField(\n        default=False,\n        verbose_name=\"Archived\",\n        help_text=\"Set this to mark the object as archived.\",\n    )\n\n    class Meta:\n        abstract = True\n\n    def set_archived(self, *, perform_save: bool = True):\n        self.archived = True\n        if perform_save:\n            self.save(update_fields=(\"archived\",))\n\n    def set_unarchived(self, *, perform_save: bool = True):\n        self.archived = False\n        if perform_save:\n            self.save(update_fields=(\"archived\",))\n\n\nTM = TypeVar(\"TM\", bound=\"TaggedModel\")\n\n\nclass TaggedQS(QuerySet[TM]):\n    def without_tags(self, tags: Sequence[str]):\n        \"\"\"Filter by exclusion tags.\n\n        If you pass no tags, return the same query set unchanged.\n\n        Otherwise return a query set that yields instance that don't contain any\n        of the given tags.\n\n        \"\"\"\n        if not tags:\n            return self\n        return self.exclude(tags__contains=tags)\n\n    def untagged(self, *tags: str):\n        return self.without_tags(tags)\n\n    def with_tags(\n        self,\n        tags: Sequence[str],\n        *,\n        match_kind: Literal[\"all\", \"any\", \"exact\"] = \"any\",\n    ):\n        \"\"\"Filter by tags.\n\n        If `match_kind` is 'any', filter by instances which have any of the\n        given `tags`.  If `match_kind` is 'all', filter by instances which\n        have all `tags`.  If `match_kind` is 'exact', filter by instances\n        which have exactly those `tags` and no others.\n\n        If you pass no tags, `match_kind` is ignored and find instances without\n        tags.\n\n        \"\"\"\n        if not tags:\n            return self.filter(tags__len=0)\n        if match_kind == \"any\":\n            return self.filter(tags__overlap=tags)\n        elif match_kind == \"all\":\n            return self.filter(tags__contains=tags)\n        else:\n            assert match_kind == \"exact\"\n            return self.filter(tags__contains=tags, tags__contained_by=tags)\n\n    def tagged(\n        self,\n        *tags: str,\n        match_kind: Literal[\"all\", \"any\", \"exact\"] = \"any\",\n    ):\n        \"\"\"Same as `with_tags`:meth: with tags being '*tags'.\"\"\"\n        return self.with_tags(tags, match_kind=match_kind)\n\n    def append_tags(self, tag: str, *extra_tags: str):\n        \"\"\"Update to append the given tags.\"\"\"\n        tags = [tag, *extra_tags]\n        return self.update(tags=ArrayConcat(models.F(\"tags\"), tags))\n\n\nclass TaggedModel(models.Model):\n    class Meta:\n        abstract = True\n        indexes = (\n            GinIndex(\n                fields=(\"tags\",),\n                # Since this field is intended to short lists of tags of some\n                # controlled vocab, we think fastupdate is not needed.\n                fastupdate=False,\n            ),\n        )\n\n    tags = ArrayField(models.CharField(max_length=64), default=list)\n\n\nclass NamedModel(Model):\n    name = models.CharField(max_length=MAX_LENGTH, db_index=True)\n\n    class Meta:\n        abstract = True\n\n    def __str__(self):\n        return self.name\n\n\ndef prefix_condition(prefix: str, q: models.Q) -> models.Q:\n    \"\"\"Apply a `prefix` to all children of a `Q` object.\n\n    If `prefix` the empty, return `q` unchanged; otherwise return a new Q\n    object with each attribute prefixed with ``prefix__``.\n\n    Example::\n\n       >>> prefix_condition(\"tour\", Q(name=\"pepe\"))\n       <Q: (AND: ('tour__name', 'pepe'))>\n\n    \"\"\"\n    prefix = prefix.strip()\n    if prefix and not prefix.isidentifier():\n        raise ValueError(f\"{prefix!r} is not a valid identifier\")\n    if prefix:\n        return models.Q(**{f\"{prefix}__{attr}\": val for attr, val in q.children})\n    return q\n\n\nclass SubqueryCount(Subquery):\n    template = \"(SELECT count(*) FROM (%(subquery)s) _count)\"\n    output_field = PositiveIntegerField()  # type: ignore\n\n\n@contextmanager\ndef breakpoint_in_sql(fn=lambda *args: breakpoint()):  # pragma: no cover\n    \"\"\"Context manager that calls `fn` when performing SQL queries.\n\n    The signature of `fn` is ``(*args) -> None``.  The default is to call\n    `breakpoint`:func: ignoring the arguments.\n\n    Usage as decorator:\n\n        >>> @breakpoint_in_sql()\n        ... def get(self, request):\n        ...    return ...\n\n    Usage as context manager:\n\n        >>> with breakpoint_in_sql():\n        ...    ...\n\n    \"\"\"\n\n    def blocker(execute, *args):\n        fn(*args)\n        return execute(*args)\n\n    with ExitStack() as estack:\n        for name in connections:\n            estack.enter_context(connections[name].execute_wrapper(blocker))\n        yield\n\n\n# NB: In many of our models we use 'QuerySet[M]' (e.g AnswerQS, FindingQS), so we cheat in the in\n# type hint to say we return the same type we get.\n\nX = TypeVar(\"X\", bound=Any)\n\n\ndef get_prefetched_all(self: X) -> X:\n    \"\"\"Get 'all()' to a prefetched relations.\n\n    Raise a KeyError if the relation is not prefetched.  The purpose of this is to find performance\n    issues where something that should have been prefetched wasn't.\n\n    Usage::\n\n       >>> v = Vessel.objects.all().prefetch_related(\"staff\").first()\n       >>> get_prefetched_all(v.staff)\n\n    \"\"\"\n    # With Prefetch(\"x\", to_attr=\"y\"), and passing 'y' we get a list directly.\n    if isinstance(self, list):\n        return self  # type: ignore\n    # Sadly, Django doesn't want us to do this, but we must.\n    if hasattr(self, \"prefetch_cache_name\"):\n        return self.instance._prefetched_objects_cache[self.prefetch_cache_name]\n    elif hasattr(self, \"field\"):\n        return self.instance._prefetched_objects_cache[self.field.remote_field.name]\n    else:\n        raise TypeError(f\"Unknown field type {type(self)}\")\n\n\n# TODO: Remove this.\n#\n# We imported the OneToOneField just to avoid having to rewrite all migrations,\n# which would look bad in this MR.  I will do it later in another MR.\ndef _dummy_usage(cls: OneToOneField):\n    pass\n",
			"file": "kaiko/utils/db/base.py",
			"file_size": 17543,
			"file_write_time": 133972119800464016,
			"settings":
			{
				"buffer_size": 17543,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import typing as t\nfrom dataclasses import dataclass\nfrom functools import cached_property\n\nfrom djhtmx.component import Field, HtmxComponent, Query\n\nfrom kaiko.tree.models import Level\nfrom kaiko.vhl.models import LayoutShape, LayoutShapeQS\n\n\n@dataclass(slots=True)\nclass ShapesSelected:\n    \"\"\"Event emitted when the user clicks on some shapes and selects them.\"\"\"\n\n    shapes: LayoutShapeQS\n\n\n@dataclass(slots=True)\nclass ShapesClearSelection:\n    \"\"\"Event emitted when the user clears the selection.\"\"\"\n\n\nclass SelectedShapesMixin(HtmxComponent, public=False):\n    \"\"\"A mixin for components that are updated from the selection of shapes.\"\"\"\n\n    selected_shapes: LayoutShapeQS = LayoutShape.objects.none()\n\n    def _handle_event(self, event: ShapesSelected | ShapesClearSelection):\n        match event:\n            case ShapesSelected(shapes):\n                self.selected_shapes = shapes\n            case ShapesClearSelection():\n                self.selected_shapes = LayoutShape.objects.none()\n\n\nclass LevelSelected(HtmxComponent, public=False):\n    selected_level_id: t.Annotated[str | None, Field(default=None), Query(\"level\")]\n\n    @cached_property\n    def selected_level(self):\n        return Level.objects.load(self.selected_level_id)\n",
			"file": "kaiko/vhl/htmx/selection.py",
			"file_size": 1247,
			"file_write_time": 133930629539867488,
			"settings":
			{
				"buffer_size": 1247,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prefere",
				"Preferences: Settings"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"git diff",
				"git: diff"
			],
			[
				"remove packa",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove pc",
				"Package Control: Remove Package"
			],
			[
				"git blame",
				"git: blame current file"
			],
			[
				"copy nam",
				"File Manager: Copy Name"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"delete",
				"File Manager: Delete"
			],
			[
				"git bla",
				"git: blame current file"
			],
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"edit",
				"Project: Edit Project"
			],
			[
				"custom",
				"UI: Customize Color Scheme"
			],
			[
				"pull",
				"git: pull"
			],
			[
				"rename",
				"File: Rename File"
			],
			[
				"copy name",
				"File Manager: Copy Name"
			],
			[
				"copy ",
				"File Manager: Copy Relative Path"
			],
			[
				"blame",
				"git: blame current file"
			],
			[
				"restar",
				"LSP: Restart Server"
			],
			[
				"copy",
				"File Manager: Copy Name"
			],
			[
				"copy fi",
				"File Manager: Copy Name"
			],
			[
				"git diff cure",
				"git: diff current file"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"lsp settings",
				"Preferences: LSP Settings"
			],
			[
				"git balme",
				"git: blame current file"
			],
			[
				"copilot sig",
				"Copilot: Sign In"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"referenc",
				"LSP: Find References"
			],
			[
				"send",
				"REST: Send request"
			],
			[
				"hunter",
				"Scope Hunter: Show Scope Under Cursor(s)"
			],
			[
				"scope",
				"Scope Hunter: Show Scope Under Cursor(s)"
			],
			[
				"remoe",
				"Package Control: Remove Package"
			],
			[
				"color sele",
				"UI: Select Color Scheme"
			],
			[
				"selec color",
				"UI: Select Color Scheme"
			],
			[
				"ui",
				"UI: Customize Color Scheme"
			],
			[
				"hunter ",
				"Scope Hunter: Toggle Instant Scoper"
			],
			[
				"open in ",
				"File Manager: Open In Explorer"
			],
			[
				"django",
				"Set Syntax: Django HTML"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"jinja htm",
				"Set Syntax: HTML (Jinja)"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"clear cacha",
				"Package Control: Clear Cache Directory"
			],
			[
				"bro",
				"Preferences: Browse Packages"
			],
			[
				"html djang",
				"Set Syntax: Django HTML"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"resatrt",
				"LSP: Restart Server"
			],
			[
				"delete file",
				"File Manager: Delete"
			],
			[
				"deltee",
				"File Manager: Delete"
			],
			[
				"copy i",
				"File Manager: Copy Relative Path"
			],
			[
				"move",
				"File Manager: Move"
			],
			[
				"delet",
				"File Manager: Delete"
			],
			[
				"cop name",
				"File Manager: Copy Name"
			],
			[
				"git diff ",
				"git: diff"
			],
			[
				"resta",
				"LSP: Restart Server"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"git log ",
				"git: log current file"
			],
			[
				"git diff curre",
				"git: diff current file"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"restart",
				"LSP: Restart Server"
			],
			[
				"log",
				"git: log"
			],
			[
				"gti diff",
				"git: diff"
			],
			[
				"delte",
				"File Manager: Delete"
			],
			[
				"git log",
				"Set Syntax: Git Log"
			],
			[
				"settings b",
				"Preferences: LSP-biome Settings"
			],
			[
				"css settings",
				"Preferences: LSP-css Settings"
			],
			[
				"remove p",
				"Package Control: Remove Package"
			],
			[
				"format",
				"LSP: Format File"
			],
			[
				"delte ",
				"File Manager: Delete"
			],
			[
				"hints",
				"LSP: Toggle Inlay Hints"
			],
			[
				"res",
				"LSP: Restart Server"
			],
			[
				"toggle hin",
				"History: Toggle Inline Diff"
			],
			[
				"git blame cure",
				"git: blame current file"
			],
			[
				"git pull",
				"git: pull"
			],
			[
				"git log curre",
				"git: log current file"
			],
			[
				"reanme",
				"File: Rename File"
			],
			[
				"re",
				"File: Rename File"
			],
			[
				"Rename",
				"File: Rename File"
			],
			[
				"type def",
				"LSP: Goto Type Definition"
			],
			[
				"git log cure",
				"git: log current file"
			],
			[
				"open ex",
				"File Manager: Open In Explorer"
			],
			[
				"git blam",
				"git: blame current file"
			],
			[
				"git pu",
				"git: pull"
			],
			[
				"check",
				"git: checkout"
			],
			[
				"chat",
				"ChatGPT: Code action"
			],
			[
				"ch",
				"ChatGPT: Code action"
			],
			[
				"cha",
				"ChatGPT: Code action"
			],
			[
				"conver",
				"Indentation: Convert to Spaces"
			],
			[
				"edit pro",
				"Project: Edit Project"
			],
			[
				"de",
				"File Manager: Delete"
			],
			[
				"convert spa",
				"Indentation: Convert to Spaces"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			],
			[
				"lsp key",
				"Preferences: LSP Key Bindings"
			],
			[
				"code ac",
				"LSP: Code Action"
			],
			[
				"action",
				"LSP: Code Action"
			],
			[
				"delet ",
				"File Manager: Delete"
			],
			[
				"lsp",
				"LSP: Toggle Log Panel"
			],
			[
				"enale ",
				"LSP: Enable Language Server in Project"
			],
			[
				"edit pr",
				"Project: Edit Project"
			],
			[
				"lsp html ",
				"Preferences: LSP-html Settings"
			],
			[
				"remove pa",
				"Package Control: Remove Package"
			],
			[
				"enable",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsp enable",
				"LSP: Enable Language Server in Project"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"sho",
				"LSP: Show Call Hierarchy"
			],
			[
				"show",
				"LSP: Show Call Hierarchy"
			],
			[
				"call he",
				"LSP: Show Call Hierarchy"
			],
			[
				"copy file",
				"File Manager: Copy Name"
			],
			[
				"snake",
				"Convert Case: snake_case"
			],
			[
				"enable ",
				"LSP: Enable Language Server in Project"
			],
			[
				"toggle side",
				"View: Toggle Side Bar"
			],
			[
				"copy rela",
				"File Manager: Copy Relative Path"
			],
			[
				"copy f",
				"File Manager: Copy Relative Path"
			],
			[
				"copy fiole",
				"File Manager: Copy Name"
			],
			[
				"clsoe",
				"Project: Close"
			],
			[
				"open ",
				"File Manager: Open In Browser"
			],
			[
				"keyb",
				"Preferences: Key Bindings"
			],
			[
				"split ",
				"File: Split View"
			],
			[
				"continue",
				"git: rebase --continue"
			],
			[
				"package br",
				"Preferences: Browse Packages"
			],
			[
				"type de",
				"LSP: Goto Type Definition"
			],
			[
				"copy nae",
				"File Manager: Copy Name"
			],
			[
				"edit ",
				"Project: Edit Project"
			],
			[
				"git blm",
				"git: blame current file"
			],
			[
				"git satus",
				"git: status"
			],
			[
				"close ",
				"File: Close All"
			],
			[
				"close",
				"File: Close All"
			],
			[
				"browse",
				"Preferences: Browse Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 351.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/xigurat/Sync/kaiko/kaiko/djdatalog/README.md",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/fleet/models/permissions.py",
		"/home/xigurat/Sync/kaiko/kaiko/djdatalog/tests/test_query_hydration.py",
		"/home/xigurat/Sync/kaiko/kaiko/djdatalog/tests/test_q_objects.py",
		"/home/xigurat/Sync/kaiko/kaiko/djdatalog/tests/test_basic_functionality.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/answer/AnswerGalleryView.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/templates/accounts/login_email.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/integration/automagi/htmx.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/integration/automagi/models/base.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/tree/models/answers/base.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/frontend/BaseModal.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/templates/accounts/login_token.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/htmx/chart.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/htmx/chart_card.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/templates/accounts/ChangePreferredModuleModal.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/templates/accounts/user_settings.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/templates/accounts/password_change.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/inspections.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/answer/DashboardAnswerDetailComponent.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/answer/guidance/GuidanceDocument.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/risq/templates/risq/htmx/cards/RisqVesselCompletionStatusCard.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/findings.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/settings.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/htmx/health.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/vhl/reports/health.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/vessel/safety.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/tree/htmx/__init__.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/tree/htmx/charts.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/tree/templates/tree/charts/BaseDoughnutChart.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/htmx/findings.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/tests/test_login_api_v20240307.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/views.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/models/user.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/models/snapshots.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/risq/templates/risq/htmx/cards/RisqVesselPeriodCard.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/health.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/charts/ChartCard.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/attachments/models.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/base.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/frontend/BaseChart.html",
		"/home/xigurat/Sync/kaiko/kaiko/pyproject.toml",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/shore_reports/templates/shore_reports/htmx/report_blocks/_custom_inspection_observations.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/live.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/frontend/BaseModalTailwind.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/base_daisyui.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/integration/automagi/templates/htmx/automagi/CorrosionAnalysisFeedback.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/kai/kai_summary/templates/htmx/ConditionAssessmentFeedback.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/migrations/0054_layoutshape_completed_findings_and_more.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/company_forms/templates/company_forms/htmx/InspectionAnnotationsBox.html",
		"/home/xigurat/Sync/kaiko/random-product-ideas.md",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/fleet/templates/fleet/base.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/base_site.html",
		"/home/xigurat/.codex/config.json",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/frontend/layout/topbar.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/static/vendors/spectre-exp.css",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/frontend/FeedbackMessages__card.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/acknowledgments/models.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templatetags/kaiko.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/tests/test_icons_snapshots.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/frontend/layout/topbar_daisyui.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/base_site_daisyui.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/indicators/templates/indicators/index.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/indicators/views.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/htmx/feedback.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/static/main.css",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/indicators/templates/indicators/_metric_card.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko.sublime-project",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/vhl/partials/button_edit_layout.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/base.html",
		"/home/xigurat/Sync/Board Meeting.md",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/accounts/admin.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/filters.py",
		"/home/xigurat/Sync/kaiko/kaiko/.venv/lib/python3.12/site-packages/treebeard/mp_tree.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/tree/models/level.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/htmx/vhl/ComponentExplorer.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/htmx/vhl/ComponentExplorer__level.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/htmx/jobs.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/htmx/vhl/ComponentExplorerEditorModal.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/htmx/vhl/ComonentExplorer__level.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/tree/utils.py",
		"/home/xigurat/Sync/kaiko/kaiko/.venv/lib/python3.12/site-packages/django-stubs/db/models/query.pyi",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/company_forms/htmx.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/comments/tests/test_htmx.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/pydantic_table.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/risq/templates/risq/htmx/widgets/RisqVettingPeriodHistoryModal__body.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/sire2/templates/sire2/htmx/Sire2VettingPeriodHistoryModal__body.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/risq/templates/risq/htmx/widgets/RisqVettingPeriodHistoryModal.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/fleet/admin.py",
		"/home/xigurat/Sync/kaiko/kaiko/Makefile",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/__init__.py",
		"/home/xigurat/Sync/kaiko/kaiko/.gitlab-ci.yml",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/htmx/filters.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/tree-filter/BaseLevelFilter.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/tree-filter/LevelFilterInput.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/utils/testing.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/htmx/pagination.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/risq/tests/test_risq_gallery.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/pydantic_filterable.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/templates/frontend/ConfirmModal.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/htmx/vhl/ComponentExplorerEditorModal/body.html",
		"<untitled 29> (BLAME: kaiko/vhl/htmx/filters.py)",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/pdf_generation/models.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/htmx/reports.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/health/templates/health/VesselOverview.html",
		"/home/xigurat/Sync/kaiko/kaiko/.gitignore",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/health/htmx/vessel.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/urls.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/editor.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/vessel/structural.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/frontend/static/chartjs-defaults.js",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/charts/BaseJobStatusChart.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/jobs.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/htmx/__init__.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/htmx/base.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/templates/dashboard/charts/BaseVesselHealthRatingChart.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/vhl/VesselLayoutForm.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/maps.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/htmx/vhl/VesselLayoutMapView.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/views/vessel.py",
		"/home/xigurat/Sync/kaiko/kaiko/.../htmx/vhl/VesselLayoutMapEditorShapesList.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/dashboard/decorators.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/fleet/views/views.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/static/vhl/js/MapEditor_script.js",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/templates/htmx/vhl/VesselLayoutMapEditor.html",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/static/vhl/js/MapView_script.js",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/models/vhm.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/tree/migrations/0155_alter_leveltype_kind.py",
		"/home/xigurat/Sync/kaiko/kaiko/kaiko/tree/migrations/0155_alter_yesnoquestion_options.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 162.0,
		"where_history":
		[
			"",
			"/home/xigurat/Sync/kaiko/kaiko",
			"",
			"test*.py",
			"",
			"/home/xigurat/Sync/kaiko/kaiko",
			"",
			"/home/xigurat/Sync/kaiko/kaiko/kaiko/ai_analytics/models",
			"",
			"/home/xigurat/Sync/kaiko/kaiko/kaiko/vhl",
			"",
			"/home/xigurat/Sync/kaiko/kaiko/kaiko/tree",
			"",
			"/home/xigurat/Sync/kaiko/kaiko/kaiko/company_forms",
			"",
			"/home/xigurat/Sync/kaiko/",
			"/home/xigurat/Sync/kaiko/kaiko,*.py",
			"/home/xigurat/Sync/kaiko/kaiko,<project filters>",
			"/home/xigurat/.virtualenvs/kaiko/lib/python3.11/site-packages/kombu,<project filters>"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"arvhived",
			"VesselLayoutFindingsPDFTable",
			"opts",
			"true",
			"VesselDoughnutChart",
			"token_val",
			"from django.conf import settings\n",
			"settings",
			"from django.conf import",
			"check_lockout",
			"USER_ERROR",
			"emial",
			"is_token_ok",
			"Reuqes",
			"data",
			"alidate token only when not locked out",
			"user-menu-items.html",
			"user-menu-items.html\"",
			"Polygon",
			"Poylgon",
			"postgis",
			"Shoul",
			"button class=\"",
			"ChangePreferredModuleModal",
			"input-bordered",
			"onput",
			"aotof",
			"<sup>*</sup>",
			"AnswerAttachment",
			"ImageType",
			"AnswerAttachment",
			"ImageType",
			"AnswerGalleryView",
			"CorrosionAnalysisFeedback",
			"thumbs-up",
			"cur_is_corrosion",
			"CorrosionAnalysisFeedback",
			"thumbs-up",
			"thumb",
			"flex-1",
			"64",
			"4b48d6",
			"4096",
			"ignore",
			"omit",
			"tw-",
			"logo",
			"feea",
			"feather",
			"message",
			"feedback_icon",
			"simple_tag",
			"SafeText",
			"simple_tag",
			"filter",
			"TextChoiceF",
			"unrea",
			"feedback_icon",
			"feather_tag",
			"feather",
			"5755D9",
			".tw-bg-maritime-blue",
			"5755D9",
			".tw-bg-maritime-blue",
			"tw=bg-maritime-blue",
			".bg-maritime-blue",
			"bg-maritime",
			"base_site_daisyui",
			"_metric_card",
			"login_required",
			"method_decorator",
			"AdminOnlyModule",
			"login_required",
			"_daisyui",
			"topbar",
			"top",
			"topnav",
			"sidepanel",
			"side_panel",
			"76",
			"repared",
			"psc",
			"version",
			"oatie",
			"charterer",
			"Wrogth",
			"Actionables",
			"LogRocket",
			"KAIRatingExplanationComponent_content.html\n",
			"KAIRatingExplanationComponent_content.html",
			"KAIRatingExplanationComponent",
			"AUTOMAGI_SECRET_KEY",
			"Edition",
			"sorted-child",
			"bool",
			"pass",
			"level_moved",
			"level_id",
			"inde",
			"parent_id",
			"level_id",
			"editions_el",
			"editionsE",
			"input",
			"level_id",
			"leve_id_input",
			"input",
			"valu",
			"move",
			"inpuyt",
			"level_id",
			"create",
			"docu",
			"editionsEl",
			"docuy",
			"changes",
			"edir",
			"changes",
			"editing_enabled",
			"pass",
			"endif",
			"editing",
			"False",
			"Safeoo",
			"Cancel",
			"Edit",
			"True",
			"edigint"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"from functools import cached_property",
			"CORROSION_DETECTION_ENABLED",
			"htmx \"DownloadDeficiencyReport\"",
			"from kaiko.accounts.api.permissions import EnsureKaikoUsersCantUpload",
			"permission_classes = (EnsureKaikoUsersCantUpload,)",
			"copy_acknowledgement_config_from_parent",
			"CompanyFormSubmission.xxx."
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "kaiko/acknowledgments/models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6615,
						"regions":
						{
						},
						"selection":
						[
							[
								1499,
								1499
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-basedpyright"
								}
							],
							"copilot.completion._is_modified": false,
							"copilot.completion.is_visible": false,
							"copilot.completion.is_visible_panel_completions": false,
							"copilot.completion.is_waiting_completion": false,
							"copilot.completion.is_waiting_panel_completions": false,
							"copilot.completion.original_layout": null,
							"lsp_active": true,
							"lsp_uri": "file:///home/xigurat/Sync/kaiko/kaiko/kaiko/acknowledgments/models.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "djdatalog/models.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2653,
						"regions":
						{
						},
						"selection":
						[
							[
								697,
								697
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-basedpyright"
								}
							],
							"copilot.completion._is_modified": false,
							"copilot.completion.is_visible": false,
							"copilot.completion.is_visible_panel_completions": false,
							"copilot.completion.is_waiting_completion": false,
							"copilot.completion.is_waiting_panel_completions": false,
							"copilot.completion.original_layout": null,
							"lsp_active": true,
							"lsp_uri": "file:///home/xigurat/Sync/kaiko/kaiko/djdatalog/models.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 119.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2377,
						"regions":
						{
						},
						"selection":
						[
							[
								604,
								604
							]
						],
						"settings":
						{
							"__vi_external_disable": false,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"color_scheme": "Packages/User/GitSavvy/GitSavvy.dashboard_view.color_scheme.hidden-color-scheme",
							"copilot.completion._is_modified": false,
							"copilot.completion.is_visible": false,
							"copilot.completion.is_visible_panel_completions": false,
							"copilot.completion.is_waiting_completion": false,
							"copilot.completion.is_waiting_panel_completions": false,
							"copilot.completion.original_layout": null,
							"git_savvy.help_hidden": false,
							"git_savvy.interface": "status",
							"git_savvy.repo_path": "/home/xigurat/Sync/kaiko/kaiko",
							"git_savvy.status_view": true,
							"git_savvy.tabbable": true,
							"lsp_active": true,
							"lsp_uri": "buffer:44",
							"result_base_dir": "/home/xigurat/Sync/kaiko/kaiko",
							"result_file_regex": "^(?:    .+ -> |  [ -] (?!\\(\\d+\\) ))(?!Your working directory is clean\\.)(\\S.*)$",
							"syntax": "Packages/GitSavvy/syntax/status.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "djdatalog/test_models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1840,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-basedpyright"
								}
							],
							"copilot.completion.is_visible": false,
							"copilot.completion.is_visible_panel_completions": false,
							"copilot.completion.is_waiting_completion": false,
							"copilot.completion.is_waiting_panel_completions": false,
							"copilot.completion.original_layout": null,
							"lsp_active": true,
							"lsp_uri": "file:///home/xigurat/Sync/kaiko/kaiko/djdatalog/test_models.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "test_q_transform.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4135,
						"regions":
						{
						},
						"selection":
						[
							[
								3851,
								3830
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-basedpyright"
								}
							],
							"copilot.completion._is_modified": false,
							"copilot.completion.is_visible": false,
							"copilot.completion.is_visible_panel_completions": false,
							"copilot.completion.is_waiting_completion": false,
							"copilot.completion.is_waiting_panel_completions": false,
							"copilot.completion.original_layout": null,
							"lsp_active": true,
							"lsp_uri": "file:///home/xigurat/Sync/kaiko/kaiko/test_q_transform.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2812.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "test_q_objects.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5032,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-basedpyright"
								}
							],
							"copilot.completion._is_modified": false,
							"copilot.completion.is_visible": false,
							"copilot.completion.is_visible_panel_completions": false,
							"copilot.completion.is_waiting_completion": false,
							"copilot.completion.is_waiting_panel_completions": false,
							"copilot.completion.original_layout": null,
							"lsp_active": true,
							"lsp_uri": "file:///home/xigurat/Sync/kaiko/kaiko/test_q_objects.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "kaiko/fleet/models/models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34885,
						"regions":
						{
						},
						"selection":
						[
							[
								9820,
								9820
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-basedpyright"
								}
							],
							"copilot.completion._is_modified": false,
							"copilot.completion.is_visible": false,
							"copilot.completion.is_visible_panel_completions": false,
							"copilot.completion.is_waiting_completion": false,
							"copilot.completion.is_waiting_panel_completions": false,
							"copilot.completion.original_layout": null,
							"lsp_active": true,
							"lsp_uri": "file:///home/xigurat/Sync/kaiko/kaiko/kaiko/fleet/models/models.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6802.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "kaiko/utils/db/base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17543,
						"regions":
						{
						},
						"selection":
						[
							[
								11654,
								11654
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-basedpyright"
								}
							],
							"copilot.completion._is_modified": false,
							"copilot.completion.is_visible": false,
							"copilot.completion.is_visible_panel_completions": false,
							"copilot.completion.is_waiting_completion": false,
							"copilot.completion.is_waiting_panel_completions": false,
							"copilot.completion.original_layout": null,
							"lsp_active": true,
							"lsp_uri": "file:///home/xigurat/Sync/kaiko/kaiko/kaiko/utils/db/base.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8986.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "kaiko/vhl/htmx/selection.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1247,
						"regions":
						{
						},
						"selection":
						[
							[
								242,
								242
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-basedpyright"
								}
							],
							"copilot.completion._is_modified": false,
							"copilot.completion.is_visible": false,
							"copilot.completion.is_visible_panel_completions": false,
							"copilot.completion.is_waiting_completion": false,
							"copilot.completion.is_waiting_panel_completions": false,
							"copilot.completion.original_layout": null,
							"lsp_active": true,
							"lsp_uri": "file:///home/xigurat/Sync/kaiko/kaiko/kaiko/vhl/htmx/selection.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 64.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.AI Chat":
	{
		"height": 667.0
	},
	"output.GitSavvy":
	{
		"height": 208.0
	},
	"output.LSP Log Panel":
	{
		"height": 903.0,
		"history":
		[
		]
	},
	"output.SublimeLinter":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.diagnostics":
	{
		"height": 174.0,
		"history":
		[
		]
	},
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.mdpopups":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.mdpopups-dummy":
	{
		"height": 0.0
	},
	"output.references":
	{
		"height": 150.0
	},
	"output.scopehunter.results":
	{
		"height": 0.0
	},
	"output.show_commit_info":
	{
		"height": 517.0
	},
	"pinned_build_system": "",
	"project": "kaiko.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"models",
				"djdatalog/models.py"
			],
			[
				"permission",
				"kaiko/fleet/models/permissions.py"
			],
			[
				"model",
				"kaiko/acknowledgments/models.py"
			],
			[
				"ChartCard",
				"kaiko/dashboard/templates/dashboard/charts/ChartCard.html"
			],
			[
				"settings",
				"kaiko/settings.py"
			],
			[
				"kaiko/vhl/htmx/findings.py",
				"kaiko/vhl/htmx/findings.py"
			],
			[
				"htmx findi",
				"kaiko/vhl/htmx/findings.py"
			],
			[
				"htmx finding",
				"kaiko/dashboard/htmx/findings.py"
			],
			[
				"BaseChart",
				"kaiko/frontend/templates/frontend/BaseChart.html"
			],
			[
				"tree/charts/BaseDoughnutChart.html",
				"kaiko/tree/templates/tree/charts/BaseDoughnutChart.html"
			],
			[
				"acc views",
				"kaiko/accounts/views.py"
			],
			[
				"login token",
				"kaiko/accounts/templates/accounts/login_token.html"
			],
			[
				"tailwind modal",
				"kaiko/frontend/templates/frontend/BaseModalTailwind.html"
			],
			[
				"frontend/BaseModal.html",
				"kaiko/frontend/templates/frontend/BaseModal.html"
			],
			[
				"ChangePreferredModuleModal",
				"kaiko/accounts/templates/accounts/ChangePreferredModuleModal.html"
			],
			[
				"settings user",
				"kaiko/accounts/templates/accounts/user_settings.html"
			],
			[
				"change pass",
				"kaiko/accounts/templates/accounts/password_change.html"
			],
			[
				"login em",
				"kaiko/accounts/templates/accounts/login_email.html"
			],
			[
				"login",
				"kaiko/accounts/templates/accounts/login_token.html"
			],
			[
				"base dai",
				"kaiko/frontend/templates/base_daisyui.html"
			],
			[
				"pyrpo",
				"pyproject.toml"
			],
			[
				"login ",
				"kaiko/accounts/templates/accounts/login_email.html"
			],
			[
				"dais",
				"kaiko/frontend/templates/base_daisyui.html"
			],
			[
				"FeedbackMessages__card.html",
				"kaiko/frontend/templates/frontend/FeedbackMessages__card.html"
			],
			[
				"base_site",
				"kaiko/frontend/templates/base_site_daisyui.html"
			],
			[
				"main.css",
				"kaiko/frontend/static/main.css"
			],
			[
				"topbar",
				"kaiko/frontend/templates/frontend/layout/topbar.html"
			],
			[
				"base_site_daisyui",
				"kaiko/frontend/templates/base_site_daisyui.html"
			],
			[
				"pypro",
				"pyproject.toml"
			],
			[
				"metric car",
				"kaiko/indicators/templates/indicators/_metric_card.html"
			],
			[
				"indicators index",
				"kaiko/indicators/templates/indicators/index.html"
			],
			[
				"base_site_daisyui.html ",
				"kaiko/frontend/templates/base_site_daisyui.html"
			],
			[
				"fleet base",
				"kaiko/fleet/templates/fleet/base.html"
			],
			[
				"button_edit_layout",
				"kaiko/vhl/templates/vhl/partials/button_edit_layout.html"
			],
			[
				"admin",
				"kaiko/accounts/admin.py"
			],
			[
				"base html",
				"kaiko/frontend/templates/base.html"
			],
			[
				"explorer level",
				"kaiko/vhl/templates/htmx/vhl/ComponentExplorer__level.html"
			],
			[
				"explorer",
				"kaiko/vhl/templates/htmx/vhl/ComponentExplorer.html"
			],
			[
				"ComponentExplorer",
				"kaiko/vhl/templates/htmx/vhl/ComponentExplorerEditorModal.html"
			],
			[
				"explorer modal",
				"kaiko/vhl/templates/htmx/vhl/ComponentExplorerEditorModal.html"
			],
			[
				"Componentexplo",
				"kaiko/vhl/templates/htmx/vhl/ComponentExplorer.html"
			],
			[
				"py",
				"pyproject.toml"
			],
			[
				"makefile",
				"Makefile"
			],
			[
				"ComponentExplorerEditorModal",
				"kaiko/vhl/templates/htmx/vhl/ComponentExplorerEditorModal.html"
			],
			[
				"component explorer",
				"kaiko/vhl/templates/htmx/vhl/ComponentExplorer.html"
			],
			[
				"sttings",
				"kaiko/settings.py"
			],
			[
				"ConfirmO",
				"kaiko/frontend/templates/frontend/ConfirmModal.html"
			],
			[
				"ConfirmModal.html",
				"kaiko/frontend/templates/frontend/ConfirmModal.html"
			],
			[
				"LevelFilterInput",
				"kaiko/dashboard/templates/dashboard/tree-filter/LevelFilterInput.html"
			],
			[
				"BaseLevelFilter",
				"kaiko/dashboard/templates/dashboard/tree-filter/BaseLevelFilter.html"
			],
			[
				"kaiko/dashboard/htmx/filters.py",
				"kaiko/dashboard/htmx/filters.py"
			],
			[
				"body",
				"kaiko/vhl/templates/htmx/vhl/ComponentExplorerEditorModal/body.html"
			],
			[
				"basemodal ",
				"kaiko/frontend/templates/frontend/BaseModalTailwind.html"
			],
			[
				"gitla",
				".gitlab-ci.yml"
			],
			[
				"test ris",
				"kaiko/risq/tests/test_risq_gallery.py"
			],
			[
				"re2VettingPeriodHistoryModal__body.html",
				"kaiko/sire2/templates/sire2/htmx/Sire2VettingPeriodHistoryModal__body.html"
			],
			[
				"RisqVettingPeriodHistoryModal",
				"kaiko/risq/templates/risq/htmx/widgets/RisqVettingPeriodHistoryModal.html"
			],
			[
				"RisqVettingPeriodHistoryModal__body.html",
				"kaiko/risq/templates/risq/htmx/widgets/RisqVettingPeriodHistoryModal__body.html"
			],
			[
				"jopb",
				"kaiko/dashboard/htmx/jobs.py"
			],
			[
				"chart defa",
				"kaiko/frontend/static/chartjs-defaults.js"
			],
			[
				"basechart",
				"kaiko/frontend/templates/frontend/BaseChart.html"
			],
			[
				"chartjs-defaults",
				"kaiko/frontend/static/chartjs-defaults.js"
			],
			[
				"base.ht",
				"kaiko/frontend/templates/base.html"
			],
			[
				"kaiko/vhl/htmx/jobs.py",
				"kaiko/vhl/htmx/jobs.py"
			],
			[
				"BaseJobStatusChart",
				"kaiko/dashboard/templates/dashboard/charts/BaseJobStatusChart.html"
			],
			[
				"BaseVesselHealthRatingChart",
				"kaiko/dashboard/templates/dashboard/charts/BaseVesselHealthRatingChart.html"
			],
			[
				"chartch",
				"kaiko/dashboard/templates/dashboard/charts/ChartCard.html"
			],
			[
				"mapedi",
				"kaiko/vhl/static/vhl/js/MapEditor_script.js"
			],
			[
				"VesselLayoutMapView",
				"kaiko/vhl/templates/htmx/vhl/VesselLayoutMapView.html"
			],
			[
				"VesselLayoutMapEditor",
				"kaiko/vhl/templates/htmx/vhl/VesselLayoutMapEditor.html"
			],
			[
				"frontend kaiko",
				"kaiko/frontend/templatetags/kaiko.py"
			],
			[
				"kaiko",
				"kaiko/urls.py"
			],
			[
				"0155_alter_yesnoquestion_options",
				"kaiko/tree/migrations/0155_alter_yesnoquestion_options.py"
			],
			[
				"0155_alter_leveltype_kind",
				"kaiko/tree/migrations/0155_alter_leveltype_kind.py"
			],
			[
				"VesselLayoutMapEditorShapesList",
				"kaiko/vhl/templates/htmx/vhl/VesselLayoutMapEditorShapesList.html"
			],
			[
				".gi",
				".gitignore"
			],
			[
				"vesselvo",
				"kaiko/health/templates/health/VesselOverview.html"
			],
			[
				"VesselOverview",
				"kaiko/health/templates/health/VesselOverview.html"
			],
			[
				"VesselLayoutLevelGallery",
				"kaiko/vhl/templates/htmx/vhl/VesselLayoutLevelGallery.html"
			],
			[
				"VesselLayoutOverviewTab",
				"kaiko/vhl/templates/htmx/vhl/VesselLayoutOverviewTab.html"
			],
			[
				"TabSelector",
				"kaiko/dashboard/templates/dashboard/selectors/TabSelector.html"
			],
			[
				"LevelFilterNestedItems",
				"kaiko/dashboard/templates/dashboard/tree-filter/LevelFilterNestedItems.html"
			],
			[
				"LevelSingleSelector",
				"kaiko/vhl/templates/htmx/vhl/LevelSingleSelector.html"
			],
			[
				"vhl htmx",
				"kaiko/vhl/templates/htmx/vhl/VesselLayoutHealthRatingChart.html"
			],
			[
				"VesselLayoutInspectionsMiniViewer",
				"kaiko/vhl/templates/htmx/vhl/VesselLayoutInspectionsMiniViewer.html"
			],
			[
				"CorrosionAnalysis",
				"kaiko/dashboard/templates/dashboard/answer/partials/CorrosionAnalysis.html"
			],
			[
				"Completion",
				"kaiko/dashboard/templates/dashboard/answer/partials/Completion.html"
			],
			[
				"tw complet",
				"kaiko/dashboard/templates/dashboard/answer/partials/tw/Completion.html"
			],
			[
				"AttachmentsCarousel",
				"kaiko/dashboard/templates/dashboard/answer/partials/AttachmentsCarousel.html"
			],
			[
				"AnswerDetails",
				"kaiko/vhl/templates/htmx/vhl/partials/AnswerDetails.html"
			],
			[
				"PDFButton",
				"kaiko/pdf_generation/templates/htmx/pdf/PDFButton.html"
			],
			[
				"integraiton automagi",
				"kaiko/integration/automagi/migrations/0018_alter_automagicorrosionanalysisresult_artifact.py"
			],
			[
				"kai/",
				"kaiko/kai/base/models.py"
			],
			[
				"company forms / html",
				"kaiko/company_forms/templates/company-forms-details.html"
			],
			[
				"vessel/checklist.html",
				"kaiko/vessel/templates/vessel/checklist.html"
			],
			[
				"vesel views",
				"kaiko/vessel/views.py"
			],
			[
				"fleet view",
				"kaiko/dashboard/views/fleet.py"
			],
			[
				"kaiko urls",
				"kaiko/urls.py"
			],
			[
				"Vesselswith",
				"kaiko/fleet/templates/fleet/VesselSwitcher.html"
			],
			[
				"switcher",
				"kaiko/fleet/templates/fleet/VesselSwitcher.html"
			],
			[
				"html",
				"kaiko/frontend/templates/base.html"
			],
			[
				"htnl",
				"kaiko/notifications/templates/notifications/shore-team-nodata.mjml"
			],
			[
				"Docker",
				"Dockerfile"
			],
			[
				"finding_details",
				"kaiko/tree/templates/tree/finding_details.html"
			],
			[
				"download_phamtom_pdf_report",
				"kaiko/frontend/templates/frontend/generic/download_phamtom_pdf_report.html"
			],
			[
				"answer_details",
				"kaiko/integration/risk4sea/templates/risk4sea/answer/answer_details.html"
			],
			[
				"checklit/",
				"kaiko/health/templates/checklist/ChecklistInspectionProceduresDetails.html"
			],
			[
				"health view",
				"kaiko/health/views.py"
			],
			[
				"checklist_procedures_details",
				"kaiko/health/templates/checklist/checklist_procedures_details.html"
			],
			[
				"ChecklistInspectionProceduresDetails",
				"kaiko/health/templates/checklist/ChecklistInspectionProceduresDetails.html"
			],
			[
				"checklists_procedures",
				"kaiko/health/templates/checklist/checklists_procedures.html"
			],
			[
				"pyr",
				"pyproject.toml"
			],
			[
				"datepicker",
				"kaiko/frontend/static/vendors/datepicker.js"
			],
			[
				"VesselBookmarkButton",
				"kaiko/fleet/templates/fleet/VesselBookmarkButton.html"
			],
			[
				"VesselSwitcher_dropdown",
				"kaiko/fleet/templates/fleet/VesselSwitcher_dropdown.html"
			],
			[
				"vesselswi",
				"kaiko/fleet/templates/fleet/VesselSwitcher.html"
			],
			[
				"makefie",
				"Makefile"
			],
			[
				"pypr",
				"pyproject.toml"
			],
			[
				"remote",
				"remote.sh"
			],
			[
				"attachment",
				"kaiko/attachments/management/commands/attachments.py"
			],
			[
				"Overview",
				"kaiko/health/templates/health/VesselOverview.html"
			],
			[
				"rating_cards",
				"kaiko/survey/templates/survey/cards/rating_cards.html"
			],
			[
				"survey cards rating card",
				"kaiko/survey/templates/survey/cards/rating_card.html"
			],
			[
				"survey/cards/rating_card.html",
				"kaiko/survey/templates/survey/cards/rating_card.html"
			],
			[
				"",
				"kaiko/health/live/vessel.py"
			],
			[
				"VesselLayoutCorrosionTrendChart",
				"kaiko/vhl/templates/htmx/vhl/VesselLayoutCorrosionTrendChart.html"
			],
			[
				"kaiko/survey/templatetags/rating_cards.py",
				"kaiko/survey/templatetags/rating_cards.py"
			],
			[
				"safety",
				"kaiko/vessel/templates/vessel/safety.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 729.0,
		"last_filter": "ooo",
		"selected_items":
		[
			[
				"ooo",
				"~/Sync/kaiko/ooo/one-on-one.sublime-project"
			],
			[
				"oo",
				"~/Sync/kaiko/ooo/one-on-one.sublime-project"
			],
			[
				"stacks",
				"~/Sync/kaiko/stacks/stacks.sublime-workspace"
			],
			[
				"k",
				"~/Sync/kaiko/kaiko/kaiko.sublime-project"
			],
			[
				"",
				"~/Sync/kaiko/kaiko/kaiko.sublime-project"
			],
			[
				"ca",
				"~/Sync/kaiko/caddy/caddy.sublime-project"
			],
			[
				"kaiko",
				"~/Sync/kaiko/kaiko/kaiko.sublime-project"
			],
			[
				"dj",
				"~/Sync/src/djhtmx/djhtmx.sublime-project"
			],
			[
				"pdf",
				"~/Sync/kaiko/pdf-rendering-engine/pdf-rendering-engine.sublime-project"
			],
			[
				"d",
				"~/Sync/src/djhtmx/djhtmx.sublime-project"
			],
			[
				"su",
				"~/Sync/kaiko/survey-tool/survey-tool.sublime-project"
			],
			[
				"repl",
				"~/Sync/kaiko/replicator/replicator.sublime-project"
			],
			[
				"cadd",
				"~/Sync/kaiko/caddy/caddy.sublime-project"
			],
			[
				"surve",
				"~/Sync/kaiko/survey-tool/survey-tool.sublime-project"
			],
			[
				"sy",
				"~/Sync/src/syncfirst/syncfirst.sublime-project"
			],
			[
				"survey",
				"~/Sync/kaiko/survey-tool/survey-tool.sublime-project"
			],
			[
				"caddy",
				"~/Sync/kaiko/caddy/caddy.sublime-project"
			],
			[
				"sur",
				"~/Sync/kaiko/survey-tool/survey-tool.sublime-project"
			],
			[
				"Reinde",
				"~/Sync/kaiko/ReIndexed/ReIndexed.sublime-project"
			],
			[
				"replca",
				"~/Sync/kaiko/replicator/replicator.sublime-project"
			],
			[
				"sue",
				"~/Sync/kaiko/survey-tool/survey-tool.sublime-project"
			],
			[
				"sta",
				"~/Sync/kaiko/stacks/stacks.sublime-project"
			],
			[
				"replica",
				"~/Sync/kaiko/replicator/replicator.sublime-project"
			],
			[
				"stack",
				"~/Sync/kaiko/stacks/stacks.sublime-project"
			],
			[
				"reapl",
				"~/Sync/src/reactor/reactor.sublime-project"
			],
			[
				"dh",
				"~/Sync/src/djhtmx/djhtmx.sublime-project"
			],
			[
				"re",
				"~/Sync/kaiko/replicator/replicator.sublime-project"
			],
			[
				"sync",
				"~/Sync/src/syncfirst/syncfirt.sublime-project"
			],
			[
				"brain",
				"~/Sync/kaiko/brainwave/brainwave.sublime-project"
			],
			[
				"bra",
				"~/Sync/kaiko/brainwave/brainwave.sublime-project"
			],
			[
				"reac",
				"~/Sync/src/reactor/reactor.sublime-workspace"
			]
		],
		"width": 554.0
	},
	"select_symbol":
	{
		"height": 375.0,
		"last_filter": "vessel",
		"selected_items":
		[
			[
				"vessel",
				"Vessel"
			],
			[
				"hydra",
				"_hydrate_results"
			],
			[
				"VesselLayoutHealthTrendChart",
				"VesselLayoutHealthTrendChart"
			],
			[
				"with email",
				"with_email"
			],
			[
				"norma",
				"normalize_email"
			],
			[
				"SHape",
				"ShapeSnapshot"
			],
			[
				"ChangePreferredModuleModal",
				"ChangePreferredModuleModal"
			],
			[
				"AnswerAttach",
				"AnswerAttachment"
			],
			[
				"CorrosionAnalysisResultImage",
				"CorrosionAnalysisResultImage"
			],
			[
				"CorrosionAnalifeed",
				"CorrosionAnalysisFeedback"
			],
			[
				"CorrosionAnalysisFeedback",
				"CorrosionAnalysisFeedback"
			],
			[
				"feedback_",
				"feedback_icon"
			],
			[
				"editormodal",
				"ComponentExplorerEditorModal"
			],
			[
				"explorermo",
				"ComponentExplorerEditorModal"
			],
			[
				"component explorer",
				"ComponentExplorerEditorModal"
			],
			[
				"Componentexplo",
				"ComponentExplorer"
			],
			[
				"BaseJobStatusChart",
				"BaseJobStatusChart"
			],
			[
				"BaseLevelFilter",
				"BaseLevelFilter"
			],
			[
				"ComponentExplorerEditorModal",
				"ComponentExplorerEditorModal"
			],
			[
				"LayoutLevelFilter",
				"LayoutLevelFilter"
			],
			[
				"get _eleme",
				"get_elements"
			],
			[
				"_apply_db_filters",
				"_apply_db_filters"
			],
			[
				"_apply_db_search",
				"_apply_db_search"
			],
			[
				"_paginated_qs",
				"_paginated_qs"
			],
			[
				"VesselStructuralJobStatusChart",
				"VesselStructuralJobStatusChart"
			],
			[
				"Bascar",
				"BaseChartCard"
			],
			[
				"overview fle",
				"OverviewFleetDashboard"
			],
			[
				"VesselLayoutMapEditor",
				"VesselLayoutMapEditor"
			],
			[
				"shape",
				"ShapeSnapshot"
			],
			[
				"VesselLayoutMapEditorShapesList",
				"VesselLayoutMapEditorShapesList"
			],
			[
				"VesselOv",
				"VesselOverview"
			],
			[
				"download all ",
				"download_all_images"
			],
			[
				"VesselGa",
				"VesselGalleryView"
			],
			[
				"VesselLayoutLevelGallery",
				"VesselLayoutLevelGallery"
			],
			[
				"TabSelector",
				"TabSelector"
			],
			[
				"LevelSingleSelector",
				"LevelSingleSelector"
			],
			[
				"VesselLayoutHealthRatingChart",
				"VesselLayoutHealthRatingChart"
			],
			[
				"VesselLayoutInspectionsMiniViewer",
				"VesselLayoutInspectionsMiniViewer"
			],
			[
				"TourStepsReportButton",
				"TourStepsReportButton"
			],
			[
				"PDFButton",
				"PDFButton"
			],
			[
				"LevelSummar",
				"LevelSummaryJob"
			],
			[
				"CorrosionAnalysisButton",
				"CorrosionAnalysisButton"
			],
			[
				"download_selected_images",
				"download_selected_images"
			],
			[
				"PDFB",
				"PDFButton"
			],
			[
				"Corrosionanalysis",
				"CorrosionAnalysisButton"
			],
			[
				"CorrosionAna",
				"CorrosionAnalysis"
			],
			[
				"LevelSingle",
				"LevelSingleSelector"
			],
			[
				"BaseVesselLayoutFindingsTable",
				"BaseVesselLayoutFindingsTable"
			],
			[
				"NotificationsToastList",
				"NotificationsToastList"
			],
			[
				"download_all",
				"download_all_images"
			],
			[
				"VesselSire2FindingTable",
				"VesselSire2FindingTable"
			],
			[
				"FleetContext",
				"FleetContext"
			],
			[
				"Model",
				"Model"
			],
			[
				"search",
				"search"
			],
			[
				"risk",
				"RiskFilter"
			],
			[
				"VesselChecklistDeficiencyTable",
				"VesselChecklistDeficiencyTable"
			],
			[
				"PSCFindingAnswerReport",
				"PSCFindingAnswerReport"
			],
			[
				"DownloadAnswerFindingReport",
				"DownloadAnswerFindingReport"
			],
			[
				"Download pdf",
				"DownloadPhamtomPDF"
			],
			[
				"DownloadPDF",
				"DownloadPDF"
			],
			[
				"VesselRelatio",
				"UserVesselRelationship"
			],
			[
				"subscriptio",
				"subscriptions"
			],
			[
				"VesselSwi",
				"VesselSwitcher"
			],
			[
				"vesselswi",
				"VesselSwitcher"
			],
			[
				"Dynamic",
				"DynamicFilter"
			],
			[
				"remove vessel",
				"remove_vessel"
			],
			[
				"VesselOver",
				"VesselOverview"
			],
			[
				"Insp",
				"Inspection"
			],
			[
				"rating_Card",
				"rating_card"
			],
			[
				"VesselLayoutCorrosionTrendChart",
				"VesselLayoutCorrosionTrendChart"
			],
			[
				"Checkpo",
				"Checkpoint"
			],
			[
				"Inspection",
				"Inspection"
			],
			[
				"Deficienc",
				"Deficiency"
			],
			[
				"VesselOVer",
				"VesselOverview"
			],
			[
				"inspection",
				"Inspection"
			],
			[
				"rating_card",
				"rating_card"
			],
			[
				"VesselLayoutLevelSummaryCard",
				"VesselLayoutLevelSummaryCard"
			],
			[
				"Overview",
				"VesselOverview"
			],
			[
				"InspectionProce",
				"InspectionProcedure"
			],
			[
				"COmponent",
				"Component"
			],
			[
				"InspectionMetadata",
				"InspectionMetadata"
			],
			[
				"VesselOverview",
				"VesselOverview"
			],
			[
				"ShowAllFleetToggle",
				"ShowAllFleetToggle"
			],
			[
				"BaseAspectRelatedVHMComponent",
				"BaseAspectRelatedVHMComponent"
			],
			[
				"get_last_answers",
				"get_last_answers"
			],
			[
				"GalleryData",
				"GalleryData"
			],
			[
				"test_logged_in_user_can_get_all_inspections_related",
				"test_logged_in_user_can_get_all_inspections_related"
			],
			[
				"Overviewv",
				"VesselOverviewV2"
			],
			[
				"cover",
				"cover"
			],
			[
				"feather",
				"feather"
			],
			[
				"gallery_images",
				"gallery_images"
			],
			[
				"ChangeRatingModal",
				"ChangeRatingModal"
			],
			[
				"inspection_rating_color",
				"inspection_rating_color"
			],
			[
				"Inspec",
				"Inspection"
			],
			[
				"VesselSafetyComponentsSummary",
				"VesselSafetyComponentsSummary"
			],
			[
				"VesselO",
				"VesselOverview"
			],
			[
				"BaseTabContainer",
				"BaseTabContainer"
			],
			[
				"BaseInspectionTourCharts",
				"BaseInspectionTourCharts"
			],
			[
				"TreeFindingDeadline",
				"TreeFindingDeadline"
			],
			[
				"VesselMonthlyInspectionsHistoryChart",
				"VesselMonthlyInspectionsHistoryChart"
			],
			[
				"LegacyInspectionCorrosionAnalysisButton",
				"LegacyInspectionCorrosionAnalysisButton"
			],
			[
				"esselMonthlyInspectionsHistoryChart",
				"VesselMonthlyInspectionsHistoryChart"
			],
			[
				"BaseFleetPSCFindings",
				"BaseFleetPSCFindings"
			],
			[
				"BaseFleetTabContainer",
				"BaseFleetTabContainer"
			],
			[
				"BaseVesselTabContainer",
				"BaseVesselTabContainer"
			],
			[
				"aseTabContainer",
				"BaseTabContainer"
			],
			[
				"BaseFindingsTable",
				"BaseFindingsTable"
			],
			[
				"Question",
				"Question"
			],
			[
				"get_last_",
				"get_last_answer"
			],
			[
				"get_las",
				"get_last_answer"
			],
			[
				"ShapeQuestionRel",
				"ShapeQuestionRel"
			],
			[
				"Questionlevel",
				"QuestionInLevelLink"
			],
			[
				"Level",
				"Level"
			],
			[
				"Answer",
				"Answer"
			],
			[
				"Snapshot",
				"ShapeSnapshot"
			],
			[
				"Finding",
				"Finding"
			],
			[
				"Shape",
				"ShapeLevelRelQS"
			],
			[
				"question",
				"Question"
			],
			[
				"VesselLayout",
				"VesselLayout"
			],
			[
				"FleetSire2FindingsBadge",
				"FleetSire2FindingsBadge"
			],
			[
				"VesselStructuralOverviewTab",
				"VesselStructuralOverviewTab"
			],
			[
				"VesselFindingsTab",
				"VesselFindingsTab"
			],
			[
				"BaseVesselHealthRatingChart",
				"BaseVesselHealthRatingChart"
			],
			[
				"VesselStructuralHealthRatingChar",
				"VesselStructuralHealthRatingChart"
			],
			[
				"VesselStructuralHealthRatingChart",
				"VesselStructuralHealthRatingChart"
			],
			[
				"BaseReportButton",
				"BaseReportButton"
			],
			[
				"StructuralReportButton",
				"StructuralReportButton"
			],
			[
				"VHLAspectSelector",
				"VHLAspectSelector"
			]
		],
		"width": 632.0
	},
	"selected_group": 0,
	"settings":
	{
		"copilot.conversation.code_block_index":
		{
		},
		"copilot.conversation.conversation_entries":
		[
		],
		"copilot.conversation.conversation_id": "",
		"copilot.conversation.follow_up": "",
		"copilot.conversation.is_visible": false,
		"copilot.conversation.is_waiting_conversation": false,
		"copilot.conversation.last_active_view_id": 20,
		"copilot.conversation.original_layout": null,
		"copilot.conversation.reference_block_state":
		{
		},
		"copilot.conversation.suggested_title": "",
		"copilot.copilotignore.patterns":
		{
		},
		"lsp_show_inlay_hints": false
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 307.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
